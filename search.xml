<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>词汇Day01</title>
    <url>/2022/03/29/%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B1%87/Day01/</url>
    <content><![CDATA[<h1 id="Day01"><a href="#Day01" class="headerlink" title="Day01"></a>Day01</h1><h2 id="List01"><a href="#List01" class="headerlink" title="List01"></a>List01</h2><h3 id="Group01"><a href="#Group01" class="headerlink" title="Group01"></a>Group01</h3><p><strong>vague</strong>    a. 模糊不清的；不明确的</p>
<ul>
<li><p><code>vague memory</code>： 模糊记忆</p>
</li>
<li><p><code>vague impression</code>： 模糊的影响</p>
</li>
<li><p><code>The description was pretty vague</code>： 这个描述非常的模糊</p>
</li>
</ul>
<p><strong>extravagant</strong>    a. 奢侈的，浪费的；过度的</p>
<ul>
<li><p><code>I felt very extravagant spending ￥3000 on a shirt</code>： 我觉得花3000块钱买件衬衫太奢侈了。</p>
</li>
<li><p><code>The product does not live up to the extravagant promises of the advertisers</code>： 这款产品根本没有广告商们吹嘘的那么好。</p>
</li>
</ul>
<p>invade    v. 武力侵入，侵略，侵袭</p>
<ul>
<li><code>invasion</code>    n. 侵略</li>
</ul>
<p><strong>evade</strong>    vt. 逃避</p>
<ul>
<li><code>inevitable</code>    a. 不可逃避的，难以避免的</li>
</ul>
<p><strong>aggress</strong>    v. 侵略</p>
<ul>
<li><p><code>aggressive</code>    a. 有侵略性的，有进取心的</p>
</li>
<li><p><code>aggression</code>    n. 侵略</p>
</li>
</ul>
<p>progress    n. 进步；前进    vi. 进步，前进</p>
<p>proceed    vi. 继续，行进</p>
<p>process    n. 过程    vt. 处理，加工    vi. 列队前进</p>
<ul>
<li><p><code>procedure</code>    n. 程序，步骤</p>
</li>
<li><p><code>proceeding</code>    n. 诉讼；议程</p>
</li>
</ul>
<p><strong>excess</strong>    n. 过分，过量，过剩    a. 额外的，附加的</p>
<ul>
<li><p><code>exceed</code>    vt. 超过，胜过</p>
</li>
<li><p><code>excessive</code>    a. 过剩的；过度的；过分的</p>
</li>
<li><p><code>exceedingly</code>    ad. 极度地，非常</p>
</li>
</ul>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol>
<li><p>四个表示走的词根：<code>vag</code>、<code>vade</code>、<code>gress</code>和<code>cess</code>；</p>
</li>
<li><p><code>aggressive</code>    a. 有侵略性的，有进取心的；咄咄逼人的</p>
<ul>
<li><code>an aggressive basketball player</code>： 一个进攻型的篮球选手</li>
<li><code>An aggressive country is always ready to  start a war</code>： 一个侵略性的国家随时准备发动战争</li>
</ul>
</li>
</ol>
<h3 id="Group02"><a href="#Group02" class="headerlink" title="Group02"></a>Group02</h3><p><strong>vigor</strong>    n. 活力；热情</p>
<ul>
<li><code>vigorous</code>    a. 有活力的；精力充沛的</li>
</ul>
<p>vivid    a. 生动的</p>
<p>previous    a. 以前的，早先的</p>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>词根<code>vi</code>在很多单词中表生命</p>
<h3 id="Group03"><a href="#Group03" class="headerlink" title="Group03"></a>Group03</h3><p>view    n. 景观；视野；观点    vt. 把……视为</p>
<p>version    n. 视觉；视野；远见</p>
<ul>
<li><p><code>the version of future</code>： 关于未来的远见</p>
</li>
<li><p><code>visual</code>    a. 视觉的；看得到的</p>
</li>
<li><p><code>visualize</code>    vt. 使……可视化；使形象化</p>
</li>
<li><p><code>visiable</code>    a. 可视的；明显的</p>
</li>
<li><p><code>invisiable</code>    a. 看不见的；不明显的</p>
</li>
</ul>
<p>evident    a. 明显的</p>
<ul>
<li><code>evidence</code>    n. 证据</li>
</ul>
<p>obvious    a. 明显的，显而易见的</p>
<p><strong>revise</strong>    v. 修订，修改；复习</p>
<p>supervise    vt. 监督，管理；指导</p>
<ul>
<li><code>supervisor</code>    n. 监督者；主管</li>
</ul>
<p>investigate    v. 审查，调查；研究</p>
<ul>
<li><code>investigation</code>    n. 调查</li>
</ul>
<p>witness    vt. 目击，见证    vi. 做见证    n. 目击者</p>
<h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ol>
<li><p>词根<code>vi</code>可表示“看”，有<code>ve</code>、<code>vis</code>、<code>vid</code>和<code>wi</code>等多种扩展形式；</p>
</li>
<li><p><code>evident</code>和<code>evidence</code>两者意思区别；</p>
</li>
<li><p><code>evident</code>和<code>obvious</code>是同义词。</p>
</li>
</ol>
<h3 id="Group04"><a href="#Group04" class="headerlink" title="Group04"></a>Group04</h3><p><strong>folk</strong>    a. 民间的    n. 民族；人们</p>
<ul>
<li><code>Folk art covers a wide range</code>：民间艺术覆盖了非常大的范围</li>
</ul>
<p><strong>vulgar</strong>    a. 粗俗的，粗野的</p>
<ul>
<li><code>volkswagen</code>：大众汽车</li>
</ul>
<h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><p><code>folk</code>和<code>volk</code>读音相仿</p>
<h3 id="Group05"><a href="#Group05" class="headerlink" title="Group05"></a>Group05</h3><p>evaluate    vt. 评估；评价</p>
<p>estimate    v. 估计；估价</p>
<p>value    n. 价值    vt. 重视；给……估值</p>
<ul>
<li><p><code>vuluable</code>    a. 有价值的</p>
</li>
<li><p><code>invuluable</code>    a. 无价的，非常贵重的，价值连城的</p>
</li>
</ul>
<p>unvalued    a. 不值钱的</p>
<p><strong>devalue</strong>    v.（使）贬值；降低价值</p>
<p>valid    a. （法律上）生效的；合理的</p>
<p>invalid    a. 无效的；无事实依据的</p>
<p><strong>equivalent</strong>    a.（价值、数量、重要性等）相等的；    n. 等价物；相等物</p>
<ul>
<li><code>equivalent to</code>：与……等价的；与……相等的</li>
</ul>
<h4 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h4><ol>
<li><p>这组单词都与<code>value</code>有关；</p>
</li>
<li><p><code>invuluable</code>和<code>priceless</code>一致，都表示“无价的，非常宝贵的”</p>
</li>
</ol>
<h3 id="Group06"><a href="#Group06" class="headerlink" title="Group06"></a>Group06</h3><p>weight    n. 重量</p>
<p>weigh    vt. 称重；权衡，斟酌；重量为</p>
<ul>
<li><p><code>weigh the benefits against the risks</code>：权衡利弊</p>
</li>
<li><p><code>weigh up the pros and cons</code>：权衡利弊</p>
</li>
<li><p><code>pros</code>    n. 赞成者；赞成的意见（pro 的复数）<br>abbr. 舞台前部（proscenium）；诗体学（prosody）</p>
</li>
<li><p><code>cons</code>    n. 反对者（con 的复数）</p>
</li>
</ul>
<h4 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h4><p><code>estimate</code>和<code>evaluate</code>是指对数量、价值、质量等的评价和评估，<code>weigh</code>可以指权衡利弊。</p>
<h3 id="Group07"><a href="#Group07" class="headerlink" title="Group07"></a>Group07</h3><p><strong>ideology</strong>    n. 思想体系，思想意识；意识形态</p>
<p><strong>ideological</strong>    a. 意识形态上的</p>
<p><strong>ideologist</strong>    n. 理论家；思想家</p>
<h4 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h4><p>这组单词都与“思想“”有关，注意以<code>-ology</code>结尾的单词多翻译为”……学科，……体系”；以<code>-ist</code>结尾的单词多翻译为“……学家”。</p>
<h3 id="Group08"><a href="#Group08" class="headerlink" title="Group08"></a>Group08</h3><p><strong>domestic</strong>    a. 本国的，国内的；家用的；家庭的    n. 国货</p>
<ul>
<li><p><code>dome</code>    n. 屋顶</p>
</li>
<li><p><code>Gross Demestic Product</code>：GDP（国内生产总值）</p>
</li>
<li><p><code>domestic flights</code>：国内航班</p>
</li>
<li><p><code>domestic violence</code>：家庭暴力</p>
</li>
</ul>
<p><strong>domesticate</strong>    vt. 驯养；教化（动物）</p>
<p><strong>dominate</strong>    v. 支配，统治</p>
<ul>
<li><p><code>dominant</code>    a. 占支配地位的，统治的</p>
</li>
<li><p><code>predominant</code>    a. 主要的，支配的</p>
</li>
</ul>
<p><strong>domain</strong>    n. 领域，范畴</p>
<p><strong>dormitory</strong>    n. 宿舍（=dorm    n. 宿舍）</p>
<h4 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h4><p>这组单词都与“家”有关，可联系屋顶<code>dome</code>记忆；家既可以是“家庭”，也可以是“国家”，那么只要是“家”，就有“领域，范畴”的含义，也延伸出“统治，支配”的含义。</p>
<h3 id="Group09"><a href="#Group09" class="headerlink" title="Group09"></a>Group09</h3><p>determine    vt. 决定；确定；左右；直接影响</p>
<ul>
<li><code>determination</code>    n. 决心</li>
</ul>
<p>terminate    vt. 终结</p>
<ul>
<li><code>terminal</code>    a. 终结的；极限的；    n. 终点；终端</li>
</ul>
<p><strong>terminus</strong>    n. 终点；终点站</p>
<h4 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h4><p>这组单词都与“终点”相关，词根<code>term</code>表示“结束”</p>
<h3 id="Group10"><a href="#Group10" class="headerlink" title="Group10"></a>Group10</h3><p><strong>luxury</strong>    n. 奢华的享受；奢侈品</p>
<ul>
<li><code>luxurious</code>    a. 十分舒适的；奢侈的</li>
</ul>
<p><strong>luxuriate</strong>    vi. 尽情享乐</p>
<p><strong>luxuriant</strong>    a. 富饶的；华丽的；茂密的</p>
<h4 id="小结-9"><a href="#小结-9" class="headerlink" title="小结"></a>小结</h4><p>这组单词都是从表示“发光”的词根演变而来。注意以<code>-ate</code>结尾的单词既有可能是形容词，也有可能是动词；<code>-ous</code>和<code>-ant</code>是形容词词尾。</p>
<h3 id="Group11"><a href="#Group11" class="headerlink" title="Group11"></a>Group11</h3><p>expense    n. 花费，开支    vt. 向……收取费用</p>
<ul>
<li><p><code>greate expense</code>：巨额花费</p>
</li>
<li><p><code>all the expense of sb/sth</code>：以牺牲某人/某物为代价</p>
</li>
<li><p><code>at sb&#39;s expense</code>：由某人出钱，由某人负担费用</p>
</li>
<li><p><code>living expenses</code>：生活开支</p>
</li>
<li><p><code>legal expenses</code>：律师费，诉讼费</p>
</li>
</ul>
<p><strong>pension</strong>    n. 养老金，退休金；津贴</p>
<p>expensive    a. 昂贵的</p>
<p>expend    vt. 花费；消耗</p>
<ul>
<li><code>expenditure</code>    n. 支出，花费</li>
</ul>
<p><strong>compensate</strong>    v. 赔偿，补偿；弥补</p>
<ul>
<li><code>compensation</code>    n. 赔偿</li>
</ul>
<h4 id="小结-10"><a href="#小结-10" class="headerlink" title="小结"></a>小结</h4><ol>
<li><p>这组单词都与“钱”相关， 其中经常考查的有<code>pension</code>和<code>compensate</code>；</p>
</li>
<li><p><code>expense</code>一般指日常开销以及向雇主报销的费用；<code>expenditure</code>一般指精力、时间的耗费，以及大额开支，比如政府开支（<code>government expenditure</code>）、军费开支（<code>millitary expenditure</code>）。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>英语词汇</category>
      </categories>
      <tags>
        <tag>vocabulary</tag>
      </tags>
  </entry>
  <entry>
    <title>oh-my-zsh使用记录</title>
    <url>/2021/07/14/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/oh-my-zsh%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="自带-alias-插件"><a href="#自带-alias-插件" class="headerlink" title="自带 alias 插件"></a>自带 alias 插件</h3><ol>
<li><p>git </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gaa = git add --all</span><br><span class="line">gcmsg = git commit -m</span><br><span class="line">ga = git add</span><br><span class="line">gst = git status</span><br><span class="line">gp = git push</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="终端命令"><a href="#终端命令" class="headerlink" title="终端命令"></a>终端命令</h3><ol>
<li><p>textutil</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将docx转为txt</span></span><br><span class="line">textutil -convert txt /path/to/file.docx</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>zsh</tag>
        <tag>oh-my-zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell实用命令记录</title>
    <url>/2021/07/13/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/Shell%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<ol>
<li><p>批量修改当前文件夹下所有目录或文件的权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 批量修改目录权限为755</span><br><span class="line">find ./ -type d | xargs chmod 755</span><br><span class="line"># 批量删除文件的执行权限</span><br><span class="line">find ./ -type f | xargs chmod a-x</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
  </entry>
  <entry>
    <title>啥？谷歌浏览器自带的游戏也能开挂？！</title>
    <url>/2021/07/12/%E5%89%8D%E7%AB%AF/%E5%95%A5%EF%BC%9F%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%B8%A6%E7%9A%84%E6%B8%B8%E6%88%8F%E4%B9%9F%E8%83%BD%E5%BC%80%E6%8C%82%EF%BC%9F%EF%BC%81/</url>
    <content><![CDATA[<img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210712190703.png" style="zoom:50%;">

<p>据市场统计分析<a href="#refer-anchor-1"><sup>[1]</sup></a>，谷歌浏览器Chrome依然以绝对的市场份额在浏览器届有着举足轻重的地位。Chrome以其强大的插件和方便的调试功能而备受青睐，它已经融入到我们的日常工作、学习和生活当中来。就算是断网了，我们也能从Chrome隐藏的彩蛋中获得一番乐趣。相信也有不少的小伙伴发现这个小恐龙的彩蛋了吧？玩过的小伙伴欢迎下方评论分享你的最高分数~</p>
<img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210715155912.gif">

<p><strong>下面就带大家一起开启这个彩蛋，正确的打开方式有以下三种：</strong></p>
<ol>
<li><p>（<strong>简单</strong>）拔掉网线或断开WIFI，再打开Chrome浏览器，随便输入一个网站的域名，比如百度:<a href="www.baidu.com">www.baidu.com</a>，等待数秒即可；</p>
</li>
<li><p>（<strong>推荐</strong>）打开任意一个网址，按<code>F12</code>键，然后在Chrome浏览器的调试工具上选择<code>Network</code>项下方下拉框并选中<code>Offline</code>，再刷新下当前页面即可；</p>
<img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210715154344.png" alt="Offline设置" style="zoom:;">
</li>
<li><p>直接在地址栏输入<code>chrome://dino</code>，等待页面加载即可。</p>
</li>
</ol>
<p>如此看来这个小游戏还是能在没网的条件下打发打发时间的，不过玩着不一会儿就GAME OVER了，这点确实不太爽。那么有没有办法能让小恐龙“开挂”自行刷分呢，别着急，码哥将为你一一道来。</p>
<p>I. 让小恐龙碰到障碍物而不结束游戏</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 在浏览器的Console中输入以下代码</span><br><span class="line">Runner.instance_.gameOver=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210721222058.png" alt="image-20210721222058312"></p>
<img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210721221805.gif">

<p>II. 如果觉得小恐龙移动的速度不够快，还可以在浏览器同样的地方输入下方代码使其速度增快</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Runner.instance_.setSpeed(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210721222409.gif">

<p>III. 此外还可以用代码使小恐龙跳跃的高度更高</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Runner.instance_.tRex.setJumpVelocity(<span class="number">500</span>)</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210721222607.gif">

<p>好了，以上三种“外挂”都是通过<code>JavaScript</code>代码实现的，那么如果你想更加深入地了解和学习前端开发技术，GitHub上有份开源的前端<a href="https://github.com/qianguyihao/Web" target="_blank" rel="noopener">入门到进阶图文教程</a>，项目目录如下图，从最基础的HTML、CSS和JavaScript到目前较火的Vue和React前端框架都被囊括在内，希望能帮到你！</p>
<img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210722204544.png">

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><div id="refer-anchor-1"></div>
- [1] [桌面浏览器三月市场份额报告：Chrome第一 Edge达到新高度](https://finance.sina.com.cn/tech/2021-04-05/doc-ikmyaawa6503802.shtml)

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>JS</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>零基础也能看懂的Web简介</title>
    <url>/2021/07/08/%E5%89%8D%E7%AB%AF/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84Web%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>如果你是刚接触Web或是想从事Web技术方向相关工作，那么本文能帮你更加了解Web技术。</p>
<p>首先，我们先了解3个概念</p>
<ol>
<li><p>网站</p>
</li>
<li><p>Web浏览器</p>
</li>
<li><p>服务器</p>
</li>
</ol>
<h3 id="一、网站"><a href="#一、网站" class="headerlink" title="一、网站"></a>一、网站</h3><p>一般来说，我们把网页的集合称为网站，网站由多个网页和一个首页构成。</p>
<p>其中网页又由文本、图片和音视频文件组成。</p>
<p>每个网站都有自己特定的网址，比如，百度：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>
<h4 id="如何构建一个网站-网页？"><a href="#如何构建一个网站-网页？" class="headerlink" title="如何构建一个网站/网页？"></a>如何构建一个网站/网页？</h4><p>你可以使用下列技术开发自己的网站/网页：</p>
<ul>
<li><p>HTML</p>
</li>
<li><p>CSS</p>
</li>
<li><p>JavaScript</p>
</li>
</ul>
<p><strong>HTML：</strong>这是一门标记语言，也就意味着你可以用HTML的标签（比如：<code>&lt;p&gt; &lt;div&gt;</code>）来组织网页的结构；</p>
<p><strong>CSS：</strong>CSS可用于设计网页，比如用CSS可以更改网页里的文本颜色；</p>
<p><strong>JavaScript：</strong>这是一门Web编程语言，用JavaScript可以更新HTML和CSS内容。</p>
<p>HTM Web网页示例</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210709221712.png" alt="第一个网页示例"></p>
<h4 id="静态网站-vs-动态网站"><a href="#静态网站-vs-动态网站" class="headerlink" title="静态网站 vs 动态网站"></a>静态网站 vs 动态网站</h4><h5 id="静态网站"><a href="#静态网站" class="headerlink" title="静态网站"></a>静态网站</h5><p><strong>静态网站</strong>是一类基本的网站，比较容易被创建，这类网站的网页可以直接用HTML编码。<strong>每个网页的代码都是固定的，因此网页所包含的信息也就不会有变化，看起来就像是印刷的纸质读物一般。</strong></p>
<h5 id="动态网站"><a href="#动态网站" class="headerlink" title="动态网站"></a>动态网站</h5><p><strong>动态网站</strong>是多个动态页面的集合，动态页面上的信息会动态发生改变，<strong>页面上的内容来源于数据库或内容管理系统（CMS）。</strong></p>
<h4 id="域名-IP地址"><a href="#域名-IP地址" class="headerlink" title="域名/IP地址"></a>域名/IP地址</h4><p>域名一般和网站一一对应，主要被用来查找和定位位于互联网上的计算机。</p>
<p>计算机可以使用一长串数字组成的IP地址，但让用户去记住一长串数字的IP地址来访问网站就太难了。域名由此发展而来，用户可以通过域名找到网站而不是通过难记的IP地址。</p>
<h3 id="二、Web浏览器"><a href="#二、Web浏览器" class="headerlink" title="二、Web浏览器"></a>二、Web浏览器</h3><p>Web浏览器是一个软件平台，它允许用户定位、访问和展示Web页面。</p>
<p>浏览器主要被用来展示和访问网站，网页上的内容由编程语言创建，例如：超文本标记语言HTML。</p>
<p>常见浏览器</p>
<table frame="void" rules="none">
  <tr>
      <td align="right"><img border="none" src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210710104347.png" style="zoom:10%;"></td>
      <td align="left">谷歌浏览器</td>
  </tr><tr>    
      <td align="right"><img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210710104634.png" style="zoom:8%;"></td>
      <td align="left">火狐浏览器</td>
  </tr>
  <tr>
      <td align="right"><img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210710104718.png" style="zoom:15%;"></td>
      <td align="left">Safari浏览器</td>
  </tr>
</table>



<h4 id="浏览器是如何工作的？"><a href="#浏览器是如何工作的？" class="headerlink" title="浏览器是如何工作的？"></a>浏览器是如何工作的？</h4><p>通常浏览器会先获取网页里的HTML/CSS/JavaScript代码，然后把这些代码送至渲染引擎处，渲染引擎再将HTML文档解析转换为”Content tree”里的<a href="https://www.runoob.com/htmldom/htmldom-nodes.html" target="_blank" rel="noopener">DOM</a>节点，这样用户就能在浏览器上看到完整的页面。简要工作流程见下图：</p>
<img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210710110123.png" alt="浏览器简要工作流程图" style="zoom:75%;">

<h4 id="渲染引擎"><a href="#渲染引擎" class="headerlink" title="渲染引擎"></a>渲染引擎</h4><h5 id="谷歌浏览器"><a href="#谷歌浏览器" class="headerlink" title="谷歌浏览器"></a>谷歌浏览器</h5><p><strong>Blink</strong>：渲染引擎&amp;Chrome v8引擎（<a href="https://baike.baidu.com/item/javascript%E5%BC%95%E6%93%8E/5356108?fr=aladdin" target="_blank" rel="noopener">JS引擎</a>）</p>
<h5 id="微软Edge浏览器"><a href="#微软Edge浏览器" class="headerlink" title="微软Edge浏览器"></a>微软Edge浏览器</h5><p><strong>EdgeHTML</strong>：渲染引擎&amp;<strong>Chakra</strong>（JS引擎）</p>
<h5 id="苹果Safari浏览器"><a href="#苹果Safari浏览器" class="headerlink" title="苹果Safari浏览器"></a>苹果Safari浏览器</h5><p><strong>WebKit</strong>:渲染引擎</p>
<h3 id="三、服务器"><a href="#三、服务器" class="headerlink" title="三、服务器"></a>三、服务器</h3><p>服务器也是一台计算机，它主要用于处理请求和给互联网或本地局域网的其他计算机发送数据。</p>
<p>一般来说，服务器的数据大部分是发送给浏览器的。</p>
<h4 id="服务器分类"><a href="#服务器分类" class="headerlink" title="服务器分类"></a>服务器分类</h4><ol>
<li><p>Web服务器：为Web网页提供服务</p>
</li>
<li><p>右键服务器：为收发邮件提供服务</p>
</li>
<li><p>FTP服务器：为网络上文件传输提供服务</p>
</li>
</ol>
<h4 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h4><p>web服务器是一段程序，它能够接受浏览器端用户发出的请求，并响应用户请求对应的文件和数据。</p>
<p>常见Web服务器</p>
<table frame="void" rules="none">
  <tr>
      <td align="right"><img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210710111842.png" style="zoom:10%;"></td>
      <td align="left">NGINX</td>
  </tr><tr>    
      <td align="right"><img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210710112023.png" style="zoom:7%;"></td>
      <td align="left">Apache</td>
  </tr>
  <tr>
      <td align="right"><img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210710112126.png" style="zoom:8%;"></td>
      <td align="left">Tomcat</td>
  </tr>
</table>


<p>使用这些服务器时，可以将数据存储在数据库中</p>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>数据库软件是条理分明的信息的集合，因为它能方便地被访问、管理和更新。</p>
<p>常见数据库</p>
<table frame="void" rules="none">
  <tr>
      <td align="right"><img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210710112547.png" style="zoom:10%;"></td>
      <td align="left">MySQL</td>
  </tr><tr>    
      <td align="right"><img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210710112632.png" style="zoom:5%;"></td>
      <td align="left">SQLServer</td>
  </tr>
  <tr>
      <td align="right"><img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210710112817.png" style="zoom:5%;"></td>
      <td align="left">Oracle</td>
  </tr>
  <tr>
      <td align="right"><img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210710112852.png" style="zoom:10%;"></td>
      <td align="left">MongoDB</td>
  </tr>
  <tr>
      <td align="right"><img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210710112933.png" style="zoom:10%;"></td>
      <td align="left">Redis</td>
  </tr>
</table>

<p>数据库又可以从大类上分为两种，即关系数据库（Relational Database）和非关系数据库（Not Only SQL）</p>
<h5 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h5><p>此类数据库的数据存储类似于Excel表格，按固定的格式一行一列存储。这类数据库的结构化程度非常高，典型代表就是MySQL。</p>
<h5 id="非关系数据库"><a href="#非关系数据库" class="headerlink" title="非关系数据库"></a>非关系数据库</h5><p>此类数据库允许用户存储多种多样的数据类型，不论是由计算机产生的，还是由用户产生的，代表数据库为MongoDB。</p>
<p>下图很好地对比体现出了高度结构化的数据和非结构化数据的两种状态</p>
<img src="https://cdn.jsdelivr.net/gh/fcbhank/img-host@main/img/20210710114702.png" alt="image-20210710114702504" style="zoom:45%;">

<p>所以看完以上内容，你是否对Web有了进一步的了解呢？欢迎转发+评论</p>
<p>参考资料</p>
<p>[1] <a href="https://medium.com/codingurukul/intro-to-web-101-39ec07c707ec#id_token=eyJhbGciOiJSUzI1NiIsImtpZCI6ImI2ZjhkNTVkYTUzNGVhOTFjYjJjYjAwZTFhZjRlOGUwY2RlY2E5M2QiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJuYmYiOjE2MjU3OTE5NDgsImF1ZCI6IjIxNjI5NjAzNTgzNC1rMWs2cWUwNjBzMnRwMmEyamFtNGxqZGNtczAwc3R0Zy5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwODgyODI5ODE1NjcxNzYwNzQ3MyIsImVtYWlsIjoiaGFua2h1NHdvcmtAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImF6cCI6IjIxNjI5NjAzNTgzNC1rMWs2cWUwNjBzMnRwMmEyamFtNGxqZGNtczAwc3R0Zy5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsIm5hbWUiOiJIYW5rIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hLS9BT2gxNEdpYVRlMDFURjNWRXVQQ0tBcHcwZVVQdGVWNUFicE9LbGZnc29DeT1zOTYtYyIsImdpdmVuX25hbWUiOiJIYW5rIiwiaWF0IjoxNjI1NzkyMjQ4LCJleHAiOjE2MjU3OTU4NDgsImp0aSI6IjcyMGRiMjY3OTkwOTZkOTNkZTI1NTE1MGM0MjZhMjJmODUwZTJiNTMifQ.fypzoLKgBIBcIZvnDS1ug35vtwXeA580-eaq4rTecZctz7lDksxKU6GvmTGp12O_nLRXPy64Pj9eDZulE-AF4MUiy2S7HvHnldAHn2E6ke3VJQXss9FO-_Ik8UJEVdtzqF9DxQ8dk64YYN-5tSOClOiECV2-Tv7QTXMNNZxvyP9XctaNvRKJksXx__JGaIJgugkoh0Gp4MM05FkL4tI1etnVQ0tvZ2pKfFYcg04eK2KZAKk__bKUbuE3vrHZgvFmQon2szd9pUI31O-itcZRqnW2shbeDEGsBZJMMj9ra9WSF65AClltRiog7H5JyWV72f9O-V4-YyGy384j6lDOLQ" target="_blank" rel="noopener">Intro to Web 101</a></p>
<p>[2] <a href="https://www.runoob.com/html/html-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>Node.js</tag>
        <tag>Vue</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>04-实践部署常用服务</title>
    <url>/2020/11/11/Docker%E5%AD%A6%E4%B9%A0/04-%E5%AE%9E%E8%B7%B5%E9%83%A8%E7%BD%B2%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. Docker Hub上搜索Nginx资源(地址：https://hub.docker.com/_/nginx)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 确认版本，下载镜像</span></span><br><span class="line">docker pull nginx:1.18</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 后台启动nginx，并将容器内部80端口映射到宿主机80端口</span></span><br><span class="line">docker run --name=MyNginx -p 80:80 -d nginx:1.18</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 验证nginx启动成功与否</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  4.1 curl会出现nginx欢迎页的html信息</span></span><br><span class="line">curl localhost</span><br><span class="line"><span class="meta">#</span><span class="bash">  4.2 浏览器直接访问宿主机ip地址，则会看到浏览器上的nginx欢迎页</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. 停止nginx服务，则第4步均看不到nginx相关提示信息</span></span><br><span class="line">docker stop 932cbd6f04ef</span><br></pre></td></tr></table></figure>

<h3 id="Docker安装Tomcat"><a href="#Docker安装Tomcat" class="headerlink" title="Docker安装Tomcat"></a>Docker安装Tomcat</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. Docker Hub搜索Tomcat资源（地址：https://hub.docker.com/_/tomcat）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 下载镜像</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 后台启动</span></span><br><span class="line">docker run -d -p 80:8080 tomcat</span><br><span class="line"><span class="meta">#</span><span class="bash">   docker中的tomcat根目录下的webapps当前没有文件，所以直接访问会是404，可将`webapps.dist/`下的复制一份到`webapps/`下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 验证：浏览器访问宿主机ip地址，即可看见tomcat经典页面</span></span><br></pre></td></tr></table></figure>

<h3 id="Docker安装ElasticSearch"><a href="#Docker安装ElasticSearch" class="headerlink" title="Docker安装ElasticSearch"></a>Docker安装ElasticSearch</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. Docker Hub搜索ElasticSearch资源（地址：https://hub.docker.com/_/elasticsearch）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 下载指定版本镜像</span></span><br><span class="line">docker pull elasticsearch:7.9.2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 后台启动</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   3.1 直接启动，将消耗大量内存</span></span><br><span class="line">docker run -d --name ES -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node"  elasticsearch:7.9.2</span><br><span class="line"><span class="meta">#</span><span class="bash">   3.2 限制使用内存启动</span></span><br><span class="line">docker run -d --name ES -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node"  -e ES_JAVA_OPTS="-Xms64m -Xmx512m" elasticsearch:7.9.2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 验证</span></span><br><span class="line">curl localhost:9200</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nginx</tag>
        <tag>Tomcat</tag>
        <tag>Elasticsearch</tag>
        <tag>Kibana</tag>
      </tags>
  </entry>
  <entry>
    <title>03-Docker常用命令</title>
    <url>/2020/11/10/Docker%E5%AD%A6%E4%B9%A0/03-Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 版本信息</span></span><br><span class="line">docker version  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 系统信息</span></span><br><span class="line">docker info</span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令大全</span></span><br><span class="line">docker 命令 --help</span><br></pre></td></tr></table></figure>

<p>命令帮助文档地址：<a href="https://docs.docker.com/engine/reference/commandline" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline</a><br>镜像搜索地址：<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p>
<h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><p><strong>docker images 查看本机上的所有镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line">REPOSITORY：    镜像的仓库源</span><br><span class="line">TAG：           镜像的标签</span><br><span class="line">IMAGE ID：      镜像的ID</span><br><span class="line">CREATED：       镜像的创建时间</span><br><span class="line">SIZE：          镜像的大小</span><br></pre></td></tr></table></figure>

<p><strong>docker search 搜索镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索MySQL镜像</span></span><br><span class="line">docker search mysql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 过滤收藏数大于3000的starts</span></span><br><span class="line">docker search mysql -f=STARS=3000</span><br></pre></td></tr></table></figure>

<p><strong>docker pull 下载镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载最新版MySQL</span></span><br><span class="line">docker pull mysql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定下载版本</span></span><br><span class="line">docker pull mysql:[tag]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line">docker pull mysql</span><br><span class="line">Using default tag: latest            # tag缺失，默认最新版</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">bb79b6b2107f: Pull complete          # 分层下载</span><br><span class="line">49e22f6fb9f7: Pull complete </span><br><span class="line">842b1255668c: Pull complete </span><br><span class="line">9f48d1f43000: Pull complete </span><br><span class="line">c693f0615bce: Pull complete </span><br><span class="line">8a621b9dbed2: Pull complete </span><br><span class="line">0807d32aef13: Pull complete </span><br><span class="line">a56aca0feb17: Pull complete </span><br><span class="line">de9d45fd0f07: Pull complete </span><br><span class="line">1d68a49161cc: Pull complete </span><br><span class="line">d16d318b774e: Pull complete </span><br><span class="line">49e112c55976: Pull complete </span><br><span class="line">Digest: sha256:8c17271df53ee3b843d6e16d46cff13f22c9c04d6982eb15a9a47bd5c9ac7e2d</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 等价概念</span></span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本下载(版本需要明确出现在docker hub中)</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">bb79b6b2107f: Already exists </span><br><span class="line">49e22f6fb9f7: Already exists </span><br><span class="line">842b1255668c: Already exists </span><br><span class="line">9f48d1f43000: Already exists </span><br><span class="line">c693f0615bce: Already exists </span><br><span class="line">8a621b9dbed2: Already exists </span><br><span class="line">0807d32aef13: Already exists  # 前7个已存在，不需要重新下载</span><br><span class="line">f15d42f48bd9: Pull complete   # UnionFS 联合文件系统</span><br><span class="line">098ceecc0c8d: Pull complete </span><br><span class="line">b6fead9737bc: Pull complete </span><br><span class="line">351d223d3d76: Pull complete </span><br><span class="line">Digest: sha256:4d2b34e99c14edb99cdd95ddad4d9aa7ea3f2c4405ff0c3509a29dc40bcb10ef</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure>

<p><strong>docker rmi 删除镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker rmi -f 镜像id1 镜像id2 镜像id3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有镜像 docker rmi -f $(docker images -aq),其中$(传递的参数)</span></span><br><span class="line"></span><br><span class="line">docker rmi db2b37ec618</span><br></pre></td></tr></table></figure>

<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><blockquote>
<p>说明：在拥有镜像的前期下才可以创建容器，这里使用centos镜像。</p>
</blockquote>
<p><strong>下载centos</strong><br><code>docker pull centos</code></p>
<p><strong>新建容器并启动</strong><br><code>docker run [可选参数] image</code><br>参数说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--name=&quot;Name&quot;   容器名 tomcat01 tomcat02，用来区分容器</span><br><span class="line">-d              后台方式运行</span><br><span class="line">-it             交互方式运行，可进入容器查看内容</span><br><span class="line">-p              小写p指定容器的端口</span><br><span class="line">    -p 主机端口：容器端口</span><br><span class="line">    -p 容器端口</span><br><span class="line">    -p　ip:主机端口:容器端口</span><br><span class="line">    容器端口</span><br><span class="line">-P              随机指定容器端口</span><br></pre></td></tr></table></figure>

<p>启动并进入容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it centos /bin/bash</span><br><span class="line">[root@17423af695a2 /]#</span><br></pre></td></tr></table></figure>

<p>查看根目录结构，基本版centos（很多命令不完善）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@17423af695a2 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure>

<p><strong>查看所有运行的容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps [可选参数]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 参数说明</span></span></span><br><span class="line">缺省     显示当前正在运行的容器</span><br><span class="line">-a      显示当前正在运行+历史运行过的容器</span><br><span class="line">-n=?    显示最近创建的n个容器</span><br><span class="line">-q      仅显示容器id</span><br></pre></td></tr></table></figure>

<p><strong>退出容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit                    # 直接退出并停止容器</span><br><span class="line">【快捷键】Ctrl + P + Q    # 不停止容器退出</span><br></pre></td></tr></table></figure>

<p><strong>删除容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除指定容器，不可删除正在运行的容器，强制删除 rm -f</span></span><br><span class="line">docker rm 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制删除所有容器</span></span><br><span class="line">docker rm -f $(docker ps -aq)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 管道符方式删除所有容器</span></span><br><span class="line">docker ps -aq | xagrs docker rm -f</span><br></pre></td></tr></table></figure>

<p><strong>启动和停止容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">docker start 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">docker restart 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止</span></span><br><span class="line">docker stop 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 杀死</span></span><br><span class="line">docker kill 容器id</span><br></pre></td></tr></table></figure>

<h3 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h3><p><strong>后台启动容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker run -d 镜像名</span></span><br><span class="line">docker run -d centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题docker ps 发现centos停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 坑：docker容器使用后台运行，必须要有一个前台进程。docker发现没有引用，就会自动停止</span></span><br></pre></td></tr></table></figure>

<p><strong>查看日志命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs [可选参数] 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示日志</span></span><br><span class="line">-tf </span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定日志条数</span></span><br><span class="line">--tail=number</span><br></pre></td></tr></table></figure>

<p><strong>查看进程信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure>

<p><strong>查看容器原数据</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 容器的环境变量、配置信息等等</span></span><br><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure>

<p><strong>进入当前正在运行的容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通常容器以后台的方式运行，此时可通过一下命令进入该挂起的容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 方式一(进入后开启一个新的terminal))</span></span></span><br><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 方式二(进入正在执行的终端，不会启动新的进程)</span></span></span><br><span class="line">docker attach 容器id</span><br></pre></td></tr></table></figure>

<p><strong>从容器内拷贝文件到宿主机</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从容器到主机</span></span><br><span class="line">docker cp 容器id:源地址 目的地址</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从主机到容器</span></span><br><span class="line">docker cp 源地址 容器id:目的地址</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝文件不需要容器正在运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前拷贝文件为手动操作，后期可以通过 -v 卷技术自动同步</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>02-安装Docker</title>
    <url>/2020/11/10/Docker%E5%AD%A6%E4%B9%A0/02-%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3876364983,3875593507&fm=15&gp=0.jpg" alt="Docker架构图"></p>
<p><strong>镜像（image）</strong>：类似模板，可以通过模板创建容器服务<br>ex: tomcat镜像===&gt; run===&gt; tomcat01容器（提供服务），镜像可以创建多个容器，最终项目运行在容器中；</p>
<p><strong>容器（container）</strong>：Docker利用容器技术，独立运行一个或一组应用，由镜像创建。基本命令：创建，启动，停止，删除。可以把容器理解为轻巧的Linux系统。<br><strong>仓库（repository）</strong>：存放镜像的地方，区分为共有/私有仓库。<br>【Docker Hub】【阿里云可配置镜像加速】</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p>前期准备</p>
<ol>
<li>简单Linux基础</li>
<li>CentOS 7(系统内核需要3.10以上，查看方法<code>uname -r</code>)</li>
</ol>
</blockquote>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p><strong><a href="https://docs.docker.com/" target="_blank" rel="noopener">帮助文档</a></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 卸载老版本Docker</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 安装辅助工具</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 设置镜像仓库</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 【默认国外】</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 【阿里云】</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 安装最新文件【ce-社区版 ee-企业版】</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推荐更新yum软件包索引，生成缓存</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始安装</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. 启动docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6. 查看docker版本</span></span><br><span class="line">sudo docker version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7. 运行hello-world</span></span><br><span class="line">sudo docker run hello-world</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 8. 查看下载的hello-world镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 卸载Docker引擎, 命令行工具和安装包:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 删除所有的镜像，容器等资源</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo rm -rf /var/lib/docker</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker默认资源路径</span></span><br><span class="line">/var/lib/docker</span><br></pre></td></tr></table></figure>

<h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><ul>
<li>docker是一个client-server结构的系统，docker的守护进程运行在主机上，通过socke从客户端访问！ </li>
<li>docker-server接收并执行docker-client指令</li>
</ul>
<h4 id="Docker为什么比VM快？"><a href="#Docker为什么比VM快？" class="headerlink" title="Docker为什么比VM快？"></a>Docker为什么比VM快？</h4><ol>
<li>Docker的抽象层比VM更少</li>
<li>Docker利用的是宿主机的内核，VM利用的是Guest OS</li>
</ol>
<p><strong>小结</strong>:VM启动时需要重新加载操作系统内核，启动引导程序；Docker则直接利用宿主机的内核，大大节省了耗时。</p>
]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>01-Docker概述</title>
    <url>/2020/11/08/Docker%E5%AD%A6%E4%B9%A0/01-Docker%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h3 id="Docker与传统虚拟机对比"><a href="#Docker与传统虚拟机对比" class="headerlink" title="Docker与传统虚拟机对比"></a>Docker与传统虚拟机对比</h3><h4 id="虚拟机技术缺点"><a href="#虚拟机技术缺点" class="headerlink" title="虚拟机技术缺点"></a>虚拟机技术缺点</h4><ol>
<li>资源占用过多</li>
<li>冗余步骤多</li>
<li>启动缓慢</li>
</ol>
<h4 id="容器化技术"><a href="#容器化技术" class="headerlink" title="容器化技术"></a>容器化技术</h4><p><font color="red">容器化技术不模拟整个操作系统</font></p>
<h4 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h4><ul>
<li>传统虚拟机，虚拟出硬件，运行完整操作系统，然后在操作系统的基础上运行软件</li>
<li>容器内的应用直接运行在宿主机的内核，容器没有单独的内核，不虚拟硬件，特点为轻便</li>
<li>每个容器互相隔离，每个容器内都有一个单独的文件系统，互不影响</li>
</ul>
<h3 id="DevOps（开发、运维）"><a href="#DevOps（开发、运维）" class="headerlink" title="DevOps（开发、运维）"></a>DevOps（开发、运维）</h3><ul>
<li><strong>应用更快速地交付与部署</strong>（打包镜像一键发布测试）</li>
<li><strong>更便捷地升级与扩缩容</strong>（打包镜像，方便水平扩展）</li>
<li><strong>更简单的系统运维</strong>（开发/测试/生产 环境高度一致）</li>
<li><strong>更高效的服务器资源利用</strong>（Docker是内核级别的虚拟化，可以在一个物理机上运行很多的实例）</li>
</ul>
<h3 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h3><ol>
<li>该技术出现的契机</li>
<li>该技术发展的历史</li>
<li>该技术能实现的功能</li>
</ol>
]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>借助 Wireshark 理解 TCP 的三次握手和四次挥手</title>
    <url>/2019/09/30/%E7%A0%81%E5%86%9C%E7%AC%94%E8%AE%B0/%E5%80%9F%E5%8A%A9-Wireshark-%E7%90%86%E8%A7%A3-TCP-%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
    <content><![CDATA[<h3 id="预先准备"><a href="#预先准备" class="headerlink" title="预先准备"></a>预先准备</h3><h4 id="抓包工具-Wireshark"><a href="#抓包工具-Wireshark" class="headerlink" title="抓包工具 Wireshark"></a>抓包工具 Wireshark</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wireshark -v</span></span><br><span class="line">Wireshark 2.6.10 (Git v2.6.10 packaged as 2.6.10-1~ubuntu18.04.0)</span><br></pre></td></tr></table></figure>

<p>如果未安装，可按照下方步骤安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo add-apt-repository ppa:wireshark-dev/stable </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt -y install wireshark</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo usermod -a -G wireshark <span class="variable">$USER</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chgrp wireshark /usr/bin/dumpcap</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod 750 /usr/bin/dumpcap</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo <span class="built_in">setcap</span> cap_net_raw,cap_net_admin=eip /usr/bin/dumpcap</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装完毕后一定要 <span class="built_in">log</span> out， 当然也可以选择 reboot，否则可能会报如下错误：</span></span><br><span class="line">Couldn’t run /usr/bin/dumpcap in child process: Permission denied</span><br></pre></td></tr></table></figure>

<h4 id="项目管理工具-Gradle"><a href="#项目管理工具-Gradle" class="headerlink" title="项目管理工具 Gradle"></a>项目管理工具 Gradle</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gradle -v</span></span><br><span class="line">Gradle 5.6.2</span><br></pre></td></tr></table></figure>

<p>如果未安装，可按照下方步骤安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 sdkman</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -s <span class="string">"https://get.sdkman.io"</span> | bash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> <span class="string">"<span class="variable">$HOME</span>/.sdkman/bin/sdkman-init.sh"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用 sdkman 安装 Gradle</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sdk install gradle 5.6.2</span></span><br></pre></td></tr></table></figure>

<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><blockquote>
<p>本文的所有代码已上传至 <a href="https://github.com/fcbhank/wireshark-tcp" target="_blank" rel="noopener">GitHub</a>，其中将握手和挥手分开测试是为了防止客户端在发送过程中，服务端就提前关闭了，导致挥手的部分包可能丢掉。</p>
</blockquote>
<h4 id="三次握手-服务端"><a href="#三次握手-服务端" class="headerlink" title="三次握手-服务端"></a>三次握手-服务端</h4><p>建立 socket 服务器，并在 8000 端口（<em>可先用<code>sudo netstat -ntlp | grep 8000</code> 查看端口是否已被占用</em>）监听，核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServerSocket socket = <span class="keyword">new</span> ServerSocket(<span class="number">8000</span>);</span><br><span class="line">socket.accept();</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure>

<h4 id="三次握手-客户端"><a href="#三次握手-客户端" class="headerlink" title="三次握手-客户端"></a>三次握手-客户端</h4><p>连接上方服务器，并发送数据，核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8000</span>);</span><br><span class="line">OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">outputStream.write(<span class="string">"Hello"</span>.getBytes());</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure>

<h4 id="四次挥手-服务端"><a href="#四次挥手-服务端" class="headerlink" title="四次挥手-服务端"></a>四次挥手-服务端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8000</span>);</span><br><span class="line">Socket socket = serverSocket.accept();</span><br><span class="line">socket.close();</span><br><span class="line">serverSocket.close();</span><br></pre></td></tr></table></figure>

<h4 id="四次挥手-客户端"><a href="#四次挥手-客户端" class="headerlink" title="四次挥手-客户端"></a>四次挥手-客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8000</span>);</span><br><span class="line">socket.close();</span><br><span class="line">TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);</span><br></pre></td></tr></table></figure>

<h3 id="wireshark-抓包分析"><a href="#wireshark-抓包分析" class="headerlink" title="wireshark 抓包分析"></a>wireshark 抓包分析</h3><h4 id="捕获过滤器"><a href="#捕获过滤器" class="headerlink" title="捕获过滤器"></a>捕获过滤器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">host 127.0.0.1 and port 8000</span><br></pre></td></tr></table></figure>

<h4 id="字段意义"><a href="#字段意义" class="headerlink" title="字段意义"></a>字段意义</h4><p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/TCP-IP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.jpeg" alt="IP报文"></p>
<table>
<thead>
<tr>
<th>标志位</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>URG</td>
<td>表示某一位需要被<strong>优先</strong>处理</td>
</tr>
<tr>
<td>ACK</td>
<td>表示<strong>确认</strong>对方的请求</td>
</tr>
<tr>
<td>PSH</td>
<td>表示有<strong>数据</strong>传输</td>
</tr>
<tr>
<td>RST</td>
<td>表示请求<strong>重置</strong>连接</td>
</tr>
<tr>
<td>SYN</td>
<td>表示请求<strong>建立</strong>连接</td>
</tr>
<tr>
<td>FIN</td>
<td>表示请求<strong>断开</strong>连接</td>
</tr>
<tr>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>seq</td>
<td><strong>序列号</strong>，用来标记数据段的顺序</td>
</tr>
<tr>
<td>ack</td>
<td><strong>确认号</strong>，期待收到对方下一个报文段的第一个数据字节的序号</td>
</tr>
</tbody></table>
<h4 id="TCP-三次握手分析"><a href="#TCP-三次握手分析" class="headerlink" title="TCP 三次握手分析"></a>TCP 三次握手分析</h4><p><strong>抓到的包：</strong><br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/TCP3Shake.png" alt="TWSClient-TWSServer"></p>
<p><strong>对应过程：</strong><br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B.png" alt="三次握手过程"></p>
<blockquote>
<p><strong>文字描述：</strong><br>客户端发送 SYN 报文（请求与服务器连接），并置发送序号为 x<br>服务端发送 SYN + ACK 报文，并置发送序号为 y，确认序号为 x+1<br>客户端发送 ACK 报文，并置发送序号为 x+1，确认序号为 y+1</p>
</blockquote>
<h4 id="TCP-四次挥手分析"><a href="#TCP-四次挥手分析" class="headerlink" title="TCP 四次挥手分析"></a>TCP 四次挥手分析</h4><p><strong>抓到的包：</strong><br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/TCP4Wave.png" alt="FWWClient-FWWServer"></p>
<p><strong>对应过程：</strong><br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B.png" alt="四次挥手过程"></p>
<blockquote>
<p><strong>文字描述：</strong><br>客户端发送 FIN 报文（请求断开连接），并置发送序号为u<br>服务端发送 ACK 报文，并置发送序号为 v，确认序号为 u+1<br>服务端发送 FIN + ACK 报文，并置发送序号为 w，确认序号为 u+1<br>客户端发送 ACK 报文，并置发送序号为 u+1，确认序号为 w+1 </p>
</blockquote>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul>
<li><p>为什么连接的时候是三次握手，关闭的时候却是四次挥手？</p>
<blockquote>
<p>因为当服务端收到客户端的 SYN 连接请求报文后，可以直接发送 SYN+ACK 报文。其中 ACK 报文是用来应答的，SYN 报文是用来同步的。但是关闭连接时，当服务端收到 FIN 报文时，可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉客户端已收到 FIN 报文。但只有等到服务端所有的报文都发送完了，我才能发送 FIN 报文，因此不能像连接时一样直接马上发送 FIN + ACK，所以需要四步挥手。</p>
</blockquote>
</li>
<li><p>为什么不能用两次握手进行连接？</p>
<blockquote>
<p>三次握手完成两个重要的功能：<br>①双方做好发送数据的准备工作；<br>②允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。</p>
</blockquote>
</li>
</ul>
<p><strong>如果改为两次握手，则可能发生死锁。</strong><br>举个例子，假定客户端给服务端发送一个<strong>连接请求</strong>分组，服务端收到了这个分组，并发送了<strong>确认应答</strong>分组。按照两次握手的协定，服务端认为连接已经成功地建立了，可以开始发送数据分组。可是，客户端在服务端的<strong>应答分组</strong>在传输中被<strong>丢失</strong>的情况下，将<strong>不知道服务端是否已准备好</strong>，不知道服务端建立什么样的序列号，客户端甚至怀疑服务端是否收到自己的连接请求分组。在这种情况下，客户端认为连接还未建立成功，将忽略服务端发来的任何数据分组，<strong>只等待连接确认应答分组</strong>。而服务端在发出的分组超时后，<strong>重复发送</strong>同样的分组。这样就形成了<strong>死锁</strong>。</p>
<hr>
<p>参考文章：<br>[1] <a href="https://juejin.im/post/5cdbdd3bf265da03b57b7cf1" target="_blank" rel="noopener">使用wireshark抓包读懂tcp三次握手，四次挥手</a><br>[2] <a href="https://blog.csdn.net/qq_38950316/article/details/81087809" target="_blank" rel="noopener">TCP的三次握手与四次挥手理解及面试题（很全面）</a><br>[3] <a href="http://www.xumenger.com/wireshark-tcp-20160716/" target="_blank" rel="noopener">使用WireShark分析TCP的三次握手过程</a></p>
]]></content>
      <categories>
        <category>码农笔记</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
        <tag>TCP</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18 解决问题记录</title>
    <url>/2019/09/15/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/Ubuntu18-%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="安装-python-3-7-并设置为默认-python-版本"><a href="#安装-python-3-7-并设置为默认-python-版本" class="headerlink" title="安装 python 3.7 并设置为默认 python 版本"></a>安装 python 3.7 并设置为默认 python 版本</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol>
<li><p>更新 <code>apt</code> 包列表，安装 <code>software-properties-common</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install software-properties-common</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 <code>PPA</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line">提示输入 回车继续</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 <code>python 3.6</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install python3.6</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3.6 --version</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="配置为默认-Python-版本"><a href="#配置为默认-Python-版本" class="headerlink" title="配置为默认 Python 版本"></a>配置为默认 Python 版本</h4><ol>
<li><p>更新 <code>update-alternatives</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置默认使用版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config python</span><br><span class="line">此时将会出现下图</span><br><span class="line"></span><br><span class="line">  Selection    Path                Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">* 0            /usr/bin/python3.6   2         auto mode</span><br><span class="line">  1            /usr/bin/python2.7   1         manual mode</span><br><span class="line">  2            /usr/bin/python3.6   2         manual mode</span><br><span class="line"></span><br><span class="line">Press &lt;enter&gt; to keep the current choice[*], or type selection number:</span><br><span class="line">输入 2 即表示使用 python 3.7</span><br><span class="line"></span><br><span class="line">或者也可以通过下面方式设置 python 3.7</span><br><span class="line">sudo update-alternatives  --set python /usr/bin/python3.6</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python --version</span><br><span class="line"></span><br><span class="line">将显示：</span><br><span class="line">Python 3.7.4</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="误删-python-3-6-至启动只有命令行"><a href="#误删-python-3-6-至启动只有命令行" class="headerlink" title="误删 python 3.6 至启动只有命令行"></a>误删 python 3.6 至启动只有命令行</h3><ol>
<li><p>首先在命令行登录成功，然后在命令行连接上网络，这里显示连接 wifi 方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ① 确定 wifi 接口名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nmcli d</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ② 确定 wifi 功能打开</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nmcli r wifi on</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ③ 显示可以连接的 wifi</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nmcli d wifi list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ④ 使用密码连接</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> $ nmcli d wifi connect my_wifi password &lt;password&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>确定网络连接成功后，安装 ubuntu-desktop</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ubuntu-desktop</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="批量修改当前目录下的文件后缀名"><a href="#批量修改当前目录下的文件后缀名" class="headerlink" title="批量修改当前目录下的文件后缀名"></a>批量修改当前目录下的文件后缀名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将后缀名为 txt 文件全部改为 md</span></span><br><span class="line">for f in *.txt; do mv $f `basename $f .txt`.md; done;</span><br></pre></td></tr></table></figure>

<h3 id="动态查看-log"><a href="#动态查看-log" class="headerlink" title="动态查看 log"></a>动态查看 log</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f test.log</span><br></pre></td></tr></table></figure>

<h3 id="CentOS-7-服务器上运行-selenium"><a href="#CentOS-7-服务器上运行-selenium" class="headerlink" title="CentOS 7 服务器上运行 selenium"></a>CentOS 7 服务器上运行 selenium</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 需要在相应位置添加 --headless --no-sandbox 两个参数</span></span><br><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        options.add_argument('--headless')</span><br><span class="line">        options.add_argument('--no-sandbox')</span><br><span class="line">        # options.add_argument('--disable-extensions')</span><br><span class="line">        # options.add_argument('--disable-gpu')</span><br><span class="line"></span><br><span class="line">        cookies = []</span><br><span class="line">        driver = webdriver.Chrome(CHROME_PATH, options=options)</span><br></pre></td></tr></table></figure>

<h3 id="后台运行-nohup"><a href="#后台运行-nohup" class="headerlink" title="后台运行 nohup"></a>后台运行 nohup</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup bash test.sh &gt;&gt; ~/logs/test.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>Ubuntu18</tag>
      </tags>
  </entry>
  <entry>
    <title>Do it by myself, not just have a look.</title>
    <url>/2019/09/04/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/Do-it-by-myself-not-just-have-a-look/</url>
    <content><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul>
<li><code>lsb_release -d | awk -F &#39;:&#39; &#39;{print $2}&#39;</code>： <strong>Ubuntu 18.04.3 LTS</strong></li>
<li><code>lscpu | grep &quot;Model name&quot;| awk -F &#39;:&#39; &#39;{print $2}&#39;</code>： <strong>Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz</strong></li>
<li><code>cat meminfo | grep &quot;MemTotal&quot;| awk -F &#39;:&#39; {&#39;print $2&#39;} | awk {&#39;print $1/1024/1024&quot;G&quot;&#39;}</code>: 7.68777G =&gt; <strong>8GB</strong></li>
<li><code>sudo dmidecode -t memory | grep DDR | awk -F &#39;:&#39;   &#39;NR==1 {print $2}&#39;</code>： <strong>DDR3</strong></li>
<li><strong>20GB</strong> <strong>HDD</strong></li>
</ul>
<h2 id="订阅号文章"><a href="#订阅号文章" class="headerlink" title="订阅号文章"></a>订阅号文章</h2><h3 id="什么？Redis-的-QPS-是-MySQL-的-100-倍？"><a href="#什么？Redis-的-QPS-是-MySQL-的-100-倍？" class="headerlink" title="什么？Redis 的 QPS 是 MySQL 的 100 倍？"></a><a href="https://mp.weixin.qq.com/s?__biz=MzIyNzc1ODQ0MQ==&mid=2247484527&idx=1&sn=51fdb53443ca156225cb3589bc6e7df6&chksm=e85d1c69df2a957f6a734a152d43d4a8a487fb293e2a9ca0a9c6cc7364c0c6c8170fa898e789&mpshare=1&scene=1&srcid=&sharer_sharetime=1567601497239&sharer_shareid=01717087cb0d1e0fea4aaeb495af4bae#rd" target="_blank" rel="noopener">什么？Redis 的 QPS 是 MySQL 的 100 倍？</a></h3><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><ol>
<li><p>运行 Redis 自带的基准测试工具，运行 set，get 1000000 次，1s 后退出并显示数据</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不使用 pipeline</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> redis-benchmark -n 1000000 -t <span class="built_in">set</span>,get -q</span></span><br><span class="line"></span><br><span class="line">------输出结果------</span><br><span class="line">SET: 76022.50 requests per second</span><br><span class="line">GET: 69905.62 requests per second</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行 set，get 1000000 次，每次发送 200 个请求到服务端，1s 后退出并显示数据</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用 pipeline</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> redis-benchmark -n 1000000 -t <span class="built_in">set</span>,get -P 200 -q</span></span><br><span class="line"></span><br><span class="line">------输出结果------</span><br><span class="line">SET: 987166.81 requests per second</span><br><span class="line">GET: 1182033.12 requests per second</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结：<strong>Redis</strong> 在本机上的 QPS 大概为 70000～1000000</p>
</li>
</ol>
<h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><ol start="0">
<li><p>前提：安装 sysbench</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -s https://packagecloud.io/install/repositories/akopytov/sysbench/script.deb.sh | sudo bash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt -y install sysbench</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个名为 benchmark 的 database，然后运行如下命令，准备数据-&gt;测试数据</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench /usr/share/sysbench/oltp_read_write.lua --mysql-user=root --mysql-password=root --mysql-db=benchmark --tables=10 --table-size=1000000 --events=100000000 --report-interval=10 --threads=4 --time=300 prepare</span><br><span class="line"></span><br><span class="line">sysbench /usr/share/sysbench/oltp_read_write.lua --mysql-user=root --mysql-password=root --mysql-db=benchmark --tables=10 --table-size=1000000 --events=100000000 --report-interval=10 --threads=4 --time=300 run</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果如下</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ 10s ] thds: 4 tps: 4.00 qps: 85.46 (r/w/o: 60.57/16.49/8.40) lat (ms,95%): 1708.63 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 20s ] thds: 4 tps: 4.50 qps: 91.01 (r/w/o: 63.81/18.20/9.00) lat (ms,95%): 1678.14 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 30s ] thds: 4 tps: 3.80 qps: 74.49 (r/w/o: 52.30/14.60/7.60) lat (ms,95%): 1938.16 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 40s ] thds: 4 tps: 4.90 qps: 98.32 (r/w/o: 68.32/20.20/9.80) lat (ms,95%): 1903.57 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 50s ] thds: 4 tps: 5.10 qps: 102.69 (r/w/o: 72.79/19.70/10.20) lat (ms,95%): 1618.78 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 60s ] thds: 4 tps: 3.90 qps: 76.09 (r/w/o: 52.59/15.70/7.80) lat (ms,95%): 2120.76 err/s: 0.00 reconn/s: 0.00</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结：由于是机械硬盘，<strong>MySQL</strong> 的 QPS 仅为 80~100</p>
</li>
</ol>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>由于一个是在内存进行工作，一个是在机械硬盘上进行工作，所以在实验环境下相差的更大。但 Mysql 的 InnoDB 有十分健全的事务系统，所以各有所长，互相搭配可以工作地更好。</p>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>订阅号</tag>
      </tags>
  </entry>
  <entry>
    <title>部署 health 和 community 两个项目到远端主机</title>
    <url>/2019/09/04/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E9%83%A8%E7%BD%B2-health-%E5%92%8C-community-%E4%B8%A4%E4%B8%AA%E9%A1%B9%E7%9B%AE%E5%88%B0%E8%BF%9C%E7%AB%AF%E4%B8%BB%E6%9C%BA/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Sorry! This is private, you can access others." />
    <label for="pass">Sorry! This is private, you can access others.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Linux</tag>
        <tag>SpringBoot</tag>
        <tag>Mybatis</tag>
        <tag>react</tag>
        <tag>AntD</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 目录树结构简介</title>
    <url>/2019/09/03/%E7%A0%81%E5%86%9C%E7%AC%94%E8%AE%B0/Ubuntu-%E7%9B%AE%E5%BD%95%E6%A0%91%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>参考文章：<a href="https://help.ubuntu.com/community/LinuxFilesystemTreeOverview" target="_blank" rel="noopener">LinuxFilesystemTreeOverview</a></p>
<h3 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h3><p><strong>/bin</strong> 用途：经常用到的终端命令，比如 <code>ls</code>、<code>mount</code>、<code>rm</code>等</p>
<p><strong>/boot</strong> 用途：系统启动文件，包括 Linux 内核，内存磁盘镜像和引导加载配置文件</p>
<p><strong>/dev</strong> 用途：所有的设备文件，这些不是普通文件，它们指代系统上大量的硬件和硬盘驱动器</p>
<p><strong>/etc</strong> 用途：系统全局配置文件，它影响着所有用户的系统行为</p>
<p><strong>/home</strong> 用途：所有的用户文件，是用户的家目录</p>
<p><strong>/lib</strong> 用途：非常重要的动态包和内核模块</p>
<p><strong>/media</strong> 用途：作为外接设备的挂载点，比如硬盘驱动器或可移动载体（软盘、CD、DVD）</p>
<p><strong>/mnt</strong> 用途：也是作为挂载点，但它主要用作临时挂载，比如网络文件系统</p>
<p><strong>/opt</strong> 用途：用来存储系统上增加的软件，它不归包管理器负责</p>
<p><strong>/proc</strong> 用途：一种虚拟文件系统，它提供了一种可以用内核给进程发送消息的机制</p>
<p><strong>/root</strong> 用途：超级管理员的家目录，不在 <code>/home</code> 目录下，它允许在 <code>home</code> 目录不可用的情况下依然可以启动系统</p>
<p><strong>/run</strong> 用途：是开机过程中产生的临时文件系统，它用来存储临时运行时数据，开机一直存在，重启后消失。<br>（系统上的很多位置都指向它，比如 /var/run、/var/lock/、/lib/init/rw、/dev/.*、/dev/shm）</p>
<p><strong>/sbin</strong> 用途：存放重要的管理命令，而且一般只能被超级管理员使用</p>
<p><strong>/srv</strong> 用途：存放 HTTP(/srv/www/) 或 FTP 等服务的数据目录</p>
<p><strong>/sys</strong> 用途：一个可以用来设置或获取关于系统内核信息的虚拟文件系统</p>
<p><strong>/tmp</strong> 用途：存放应用的临时文件</p>
<p><strong>/usr</strong> 用途：包含大量用户工具和应用，以及部分 <code>root</code> 目录的备份文件，也包含实例，以及其他的 <code>/usr/bin/</code> 和 <code>/usr/lib</code></p>
<p><strong>/var</strong> 用途：存放大量的数据，比如日志、数据库、网站和假脱机文件（比如：e-mail）；其中一个值得注意的目录是 <code>/var/log</code> 目录，这是系统日志保存的地方</p>
<h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><ul>
<li><strong>/usr/share/applications</strong><br>该目录下面存放着大量软件安装后生成的 <code>.desktop</code> 文件，即 <code>Ubuntu</code> 桌面上的快捷方式（可将此处的 <code>desktop</code> 文件复制【<strong>不要剪切</strong>】到 <code>~/Desktop</code> 下，改变权限后即生成了桌面快捷方式）。</li>
</ul>
<p><strong>提示</strong>：如果软件打开后，想要将其锁定到任务栏，首先得保证 <code>/usr/share/applications</code> 目录下有该软件的<font color="red"> .desktop 文件！！！</font>，对应上面的<strong>复制</strong>而不是<strong>剪切</strong>。<br><br></p>
]]></content>
      <categories>
        <category>码农笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu18.04</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 使用记录</title>
    <url>/2019/09/03/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/Vim-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><h4 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h4><p><strong>将当前行的 <code>foo</code> 替换为 <code>bar</code></strong><br>命令模式下输入 <code>:s/foo/bar/g</code></p>
<h4 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h4><p><strong>将选中区域的 <code>foo</code> 替换为 <code>bar</code></strong><br>命令模式下按 <code>v</code> 进入 <code>VISUAL</code> 模式选择区域，然后再在输入 <code>:</code> ，此时Vim 可自动补全为 <code>:&#39;&lt;,&#39;&gt;</code>。接着补充完整命令: <code>&#39;&lt;,&#39;&gt;s/foo/bar/g</code></p>
<h4 id="场景3"><a href="#场景3" class="headerlink" title="场景3"></a>场景3</h4><p><strong>将所有的出现的 <code>foo</code> 替换为 <code>bar</code></strong><br>命令模式下输入 <code>:%s/foo/bar/g</code></p>
<h4 id="场景4"><a href="#场景4" class="headerlink" title="场景4"></a>场景4</h4><p><strong>注释n1到n2行</strong><br>命令模式下输入 <code>:n1,n2s/^/#/</code></p>
<p><strong>取消n1到n2行的注释</strong><br>命令模式下输入 <code>:n1,n2s/^#//</code></p>
]]></content>
  </entry>
  <entry>
    <title>常用工具快捷键及插件合集</title>
    <url>/2019/09/02/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E6%8F%92%E4%BB%B6%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><h4 id="快捷键-IDEA-vs-VSCode"><a href="#快捷键-IDEA-vs-VSCode" class="headerlink" title="快捷键 IDEA vs VSCode"></a>快捷键 IDEA vs VSCode</h4><table>
    <caption>IDEA 和 VSCode 快捷键对比表</caption>
    <tr>
        <th>Command</th>
        <th>功能</th>
        <th>IDEA</th>
        <th>VSCode</th>
    </tr>
    <tr>
        <td>Project view</td>
        <td>打开左侧栏，查看目录结构</td>
        <td>Alt + 1(数字1)</td>
        <td>Ctrl + B</td>
    </tr>
    <tr>
        <td>Show intention actions and quick-fixes</td>
        <td>显示修复提示并快速修复</td>
        <td>Alt + Enter</td>
        <td>--</td>
    </tr>
    <tr>
        <td>Find usages/Find usages in file</td>
        <td>找到/在文件中找到被使用处</td>
        <td>Alt + F7 / Ctrl + F7</td>
        <td>--</td>
    </tr>
    <tr>
        <td>Open terminal panel</td>
        <td>打开终端命令面板</td>
        <td>Alt + F12</td>
        <td>Ctrl + J</td>
    </tr>
    <tr>
        <td>Generate code... (Getters, Setters, Constructors, hashCode/equals, toString)</td>
        <td>生成代码（比如：Getter、Setter、Constructors、hashCode/equals、toString等方法）</td>
        <td>Alt + Insert</td>
        <td>--</td>
    </tr>
    <tr>
        <td>Editing multi-line at same time</td>
        <td>在多个地方同时编辑</td>
        <td>Alt + Shift + Left Click</td>
        <td>Alt + Left Click</td>
    </tr>
    <tr>
        <td>Go to implementation(s)</td>
        <td>打开方法实现处</td>
        <td>Ctrl + Alt + B 或 Ctrl + Left Click</td>
        <td>--</td>
    </tr>
    <tr>
        <td>Go back</td>
        <td>上一次编辑处</td>
        <td>Ctrl + Shift + Backspace </td>
        <td>上一次编辑：Ctrl + Alt + -(减号)；下一次编辑：Ctrl + Shift + -(减号)</td>
    </tr>
    <tr>
        <td>Reformat code</td>
        <td>格式化代码</td>
        <td>Ctrl + Shift + I(字母I)</td>
        <td>Ctrl + Alt + L</td>
    </tr>
    <tr>
        <td>Optimize imports</td>
        <td>整理导入的包</td>
        <td>Ctrl + Alt + O</td>
        <td>--</td>
    </tr>
    <tr>
        <td>Extract Variable</td>
        <td>抽取变量</td>
        <td>Ctrl + Alt + V</td>
        <td>--</td>
    </tr>
    <tr>
        <td>Copy current line or selected block to clipboard</td>
        <td>复制一行或选中区域</td>
        <td>Ctrl + C</td>
        <td>Ctrl + C</td>
    </tr>
    <tr>
        <td>Duplicate current line or selected block</td>
        <td>往下复制一行或选中区域</td>
        <td>Ctrl + D</td>
        <td>Ctrl + Shift + Alt + Down</td>
    </tr>
    <tr>
        <td>Recent Files</td>
        <td>显示最近打开文件</td>
        <td>Ctrl + E</td>
        <td>Ctrl + E</td>
    </tr>
    <tr>
        <td>Close window</td>
        <td>关闭当前页面</td>
        <td>Ctrl + F4</td>
        <td>Ctrl + W</td>
    </tr>
    <tr>
        <td>Change Signature</td>
        <td>快速修改方法</td>
        <td>Ctrl + F6</td>
        <td>--</td>
    </tr>
    <tr>
        <td>File structure popup</td>
        <td>显示当前类的结构</td>
        <td>Ctrl + F12</td>
        <td>--</td>
    </tr>
    <tr>
        <td>Go to class</td>
        <td>打开指定名称的类</td>
        <td>Ctrl + N</td>
        <td>--</td>
    </tr>
    <tr>
        <td>Parameter info (within method call arguments)</td>
        <td>显示调用方法的参数信息</td>
        <td>Ctrl + P</td>
        <td>--</td>
    </tr>
    <tr>
        <td>Select successively increasing code blocks</td>
        <td>正确扩大选择范围</td>
        <td>Ctrl + W</td>
        <td>--</td>
    </tr>
    <tr>
        <td>Cut current line or selected block to clipboard</td>
        <td>剪切一行或选中区域</td>
        <td>Ctrl + X</td>
        <td></td>
    </tr>
    <tr>
        <td>Delete line at caret</td>
        <td>删除光标所在行</td>
        <td>Ctrl + Y</td>
        <td>Ctrl + Shift + K</td>
    </tr>
    <tr>
        <td>Go to file</td>
        <td>打开指定名字的文件</td>
        <td>Ctrl + Shift + N</td>
        <td>--</td>
    </tr>
    <tr>
        <td>Toggle maximizing editor</td>
        <td>切换最大化编辑窗口</td>
        <td>Ctrl + Shift + F12</td>
        <td>--</td>
    </tr>
    <tr>
        <td>Toggle case for word at caret or selected block</td>
        <td>切换单词为大/小写</td>
        <td>Ctrl + Shift + U</td>
        <td>Ctrl + Alt + U（切换为大写，自定义快捷键）；
            Ctrl + Alt + L（切换为小写，自定义快捷键）；
            Ctrl + Alt + Shift + T（切换为首字母大写，自定义快捷键）
        </td>
    </tr>
    <tr>
        <td>Move line up/Dwon at caret</td>
        <td>将光标所在行向上/下移动</td>
        <td>
        当前行为一个区域的开始/结束，则移动整个区域：Ctrl + Shift + Up/Down
        仅移动当前行：Alt + Shift + Up/Down
        </td>
        <td>Alt + Up/Down</td>
    </tr>
    <tr>
        <td>Comment/uncomment with block comment</td>
        <td>块注释/取消块注释</td>
        <td>Ctrl + Shift + /</td>
        <td>Ctrl + Shift + A</td>
    </tr>
    <tr>
        <td>Comment/uncomment with line comment</td>
        <td>行注释/取消行注释</td>
        <td>Ctrl + /</td>
        <td>Ctrl + /</td>
    </tr>
    <tr>
        <td>Search everywhere</td>
        <td>全局搜索</td>
        <td>Double shift</td>
        <td>Ctrl + Shift + F</td>
    </tr>
    <tr>
        <td>Redo</td>
        <td>恢复上一步</td>
        <td>Ctrl + Shift + Z</td>
        <td>Ctrl + Shift + Z</td>
    </tr>
    <tr>
        <td>Start new line</td>
        <td>开始新的一行</td>
        <td>Shift + Enter</td>
        <td>--</td>
    </tr>
    <tr>
        <td>Rename</td>
        <td>重命名</td>
        <td>Shift + F6</td>
        <td>F2</td>
    </tr>
</table>

<h4 id="IDEA-插件"><a href="#IDEA-插件" class="headerlink" title="IDEA 插件"></a>IDEA 插件</h4><ol>
<li><strong>.ignore</strong><br>.ignore is a plugin for .gitignore (Git), .hgignore (Mercurial), .npmignore (NPM), .dockerignore (Docker), .chefignore (Chef), .cvsignore (CVS), .bzrignore (Bazaar), .boringignore (Darcs), .mtn-ignore (Monotone), ignore-glob (Fossil), .jshintignore (JSHint), .tfignore (Team Foundation), .p4ignore (Perforce), .prettierignore (Prettier), .flooignore (Floobits), .eslintignore (ESLint), .cfignore (Cloud Foundry), .jpmignore (Jetpack), .stylelintignore (StyleLint), .stylintignore (Stylint), .swagger-codegen-ignore (Swagger Codegen), .helmignore (Kubernetes Helm), .upignore (Up), .prettierignore (Prettier), .ebignore (ElasticBeanstalk), .gcloudignore (Google Cloud) files in your project. </li>
</ol>
<ol start="2">
<li><strong>Lombok</strong><br>A plugin that adds first-class support for Project Lombok</li>
</ol>
<h4 id="VSCode-插件"><a href="#VSCode-插件" class="headerlink" title="VSCode 插件"></a>VSCode 插件</h4><ol>
<li><p><strong>GitLens — Git supercharged</strong><br>GitLens supercharges the Git capabilities built into Visual Studio Code. It helps you to visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more.</p>
</li>
<li><p><strong>Markdown Preview Enhanced</strong><br>Markdown Preview Enhanced is an extension that provides you with many useful functionalities such as automatic scroll sync, math typesetting, mermaid, PlantUML, pandoc, PDF export, code chunk, presentation writer, etc. A lot of its ideas are inspired by Markdown Preview Plus and RStudio Markdown.</p>
</li>
<li><p><strong>Swig(.tpl)</strong><br>Simple syntax coloring and nice code snippets of Swig. Now support .tpl extension name.</p>
</li>
<li><p><strong>Todo Tree</strong><br>This extension quickly searches (using ripgrep) your workspace for comment tags like TODO and FIXME, and displays them in a tree view in the explorer pane. Clicking a TODO within the tree will open the file and put the cursor on the line containing the TODO.</p>
</li>
<li><p><strong>vscode-icons</strong></p>
</li>
<li><p><strong>gitignore</strong><br>A extension for Visual Studio Code that assists you in working with .gitignore files.</p>
</li>
<li><p><strong>翻译(translate to chinese)</strong><br>翻译插件，使用百度翻译API把其他语言翻译成中文，快捷键是 <code>ctrl+shift+t</code> 或 <code>cmd+shift+t</code></p>
</li>
<li><p><strong>Vim</strong><br>VSCodeVim is a Vim emulator for Visual Studio Code.</p>
</li>
<li><p><strong>IntelliJ IDEA Keybindings</strong><br>Port of IntelliJ IDEA Keybindings, including for WebStorm, PyCharm, PHP Storm, etc.<br>在vscode中使用idea相同快捷键的插件</p>
</li>
</ol>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><h4 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Alt+Home</td>
<td>打开首页</td>
</tr>
<tr>
<td>Alt+Left Arrow</td>
<td>回退页面</td>
</tr>
<tr>
<td>Alt+Right Arrow</td>
<td>前进页面</td>
</tr>
<tr>
<td>F11</td>
<td>全屏显示</td>
</tr>
<tr>
<td>Esc</td>
<td>停止加载页面</td>
</tr>
<tr>
<td>Ctrl+(- or +)</td>
<td>缩小 or 放大页面</td>
</tr>
<tr>
<td>Ctrl+1-8</td>
<td>切换到当前的第1~8个标签</td>
</tr>
<tr>
<td>Ctrl+9</td>
<td>切换到最后一个标签</td>
</tr>
<tr>
<td>Ctrl+0</td>
<td>重置页面显示100%</td>
</tr>
<tr>
<td>Ctrl+Enter</td>
<td>自动补全网址，比如输入 word，按下快捷键后将进入 word.com</td>
</tr>
<tr>
<td>Ctrl+Shift+Del</td>
<td>打开快速清理浏览器数据窗口</td>
</tr>
<tr>
<td>Ctrl+Shift+B</td>
<td>显示或隐藏收藏栏</td>
</tr>
<tr>
<td>Ctrl+A</td>
<td>全选页面内容</td>
</tr>
<tr>
<td>Ctrl+D</td>
<td>将当前页面添加到收藏夹</td>
</tr>
<tr>
<td>Ctrl+F</td>
<td>打开页面上的搜索框</td>
</tr>
<tr>
<td>Ctrl+O</td>
<td>在浏览器上打开文件</td>
</tr>
<tr>
<td>Ctrl+Shift+O</td>
<td>打开收藏栏管理器</td>
</tr>
<tr>
<td>Ctrl+H</td>
<td>在新标签栏打开历史记录</td>
</tr>
<tr>
<td>Ctrl+J</td>
<td>显示下载记录</td>
</tr>
<tr>
<td>Ctrl+K or Ctrl+E</td>
<td>在地址栏使用默认搜索引擎搜索</td>
</tr>
<tr>
<td>Ctrl+L</td>
<td>将光标切到地址栏</td>
</tr>
<tr>
<td>Ctrl+N</td>
<td>打开一个新的窗口</td>
</tr>
<tr>
<td>Ctrl+Shift+N</td>
<td>打开一个新的隐私窗口</td>
</tr>
<tr>
<td>Ctrl+P</td>
<td>打印当前页</td>
</tr>
<tr>
<td>Ctrl+R or F5</td>
<td>更新当前页</td>
</tr>
<tr>
<td>Ctrl+S</td>
<td>保存当前页</td>
</tr>
<tr>
<td>Ctrl+T</td>
<td>打开一个新的标签页</td>
</tr>
<tr>
<td>Ctrl+U</td>
<td>查看页面源代码</td>
</tr>
<tr>
<td>Ctrl+W</td>
<td>关闭当前标签页</td>
</tr>
<tr>
<td>Ctrl+Shift+W</td>
<td>关闭当前窗口</td>
</tr>
<tr>
<td>Ctrl+Shift+T</td>
<td>恢复上一个关闭的标签页，如需恢复多个，可重复按</td>
</tr>
<tr>
<td>Ctrl+Tab</td>
<td>循环切换到右边的标签页</td>
</tr>
<tr>
<td>Ctrl+Shift+Tab</td>
<td>循环切换到左边的标签页</td>
</tr>
<tr>
<td>Ctrl+Left-click</td>
<td>在新标签页打开链接内容，保持在原标签页</td>
</tr>
<tr>
<td>Ctrl+Shift Left-click</td>
<td>在新标签页打开链接内容，并切换到新标签页</td>
</tr>
<tr>
<td>Ctrl+Page Down</td>
<td>循环切换到右边的标签页</td>
</tr>
<tr>
<td>Ctrl+Page Up</td>
<td>循环切换到左边的标签页</td>
</tr>
<tr>
<td>Spacebar</td>
<td>向下移动页面</td>
</tr>
<tr>
<td>Shift+Spacebar</td>
<td>向上移动页面</td>
</tr>
<tr>
<td>Home</td>
<td>去页面首部</td>
</tr>
<tr>
<td>End</td>
<td>去页面底部</td>
</tr>
<tr>
<td>Alt+Down Arrow</td>
<td>在文本框或下拉中显示之前文本内容</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>IDEA</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常见缩写命令全称</title>
    <url>/2019/09/02/%E7%A0%81%E5%86%9C%E7%AC%94%E8%AE%B0/Linux-%E5%B8%B8%E8%A7%81%E7%BC%A9%E5%86%99%E5%91%BD%E4%BB%A4%E5%85%A8%E7%A7%B0/</url>
    <content><![CDATA[<p>引用文章：<a href="https://www.cnblogs.com/kevin-yuan/p/7209727.html" target="_blank" rel="noopener">Linux命令缩写的全称</a></p>
<table>
<thead>
<tr>
<th>缩写命令</th>
<th>命令全称</th>
</tr>
</thead>
<tbody><tr>
<td>【目录</td>
<td>文件】</td>
</tr>
<tr>
<td>ls</td>
<td>list(列出目录内容)</td>
</tr>
<tr>
<td>pwd</td>
<td>print work directory(打印当前目录，现示当前工作目录的绝对路径)</td>
</tr>
<tr>
<td>cd</td>
<td>change directory(改变目录)</td>
</tr>
<tr>
<td>rmdir</td>
<td>remove directory(删除目录)</td>
</tr>
<tr>
<td>mkdir</td>
<td>make directory(创建目录)</td>
</tr>
<tr>
<td>rm</td>
<td>remove(删除目录或文件)</td>
</tr>
<tr>
<td>mv</td>
<td>move file (移动文件)</td>
</tr>
<tr>
<td>cp</td>
<td>copy file(复制文件)</td>
</tr>
<tr>
<td>cat</td>
<td>concatenate(连锁)，cat file 1 file 2 &gt;&gt; file 3(把文件1和文件2的内容联合起来放进 文件3 中)</td>
</tr>
<tr>
<td><strong>–</strong></td>
<td><strong>–</strong></td>
</tr>
<tr>
<td><strong>【系统</strong></td>
<td><strong>权限】</strong></td>
</tr>
<tr>
<td>su</td>
<td>switch user(切换用户)</td>
</tr>
<tr>
<td>uname</td>
<td>unix name(用于打印当前系统相关信息)</td>
</tr>
<tr>
<td>chown</td>
<td>change owner(改变某和文件或目录所有者和所属的组)</td>
</tr>
<tr>
<td>chgrp</td>
<td>change group(用于改变文件或所属的用户组)</td>
</tr>
<tr>
<td>chmod</td>
<td>change mode(用于变更文件或目录的权限)</td>
</tr>
<tr>
<td><strong>–</strong></td>
<td><strong>–</strong></td>
</tr>
<tr>
<td><strong>【进程</strong></td>
<td><strong>磁盘】</strong></td>
</tr>
<tr>
<td>ps</td>
<td>process status(进程状态，类似于wins任务管理器)，常用参数: -auxf ps -auxf (进程现示状态)</td>
</tr>
<tr>
<td>df</td>
<td>disk free(显示磁盘可用空间数目信息及空间节点信息。换句话说，就是查看任何安装的设备或目录中还剩多少自由空间)</td>
</tr>
<tr>
<td>du</td>
<td>disk usage(查看已使用空间)</td>
</tr>
<tr>
<td><strong>–</strong></td>
<td><strong>–</strong></td>
</tr>
<tr>
<td><strong>【打包</strong></td>
<td><strong>管理】</strong></td>
</tr>
<tr>
<td>rpm</td>
<td>redhat package manger(红帽子打包管理器)</td>
</tr>
<tr>
<td>dpkg</td>
<td>debian package manager(debian 系列打包管理其)</td>
</tr>
<tr>
<td>apt</td>
<td>advanced package tool(debian 系列打包工具)</td>
</tr>
<tr>
<td><strong>–</strong></td>
<td><strong>–</strong></td>
</tr>
<tr>
<td><strong>【文件</strong></td>
<td><strong>后缀】</strong></td>
</tr>
<tr>
<td>文件结尾的rc</td>
<td>resource configratin(如 .xinitrc, .bashrc等)</td>
</tr>
<tr>
<td>knnxxx/snnxxx(位于rcx.d目录下)</td>
<td>k(kill),s(service);nn(执行顺序号);xxx(服务标识)</td>
</tr>
<tr>
<td>.a(扩展名a)</td>
<td>archive ,static library</td>
</tr>
<tr>
<td>.s(扩展名so)</td>
<td>shared object,dynamically linked library</td>
</tr>
<tr>
<td>.o(扩展名o)</td>
<td>olbject file, compiled result of c/c++ source file</td>
</tr>
<tr>
<td><strong>–</strong></td>
<td><strong>–</strong></td>
</tr>
<tr>
<td><strong>【其</strong></td>
<td><strong>他】</strong></td>
</tr>
<tr>
<td>insmod</td>
<td>install module(载入模块)</td>
</tr>
<tr>
<td>lsmod</td>
<td>list modules(用于显示已加载到内核模块的状态信息)</td>
</tr>
<tr>
<td>rmmod</td>
<td>remove module</td>
</tr>
<tr>
<td>in -s</td>
<td>link -soft(创建一个软链接，相当于创建一个快捷方式)</td>
</tr>
<tr>
<td>man</td>
<td>manual</td>
</tr>
<tr>
<td>mkfs</td>
<td>make file system (创建linux系统文件)</td>
</tr>
<tr>
<td>fsck</td>
<td>file system check(用于检查并试图修复文件系统中错误)</td>
</tr>
<tr>
<td>ln</td>
<td>link file(用于文件创建连接分为硬盘连接和符号连接)</td>
</tr>
<tr>
<td>fg</td>
<td>foreground(用于后台作业放到前台终端运行)</td>
</tr>
<tr>
<td>bg</td>
<td>background(用于将作业放到后台运行)</td>
</tr>
<tr>
<td>umount</td>
<td>unmount(用于卸载已经加载的系统文件)</td>
</tr>
<tr>
<td>tar</td>
<td>tape archive</td>
</tr>
<tr>
<td>ldd</td>
<td>list dynamic dependencies</td>
</tr>
<tr>
<td>【部分linux 目录</td>
<td>参数 缩写】</td>
</tr>
<tr>
<td>bin</td>
<td>binarines</td>
</tr>
<tr>
<td>/dev</td>
<td>devices</td>
</tr>
<tr>
<td>/dev</td>
<td>etcetera</td>
</tr>
<tr>
<td>/lib</td>
<td>library</td>
</tr>
<tr>
<td>/proc</td>
<td>processes</td>
</tr>
<tr>
<td>/sbin</td>
<td>superuser binaries</td>
</tr>
<tr>
<td>/tmp</td>
<td>temporary</td>
</tr>
<tr>
<td>/usr</td>
<td>unix shared resources</td>
</tr>
<tr>
<td>/var</td>
<td>variable</td>
</tr>
<tr>
<td>fifo</td>
<td>first in ,fitst out</td>
</tr>
<tr>
<td>grub</td>
<td>grand unified bootloader</td>
</tr>
<tr>
<td>ifs</td>
<td>internal field seperators</td>
</tr>
<tr>
<td>lilo</td>
<td>linux loader</td>
</tr>
<tr>
<td>mysql</td>
<td>my是最初作者的女儿的名字，sql=structured query language</td>
</tr>
<tr>
<td>php</td>
<td>personal home page tools=php hypertext preprocessor</td>
</tr>
<tr>
<td>perl</td>
<td>pratical extraction and report language=pathologically eclectic rubbish lister python得名于电视剧monty python’s flying circus</td>
</tr>
<tr>
<td>tcl</td>
<td>tool command language</td>
</tr>
<tr>
<td>tk</td>
<td>toolkit</td>
</tr>
<tr>
<td>vt</td>
<td>video terminal</td>
</tr>
<tr>
<td>yast</td>
<td>yet another</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>码农笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记| Elasticsearch 官方入门视频</title>
    <url>/2019/08/31/%E7%A0%81%E5%86%9C%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0-Elasticsearch-%E5%AE%98%E6%96%B9%E5%85%A5%E9%97%A8%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<h3 id="介绍-Elastic-Stack"><a href="#介绍-Elastic-Stack" class="headerlink" title="介绍 Elastic Stack"></a>介绍 Elastic Stack</h3><blockquote>
<p>包含以下4个部分:</p>
<ul>
<li>Elasticsearch：一个基于 JSON 的分布式搜索和分析引擎。</li>
<li>Kibana：是 Elastic Stack 的窗户，探索数据并管理堆栈。</li>
<li>Beats：是一个面向轻量型采集器的平台，这些采集器可从边缘机器发送数据。</li>
<li>Logstash：是动态数据收集管道，拥有可扩展的插件生态系统。</li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/ElasticStack%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86.png" alt="ElasticStack组成部分"></p>
<p><strong>核心部分——Elasticsearch：</strong> 提供了数据存储、搜索和分析；</p>
<p><strong>Kibana：</strong> 提供了数据可视化和Elasticsearch的管理功能；</p>
<p><strong>Beats</strong>和<strong>Logstash：</strong> 提供了数据摄取功能，Beats是一个轻量级的数据摄取工具，Logstash提供了类似与<a href="https://baike.baidu.com/item/ETL/1251949?fr=aladdin" target="_blank" rel="noopener">ETL</a>(Extract-Transform-Load)的功能。</p>
<p>基于 Elastic Stack 可以构建很多的解决方案，包括：日志、指标、应用性能监控、健康状态监控、安全分析、应用搜索、网站搜索、企业搜索、地图、商业分析等。</p>
<p>Elastic Stack 支持多种部署方式，既可以在共有云上部署对外提供SaaS服务，也能够自我管理（包括Elastic Cloud Enterprise 和 Standalone）。</p>
<p><strong>Elasticsearch 特点</strong></p>
<ul>
<li>可扩展</li>
<li>实时：很好地支持了<strong>实时搜索和分析</strong></li>
<li>高可用：内置了高可用性</li>
<li>开发者友好：基于 json 文档，对开发者者友好</li>
<li>多样的存储</li>
<li>搜索和聚合</li>
</ul>
<h3 id="安装部署-Elasticsearch-amp-Kibana"><a href="#安装部署-Elasticsearch-amp-Kibana" class="headerlink" title="安装部署 Elasticsearch &amp; Kibana"></a>安装部署 Elasticsearch &amp; Kibana</h3><blockquote>
<p>多种方式:</p>
<ol>
<li>使用软件介质安装部署</li>
<li>在容器环境下的安装和部署</li>
</ol>
</blockquote>
<h4 id="安装-Elasticsearch"><a href="#安装-Elasticsearch" class="headerlink" title="安装 Elasticsearch"></a>安装 Elasticsearch</h4><p>进入<a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">官网</a>，点击<a href="https://www.elastic.co/cn/downloads" target="_blank" rel="noopener">免费使用</a>进行下载页面，再进入 Elasticsearch 的<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">下载页面</a>，可参考页面上的 <strong>Installation Steps</strong>, 其中也有关于<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html" target="_blank" rel="noopener">容器环境下的安装部署</a>。</p>
<h5 id="本文安装指令"><a href="#本文安装指令" class="headerlink" title="本文安装指令"></a>本文安装指令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载deb包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.3.1-amd64.deb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载校验文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.3.1-amd64.deb.sha512</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进行校验，正常提示：elasticsearch-7.3.1-amd64.deb: OK</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> shasum -a 512 -c elasticsearch-7.3.1-amd64.deb.sha512</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i elasticsearch-7.3.1-amd64.deb</span></span><br></pre></td></tr></table></figure>

<h5 id="运行-Elasticsearch"><a href="#运行-Elasticsearch" class="headerlink" title="运行 Elasticsearch"></a>运行 Elasticsearch</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/share/elasticsearch/bin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ./elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 报错：不能以root用户运行</span></span><br><span class="line">Caused by: java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 但不用root用户运行又没有权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 原因是 Elasticsearch （简称 ES ）严格限制不允许用root用户执行，但在安装时 ES 已经创建了一个用户和用户组，名字都是 elasticsearch。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 elasticsearch 用户和用户组</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo less /etc/passwd | grep <span class="string">"elasticsearch"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo less /etc/group | grep <span class="string">"elasticsearch"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决步骤</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 将 ES 相关文件所属用户和组都从 root 转为 elasticsearch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown elasticsearch:elasticsearch -R /usr/share/elasticsearch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown elasticsearch:elasticsearch -R /var/<span class="built_in">log</span>/elasticsearch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown elasticsearch:elasticsearch -R /var/lib/elasticsearch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown elasticsearch:elasticsearch -R /etc/default/elasticsearch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown elasticsearch:elasticsearch -R /etc/elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 打开文件 /etc/default/elasticsearch，然后</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.1 取消 JAVA_HOME 注释，并修改为本机对应路径</span></span><br><span class="line">JAVA_HOME=/opt/jdk/jdk1.8</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.2 在文件末尾添加如下内容</span></span><br><span class="line">START_DAEMON=true</span><br><span class="line">ES_USER=elasticsearch</span><br><span class="line">ES_GROUP=elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 用 systemctl 管理 ES</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> elasticsearch</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.1 启动 ES</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start elasticsearch</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.2 查看 ES 运行状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl status elasticsearch</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 用 curl 命令验证</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -X GET <span class="string">'localhost:9200'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.1 显示内容（虚线下方）</span></span><br><span class="line">--------------------------------------------------------</span><br><span class="line">&#123;</span><br><span class="line">    "name" : "hostname",</span><br><span class="line">    "cluster_name" : "elasticsearch",</span><br><span class="line">    "cluster_uuid" : "1S76**************ZiLA",</span><br><span class="line">    "version" : &#123;</span><br><span class="line">        "number" : "7.3.1",</span><br><span class="line">        "build_flavor" : "default",</span><br><span class="line">        "build_type" : "deb",</span><br><span class="line">        "build_hash" : "4749ba6",</span><br><span class="line">        "build_date" : "2019-08-19T20:19:25.651794Z",</span><br><span class="line">        "build_snapshot" : false,</span><br><span class="line">        "lucene_version" : "8.1.0",</span><br><span class="line">        "minimum_wire_compatibility_version" : "6.8.0",</span><br><span class="line">        "minimum_index_compatibility_version" : "6.0.0-beta1"</span><br><span class="line">    &#125;,</span><br><span class="line">    "tagline" : "You Know, for Search"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="安装-Kibana"><a href="#安装-Kibana" class="headerlink" title="安装 Kibana"></a>安装 Kibana</h4><p>进入 kibana 的<a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">下载页面</a>，可参考页面上的 <strong>Installation Steps</strong>，其中也有关于<a href="https://www.elastic.co/guide/en/kibana/current/docker.html" target="_blank" rel="noopener">容器环境下的安装部署</a>。</p>
<h5 id="本文的安装指令"><a href="#本文的安装指令" class="headerlink" title="本文的安装指令"></a>本文的安装指令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载deb包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://artifacts.elastic.co/downloads/kibana/kibana-7.3.1-amd64.deb</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载校验文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://artifacts.elastic.co/downloads/kibana/kibana-7.3.1-amd64.deb.sha512</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进行校验，正常提示：kibana-7.3.1-amd64.deb: OK</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> shasum -a 512 -c kibana-7.3.1-amd64.deb.sha512</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i kibana-7.3.1-amd64.deb</span></span><br></pre></td></tr></table></figure>

<p>安装过程中提示需要重启才能完整安装完毕，<font color="red">所以一定要重启系统！！！</font></p>
<h5 id="运行-kibana"><a href="#运行-kibana" class="headerlink" title="运行 kibana"></a>运行 kibana</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 配置 kibana，进入配置文件夹</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /etc/kibana</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 编辑文件，指定运行 elasticsearch 的主机，默认是本机</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim kibana.yml</span></span><br><span class="line"><span class="meta">#</span><span class="bash">elasticsearch.hosts: [<span class="string">"http://localhost:9200"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 运行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/share/kibana/bin/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 验证</span></span><br><span class="line">打开浏览器输入 http://localhost:5601</span><br><span class="line"><span class="meta">#</span><span class="bash"> 成功的话将会看到与下方类似的图片</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. 用 systemctl 管理 Kibana</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/share/kibana</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo /bin/systemctl daemon-reload</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo /bin/systemctl <span class="built_in">enable</span> kibana.service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.1 用 systemctl 命令启动 Kibana</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start kibana.service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.2 查看 Kibana 状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop kibana.service</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/Welcome_to_Kibana.png" alt="Welcome to Kibana"></p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/kibana_home.png" alt="Kibana home"></p>
<h5 id="Dev-Tool"><a href="#Dev-Tool" class="headerlink" title="Dev Tool"></a>Dev Tool</h5><p>本文演示通过 Kibana 的 <a href="http://localhost:5601/app/kibana#/dev_tools/console?_g=()" target="_blank" rel="noopener">Dev Tool</a>，这是一个交互式命令控制台（左边输入命令，右边显示结果），可方便地进行脚本调试、测试和配置等工作。<br>方便的基本操作指令有：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工具能自动补齐</span></span><br><span class="line"><span class="comment">// 显示 ES 基本信息</span></span><br><span class="line">GET /</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 cat 配置和属性</span></span><br><span class="line">GET /_cat/</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 cat 的 shards</span></span><br><span class="line">GET /_cat/shards</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 cat 的 indices</span></span><br><span class="line">GET /_cat/indeics</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看群集健康程度</span></span><br><span class="line">GET /_cat/health</span><br></pre></td></tr></table></figure>

<h4 id="备用下载地址"><a href="#备用下载地址" class="headerlink" title="备用下载地址"></a>备用下载地址</h4><p>有时下载 ElasticSearch 和 Kibana 安装包过于漫长，这里提供了一个本文用到的安装文件的备用下载地址<a href="https://pan.baidu.com/s/1nNkIBacTlzFUOQ7UUx4t3A" target="_blank" rel="noopener">百度网盘</a>，提取码: cp7h，共有如下4个文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98Elastic%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="文件列表"></p>
<h3 id="使用-JSON-格式的文档"><a href="#使用-JSON-格式的文档" class="headerlink" title="使用 JSON 格式的文档"></a>使用 JSON 格式的文档</h3><blockquote>
<p>通常使用 JSON 格式的文档与 Elasticsearch 进行交互</p>
</blockquote>
<p>JSON 文档常见格式：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"James"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">"location"</span>: &#123;</span><br><span class="line">        lat: "999.0",</span><br><span class="line">        lon: "9012"</span><br><span class="line">    &#125;,</span><br><span class="line">    "tag": ["smart", "handsome"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="增删改查-CRUD"><a href="#增删改查-CRUD" class="headerlink" title="增删改查 CRUD"></a>增删改查 CRUD</h3><h4 id="单文档增删改查"><a href="#单文档增删改查" class="headerlink" title="单文档增删改查"></a>单文档增删改查</h4><h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h5><blockquote>
<p>Elasticsearch 是基于倒排索引的</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从版本6以后一个 index 只能对应一个 type</span></span><br><span class="line"><span class="comment">// 增加，其中 twitter 是 index 名，_doc 是 type 名，1是文档 id</span></span><br><span class="line">POST twitter/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"user"</span>: <span class="string">"James"</span>,</span><br><span class="line">    <span class="attr">"uid"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"Shenyang"</span>,</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"Liaoning"</span>,</span><br><span class="line">    <span class="attr">"country"</span>: <span class="string">"China"</span></span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">  <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET twitter/_doc/1</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">  <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_seq_no"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span> : &#123;</span><br><span class="line">    <span class="attr">"user"</span> : <span class="string">"James"</span>,</span><br><span class="line">    <span class="attr">"uid"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"city"</span> : <span class="string">"Shenyang"</span>,</span><br><span class="line">    <span class="attr">"province"</span> : <span class="string">"Liaoning"</span>,</span><br><span class="line">    <span class="attr">"country"</span> : <span class="string">"China"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按照文档 id 更新</span></span><br><span class="line">POST twitter/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"user"</span>: <span class="string">"詹姆斯"</span>,</span><br><span class="line">    <span class="attr">"uid"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"沈阳"</span>,</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"辽宁"</span>,</span><br><span class="line">    <span class="attr">"country"</span>: <span class="string">"中国"</span>,</span><br><span class="line">    <span class="attr">"location"</span>: &#123;</span><br><span class="line">        <span class="attr">"lat"</span>: <span class="string">"12.234234"</span>,</span><br><span class="line">        <span class="attr">"lon"</span>: <span class="string">"323.2323"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">  <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"result"</span> : <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择性更新</span></span><br><span class="line">POST twitter/_update_by_query</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"script"</span>: &#123;</span><br><span class="line">        <span class="attr">"source"</span>: <span class="string">"ctx._source.city = params.city;ctx._source.province = params.province;"</span>,</span><br><span class="line">        <span class="attr">"lang"</span>: <span class="string">"painless"</span>,</span><br><span class="line">        <span class="attr">"params"</span>: &#123;</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"成都"</span>,</span><br><span class="line">            <span class="attr">"province"</span>: <span class="string">"四川"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"user"</span>: <span class="string">"詹姆斯"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">126</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"updated"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"deleted"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"batches"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"version_conflicts"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"noops"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"retries"</span> : &#123;</span><br><span class="line">    <span class="attr">"bulk"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"search"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"throttled_millis"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"requests_per_second"</span> : <span class="number">-1.0</span>,</span><br><span class="line">  <span class="attr">"throttled_until_millis"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"failures"</span> : [ ]</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">DELETE twitter</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"acknowledged"</span> : <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h4 id="批量文档增删改查"><a href="#批量文档增删改查" class="headerlink" title="批量文档增删改查"></a>批量文档增删改查</h4><h5 id="bulk-增加"><a href="#bulk-增加" class="headerlink" title="bulk 增加"></a>bulk 增加</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;<span class="attr">"_index"</span>: <span class="string">"twitter"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"user"</span>: <span class="string">"双榆树-张三"</span>, <span class="attr">"message"</span>: <span class="string">"今天天气不错，出去转转"</span>, <span class="attr">"uid"</span>: <span class="number">2</span>, <span class="attr">"age"</span>: <span class="number">20</span>, <span class="attr">"city"</span>: <span class="string">"北京"</span>, <span class="attr">"province"</span>: <span class="string">"北京"</span>, <span class="attr">"country"</span>: <span class="string">"中国"</span>, <span class="attr">"address"</span>: <span class="string">"中国北京市海淀区"</span>, <span class="attr">"location"</span>: &#123;<span class="attr">"lat"</span>: <span class="string">"23.23"</span>, <span class="attr">"lon"</span>: <span class="string">"115"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;<span class="attr">"_index"</span>: <span class="string">"twitter"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"user"</span>: <span class="string">"东城区-老刘"</span>, <span class="attr">"message"</span>: <span class="string">"出发，下一行云南"</span>, <span class="attr">"uid"</span>: <span class="number">3</span>, <span class="attr">"age"</span>: <span class="number">30</span>, <span class="attr">"city"</span>: <span class="string">"北京"</span>, <span class="attr">"province"</span>: <span class="string">"北京"</span>, <span class="attr">"country"</span>: <span class="string">"中国"</span>, <span class="attr">"address"</span>: <span class="string">"中国北京市东城区基厂三条3号"</span>, <span class="attr">"location"</span>: &#123;<span class="attr">"lat"</span>: <span class="string">"23.345"</span>, <span class="attr">"lon"</span>: <span class="string">"116"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;<span class="attr">"_index"</span>: <span class="string">"twitter"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"user"</span>: <span class="string">"东城区-李四"</span>, <span class="attr">"message"</span>: <span class="string">"Happy birthday!"</span>, <span class="attr">"uid"</span>: <span class="number">4</span>, <span class="attr">"age"</span>: <span class="number">30</span>, <span class="attr">"city"</span>: <span class="string">"北京"</span>, <span class="attr">"province"</span>: <span class="string">"北京"</span>, <span class="attr">"country"</span>: <span class="string">"中国"</span>, <span class="attr">"address"</span>: <span class="string">"中国北京市东城区"</span>, <span class="attr">"location"</span>: &#123;<span class="attr">"lat"</span>: <span class="string">"25.223"</span>, <span class="attr">"lon"</span>: <span class="string">"105"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;<span class="attr">"_index"</span>: <span class="string">"twitter"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"user"</span>: <span class="string">"朝阳区-老贾"</span>, <span class="attr">"message"</span>: <span class="string">"今天天气不错，出去转转"</span>, <span class="attr">"uid"</span>: <span class="number">5</span>, <span class="attr">"age"</span>: <span class="number">35</span>, <span class="attr">"city"</span>: <span class="string">"北京"</span>, <span class="attr">"province"</span>: <span class="string">"北京"</span>, <span class="attr">"country"</span>: <span class="string">"中国"</span>, <span class="attr">"address"</span>: <span class="string">"中国北京市朝阳区建国门"</span>, <span class="attr">"location"</span>: &#123;<span class="attr">"lat"</span>: <span class="string">"26.345"</span>, <span class="attr">"lon"</span>: <span class="string">"119"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;<span class="attr">"_index"</span>: <span class="string">"twitter"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"user"</span>: <span class="string">"朝阳区-老贾"</span>, <span class="attr">"message"</span>: <span class="string">"Happy birthday my friend!"</span>, <span class="attr">"uid"</span>: <span class="number">6</span>, <span class="attr">"age"</span>: <span class="number">50</span>, <span class="attr">"city"</span>: <span class="string">"北京"</span>, <span class="attr">"province"</span>: <span class="string">"北京"</span>, <span class="attr">"country"</span>: <span class="string">"中国"</span>, <span class="attr">"address"</span>: <span class="string">"中国北京市朝阳区国贸"</span>, <span class="attr">"location"</span>: &#123;<span class="attr">"lat"</span>: <span class="string">"26.123"</span>, <span class="attr">"lon"</span>: <span class="string">"107"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;<span class="attr">"_index"</span>: <span class="string">"twitter"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"user"</span>: <span class="string">"虹桥-老吴"</span>, <span class="attr">"message"</span>: <span class="string">"好友带来了，今天我生日"</span>, <span class="attr">"uid"</span>: <span class="number">7</span>, <span class="attr">"age"</span>: <span class="number">90</span>, <span class="attr">"city"</span>: <span class="string">"上海"</span>, <span class="attr">"province"</span>: <span class="string">"上海"</span>, <span class="attr">"country"</span>: <span class="string">"中国"</span>, <span class="attr">"address"</span>: <span class="string">"中国上海市闵行区"</span>, <span class="attr">"location"</span>: &#123;<span class="attr">"lat"</span>: <span class="string">"31.223"</span>, <span class="attr">"lon"</span>: <span class="string">"125"</span>&#125; &#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">941</span>,</span><br><span class="line">  <span class="attr">"errors"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"items"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"n5FG1mwB6KtJaZuGZ9Dn"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"oJFG1mwB6KtJaZuGZ9Dn"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"oZFG1mwB6KtJaZuGZ9Dn"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"opFG1mwB6KtJaZuGZ9Dn"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"o5FG1mwB6KtJaZuGZ9Dn"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"index"</span> : &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"pJFG1mwB6KtJaZuGZ9Dn"</span>,</span><br><span class="line">        <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">        <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">          <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_seq_no"</span> : <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"_primary_term"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"status"</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h6 id="bulk-增加导致映射错误"><a href="#bulk-增加导致映射错误" class="headerlink" title="bulk 增加导致映射错误"></a>bulk 增加导致映射错误</h6><p><font color="red">问题：</font>ES 插入6个文档时，自动触发了 mapping，也被叫做 dynamic mapping。有时候 dynamic mapping 会导致有些字段未能映射正确，比如上方的 location 属性未被映射为 geo_point（地理位置信息字段）, 而是被映射为了 text。</p>
<p><font color="green">解决方法：</font></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 删除该索引</span></span><br><span class="line">DELETE twitter </span><br><span class="line"><span class="comment">// 2. put 设置分片数为1，版本7之前有5个分片，之后只有1个</span></span><br><span class="line">PUT twitter</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;<span class="attr">"number_of_shards"</span>: <span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 通过 _mapping 接口对 twitter 结构重新定义，满足自定义索引使用需求</span></span><br><span class="line">PUT twitter/_mapping</span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">      <span class="attr">"properties"</span> : &#123;</span><br><span class="line">        <span class="attr">"address"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"city"</span> : &#123;</span><br><span class="line">            <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"country"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"location"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"geo_point"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"province"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"uid"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"user"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"acknowledged"</span> : <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h5 id="查找所有"><a href="#查找所有" class="headerlink" title="查找所有"></a>查找所有</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看批量插入是否成功</span></span><br><span class="line">GET twitter/_search</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"n5FG1mwB6KtJaZuGZ9Dn"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"双榆树-张三"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"今天天气不错，出去转转"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">20</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市海淀区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"23.23"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"115"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"oJFG1mwB6KtJaZuGZ9Dn"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-老刘"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"出发，下一行云南"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区基厂三条3号"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"23.345"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"116"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"oZFG1mwB6KtJaZuGZ9Dn"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-李四"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"Happy birthday!"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"25.223"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"105"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"opFG1mwB6KtJaZuGZ9Dn"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"朝阳区-老贾"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"今天天气不错，出去转转"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">5</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">35</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市朝阳区建国门"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"26.345"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"119"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"o5FG1mwB6KtJaZuGZ9Dn"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"朝阳区-老贾"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"Happy birthday my friend!"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">6</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">50</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市朝阳区国贸"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"26.123"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"107"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"pJFG1mwB6KtJaZuGZ9Dn"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"虹桥-老吴"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"好友带来了，今天我生日"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">7</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">90</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"上海"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"上海"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国上海市闵行区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"31.223"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"125"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h5 id="带条件查找"><a href="#带条件查找" class="headerlink" title="带条件查找"></a>带条件查找</h5><h6 id="找到所在城市为北京的人"><a href="#找到所在城市为北京的人" class="headerlink" title="找到所在城市为北京的人"></a>找到所在城市为北京的人</h6><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;<span class="attr">"match"</span>: &#123;</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"北京"</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">14</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">0.37469345</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"pZHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.37469345</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"双榆树-张三"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"今天天气不错，出去转转"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">20</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市海淀区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"23.23"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"115"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"ppHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.37469345</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-老刘"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"出发，下一行云南"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区基厂三条3号"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"23.345"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"116"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"p5Hy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.37469345</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-李四"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"Happy birthday!"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"25.223"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"105"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"qJHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.37469345</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"朝阳区-老贾"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"今天天气不错，出去转转"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">5</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">35</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市朝阳区建国门"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"26.345"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"119"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"qZHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.37469345</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"朝阳区-老贾"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"Happy birthday my friend!"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">6</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">50</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市朝阳区国贸"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"26.123"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"107"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h6 id="使用-bool-进行查询"><a href="#使用-bool-进行查询" class="headerlink" title="使用 bool 进行查询"></a>使用 bool 进行查询</h6><p>1.<strong>must</strong><br>must 类似于 sql 中的 and</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在北京且年龄为30岁的人</span></span><br><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;<span class="attr">"must"</span>: [</span><br><span class="line">      &#123;<span class="attr">"match"</span>: &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"北京"</span></span><br><span class="line">      &#125;&#125;,</span><br><span class="line">      &#123;<span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"age"</span>: <span class="string">"30"</span></span><br><span class="line">        &#125;&#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">192</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">1.3746934</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"ppHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.3746934</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-老刘"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"出发，下一行云南"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区基厂三条3号"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"23.345"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"116"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"p5Hy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.3746934</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-李四"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"Happy birthday!"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"25.223"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"105"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<p>2.<strong>must not</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不在北京的人</span></span><br><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;<span class="attr">"must_not"</span>: [</span><br><span class="line">      &#123;<span class="attr">"match"</span>: &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"北京"</span></span><br><span class="line">      &#125;&#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">0.0</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"qpHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"虹桥-老吴"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"好友带来了，今天我生日"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">7</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">90</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"上海"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"上海"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国上海市闵行区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"31.223"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"125"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.0</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"詹姆斯"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"沈阳"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"辽宁"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"12.234234"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"32.2323"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<p>3.<strong>should</strong><br>should 类似于 sql 中的 or</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在北京或上海的人</span></span><br><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;<span class="attr">"should"</span>: [</span><br><span class="line">      &#123;<span class="attr">"match"</span>: &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"北京"</span></span><br><span class="line">      &#125;&#125;,</span><br><span class="line">      &#123;<span class="attr">"match"</span>: &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"上海"</span></span><br><span class="line">      &#125;&#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">18</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">1.6739764</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"qpHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.6739764</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"虹桥-老吴"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"好友带来了，今天我生日"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">7</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">90</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"上海"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"上海"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国上海市闵行区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"31.223"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"125"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"pZHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.37469345</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"双榆树-张三"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"今天天气不错，出去转转"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">20</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市海淀区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"23.23"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"115"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"ppHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.37469345</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-老刘"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"出发，下一行云南"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区基厂三条3号"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"23.345"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"116"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"p5Hy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.37469345</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-李四"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"Happy birthday!"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"25.223"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"105"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"qJHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.37469345</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"朝阳区-老贾"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"今天天气不错，出去转转"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">5</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">35</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市朝阳区建国门"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"26.345"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"119"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"qZHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">0.37469345</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"朝阳区-老贾"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"Happy birthday my friend!"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">6</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">50</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市朝阳区国贸"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"26.123"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"107"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h5 id="用-count-统计个数"><a href="#用-count-统计个数" class="headerlink" title="用 _count 统计个数"></a>用 _count 统计个数</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在北京和上海的人的个数</span></span><br><span class="line">GET twitter/_count</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;<span class="attr">"should"</span>: [</span><br><span class="line">      &#123;<span class="attr">"match"</span>: &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"北京"</span></span><br><span class="line">      &#125;&#125;,</span><br><span class="line">      &#123;<span class="attr">"match"</span>: &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"上海"</span></span><br><span class="line">      &#125;&#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"count"</span> : <span class="number">6</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h5 id="复杂查找：按地理位置信息"><a href="#复杂查找：按地理位置信息" class="headerlink" title="复杂查找：按地理位置信息"></a>复杂查找：按地理位置信息</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在北京且距离某一固定范围内的人，并排序</span></span><br><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;<span class="attr">"must"</span>: [</span><br><span class="line">      &#123;<span class="attr">"match"</span>: &#123;</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"北京"</span></span><br><span class="line">      &#125;&#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"post_filter"</span>: &#123;</span><br><span class="line">    <span class="attr">"geo_distance"</span>: &#123;</span><br><span class="line">      <span class="attr">"distance"</span>: <span class="string">"1000km"</span>,</span><br><span class="line">      <span class="attr">"location"</span>: &#123;</span><br><span class="line">        <span class="attr">"lat"</span>: <span class="string">"26.129"</span>,</span><br><span class="line">        <span class="attr">"lon"</span>: <span class="string">"107.011"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_geo_distance"</span>: &#123;</span><br><span class="line">        <span class="attr">"location"</span>: <span class="string">"26.129,107.011"</span>, </span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span>,</span><br><span class="line">        <span class="attr">"unit"</span>: <span class="string">"km"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">104</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"ppHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-老刘"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"出发，下一行云南"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区基厂三条3号"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"23.345"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"116"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span> : [</span><br><span class="line">          <span class="number">958.850982854175</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"pZHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"双榆树-张三"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"今天天气不错，出去转转"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">20</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市海淀区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"23.23"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"115"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span> : [</span><br><span class="line">          <span class="number">868.9442642436171</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"p5Hy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-李四"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"Happy birthday!"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"25.223"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"105"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span> : [</span><br><span class="line">          <span class="number">225.30557848523242</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"qZHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"朝阳区-老贾"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"Happy birthday my friend!"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">6</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">50</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市朝阳区国贸"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"26.123"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"107"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span> : [</span><br><span class="line">          <span class="number">1.2849540831286064</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 说明：此处经纬度地址为随机手写，为了出现多条信息，特地将 distance 增大了，真实情况不需要</span></span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h5 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询年龄大于等于20小于等于30的人，并降序排序</span></span><br><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">      <span class="attr">"age"</span>: &#123;</span><br><span class="line">        <span class="attr">"gte"</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">"lte"</span>: <span class="number">30</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"age"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"ppHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-老刘"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"出发，下一行云南"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区基厂三条3号"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"23.345"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"116"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span> : [</span><br><span class="line">          <span class="number">30</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"p5Hy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-李四"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"Happy birthday!"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"25.223"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"105"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span> : [</span><br><span class="line">          <span class="number">30</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"pZHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"双榆树-张三"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"今天天气不错，出去转转"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">20</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市海淀区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"23.23"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"115"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span> : [</span><br><span class="line">          <span class="number">20</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h5 id="按指定字段查询"><a href="#按指定字段查询" class="headerlink" title="按指定字段查询"></a>按指定字段查询</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询并将命中字段高亮显示</span></span><br><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">        <span class="attr">"message"</span>: <span class="string">"hPy birthday"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">    <span class="attr">"fields"</span>: &#123;<span class="attr">"message"</span>: &#123;&#125;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line"><span class="comment">// &lt;em&gt; 即为高亮显示标签</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">1.4602998</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"p5Hy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.4602998</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-李四"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"Happy birthday!"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"25.223"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"105"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"highlight"</span> : &#123;</span><br><span class="line">          <span class="attr">"message"</span> : [</span><br><span class="line">            <span class="string">"Happy &lt;em&gt;birthday&lt;/em&gt;!"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"qZHy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.2567999</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"朝阳区-老贾"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"Happy birthday my friend!"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">6</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">50</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市朝阳区国贸"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"26.123"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"107"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"highlight"</span> : &#123;</span><br><span class="line">          <span class="attr">"message"</span> : [</span><br><span class="line">            <span class="string">"Happy &lt;em&gt;birthday&lt;/em&gt; my friend!"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 "match" 如果要查 "abc def"，那么 "def abc"也会被查出，同时比较接近的也会被查出</span></span><br><span class="line"><span class="comment">// 避免这种情况用 "match_phrase"</span></span><br><span class="line"><span class="comment">// 分词时不分区大小写，这里查询也是</span></span><br><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_phrase"</span>: &#123;</span><br><span class="line">        <span class="attr">"message"</span>: <span class="string">"haPy birthday"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="映射-Mapping"><a href="#映射-Mapping" class="headerlink" title="映射 Mapping"></a>映射 Mapping</h3><blockquote>
<p>Elasticsearch 中的 Mapping 对应关系型数据库中的库表结构</p>
</blockquote>
<h4 id="查看-mapping-信息"><a href="#查看-mapping-信息" class="headerlink" title="查看 mapping 信息"></a>查看 mapping 信息</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查文档的 mapping 信息，类似于数据库中的表</span></span><br><span class="line">GET twitter/_mapping</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"twitter"</span> : &#123;</span><br><span class="line">    <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">      <span class="attr">"properties"</span> : &#123;</span><br><span class="line">        <span class="attr">"address"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"age"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"city"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"country"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"location"</span> : &#123;</span><br><span class="line">          <span class="attr">"properties"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">              <span class="attr">"fields"</span> : &#123;</span><br><span class="line">                <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">                  <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">                  <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"lon"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">              <span class="attr">"fields"</span> : &#123;</span><br><span class="line">                <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">                  <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">                  <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"message"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"province"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"uid"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"user"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上方中的 text 表示该字段可被全文搜索，keyword 表明该字段可用于聚合查询进行统计分析；</span></span><br><span class="line"><span class="comment">// 同时含有这两种类型，说明该字段既按照 text 分词进行保存，又按照 keyword 分词进行保存。</span></span><br><span class="line"></span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h3 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h3><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p>类似于 sql 中的 &gt;= 和 &lt;=</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面的 size 表示命中信息的显示个数</span></span><br><span class="line"><span class="comment">// 由于做聚合分析，可以不显示命中信息</span></span><br><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"age"</span>: &#123;</span><br><span class="line">      <span class="attr">"range"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"age"</span>,</span><br><span class="line">        <span class="attr">"ranges"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"from"</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="number">30</span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            <span class="attr">"from"</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="number">40</span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            <span class="attr">"from"</span>: <span class="number">40</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="number">100</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="attr">"age"</span> : &#123;</span><br><span class="line">      <span class="attr">"buckets"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"20.0-30.0"</span>,</span><br><span class="line">          <span class="attr">"from"</span> : <span class="number">20.0</span>,</span><br><span class="line">          <span class="attr">"to"</span> : <span class="number">30.0</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"30.0-40.0"</span>,</span><br><span class="line">          <span class="attr">"from"</span> : <span class="number">30.0</span>,</span><br><span class="line">          <span class="attr">"to"</span> : <span class="number">40.0</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"40.0-100.0"</span>,</span><br><span class="line">          <span class="attr">"from"</span> : <span class="number">40.0</span>,</span><br><span class="line">          <span class="attr">"to"</span> : <span class="number">100.0</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h4 id="term"><a href="#term" class="headerlink" title="term"></a>term</h4><p>类似于 sql 中的 group by</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">        <span class="attr">"message"</span>: <span class="string">"happy birthday"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">"size"</span>:<span class="number">1</span>, </span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">"city"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"city"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// terms 里的 size 表示一次显示出 key 的个数，默认是10</span></span><br><span class="line"><span class="comment">// terms 用 size 作假分页的效果，其实全部查出来了，知识部分显示而已</span></span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">1</span>, </span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>, </span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">2.9205997</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"twitter"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"p5Hy3GwB6KtJaZuGGtC7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">2.9205997</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user"</span> : <span class="string">"东城区-李四"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"Happy birthday!"</span>,</span><br><span class="line">          <span class="attr">"uid"</span> : <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"age"</span> : <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"city"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"country"</span> : <span class="string">"中国"</span>,</span><br><span class="line">          <span class="attr">"address"</span> : <span class="string">"中国北京市东城区"</span>,</span><br><span class="line">          <span class="attr">"location"</span> : &#123;</span><br><span class="line">            <span class="attr">"lat"</span> : <span class="string">"25.223"</span>,</span><br><span class="line">            <span class="attr">"lon"</span> : <span class="string">"105"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">"aggregations"</span> : &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">"city"</span> : &#123;</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"buckets"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"北京"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 分析器 Analyzers</span><br><span class="line">&gt; 用 Analyzer 对字段里的文本进行过滤和分词，形成倒排索引，最后供搜索使用。通常一个 Analyzer 由以下3个部分组成</span><br><span class="line"></span><br><span class="line">* Character Filters</span><br><span class="line">对字段进行过滤</span><br><span class="line">&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">* Tokenizer</span><br><span class="line">形成分词器，把各个短语分为各个值</span><br><span class="line">&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">* Token Filters</span><br><span class="line">对分开的词进行过滤，把所有 stopwords 不进行搜索的词去掉，或把所有词组中的词统一为小写</span><br><span class="line"></span><br><span class="line">#### standard 分词器</span><br><span class="line">```json</span><br><span class="line"><span class="comment">// 按空格分</span></span><br><span class="line">GET twitter/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"text"</span>: [<span class="string">"Happy Birthday"</span>],</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"standard"</span></span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"happy"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"birthday"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">14</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<p><strong>put twitter/_mapping 中也可以添加 analyzer，默认是 standard</strong><br>例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT twitter/_mapping</span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">      <span class="attr">"properties"</span> : &#123;</span><br><span class="line">        <span class="attr">"address"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"city"</span> : &#123;</span><br><span class="line">            <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"country"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"location"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"geo_point"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"province"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"uid"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"user"</span> : &#123;</span><br><span class="line">          <span class="attr">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"standard"</span></span><br><span class="line">          <span class="string">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"keyword"</span> : &#123;</span><br><span class="line">              <span class="attr">"type"</span> : <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="simple-分词器"><a href="#simple-分词器" class="headerlink" title="simple 分词器"></a>simple 分词器</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET twitter/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"text"</span>: [<span class="string">"Happy.Birthday"</span>],</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"simple"</span></span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"happy"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"birthday"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">14</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h4 id="自定义分词并转小写"><a href="#自定义分词并转小写" class="headerlink" title="自定义分词并转小写"></a>自定义分词并转小写</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET twitter/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"text"</span>: [<span class="string">"Happy Birthday"</span>],</span><br><span class="line">  <span class="attr">"tokenizer"</span>: <span class="string">"standard"</span>, </span><br><span class="line">  <span class="attr">"filter"</span>: [<span class="string">"lowercase"</span>]</span><br><span class="line">&#125;</span><br><span class="line">-------------（右方结果显示）-------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"happy"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"birthday"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">14</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure>

<h3 id="附：kibana-页面快捷键"><a href="#附：kibana-页面快捷键" class="headerlink" title="附：kibana 页面快捷键"></a>附：kibana 页面快捷键</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl/Cmd + I</td>
<td>自动格式化</td>
</tr>
<tr>
<td>Ctrl/Cmd + /</td>
<td>打开帮助文档</td>
</tr>
<tr>
<td>Ctrl + Space</td>
<td>自动补全</td>
</tr>
<tr>
<td>Ctrl/Cmd + Enter</td>
<td>执行代码</td>
</tr>
<tr>
<td>Ctrl/Cmd + Up/Down</td>
<td>将光标切换到上/下一段代码<font color="orange">（注：这里与 chrome 切换标签页的快捷键重复）</font></td>
</tr>
<tr>
<td>Ctrl/Cmd + Alt + L</td>
<td>折叠/展开当前域<font color="orange">（注：测试无效）</font></td>
</tr>
<tr>
<td>Ctrl/Cmd + Option + 0</td>
<td>关闭所有域除了当前域，组合键再加 shift 可展开</td>
</tr>
<tr>
<td>Down arrow</td>
<td>自动提示有多个选项时进行选择</td>
</tr>
<tr>
<td>Enter/Tab</td>
<td>直接补全最常用提示代码</td>
</tr>
<tr>
<td>Esc</td>
<td>暂停编辑区工作</td>
</tr>
</tbody></table>
<h3 id="附：官方辅助资料"><a href="#附：官方辅助资料" class="headerlink" title="附：官方辅助资料"></a>附：官方辅助资料</h3><p><a href="https://www.elastic.co/guide/cn/index.html" target="_blank" rel="noopener">简体中文文档</a><br><a href="https://www.bagevent.com/org/738410?sortDirection=1&pagingPage=1&pagingNumberPer=5&from=singlemessage&isappinstalled=0" target="_blank" rel="noopener">主办活动</a><br><a href="https://elasticsearch.cn" target="_blank" rel="noopener">elasticsearch中文社区</a></p>
<p><em>ElasticSearch 7 新版本正在被广泛使用</em></p>
]]></content>
      <categories>
        <category>码农笔记</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
        <tag>Kibana</tag>
      </tags>
  </entry>
  <entry>
    <title>翻译| git — Rebase vs Merge</title>
    <url>/2019/08/27/%E7%A0%81%E5%86%9C%E7%AC%94%E8%AE%B0/%E7%BF%BB%E8%AF%91-git-%E2%80%94-Rebase-vs-Merge/</url>
    <content><![CDATA[<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>本文翻译自原文：<a href="https://medium.com/datadriveninvestor/git-rebase-vs-merge-cc5199edd77c" target="_blank" rel="noopener">git — Rebase vs Merge</a>，原作者：<a href="https://medium.com/@filissen" target="_blank" rel="noopener">Filiz Senyuzluler
</a>，本文仅供学习交流。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p><code>git rebase</code> 和 <code>git merge</code> 都是用来合并分支的，但它们的方式有所不同。</p>
<p>举个例子，假设我们已经产生了像下面一样的 <code>commit</code>（<em>译者注：此时有两个分支，<code>master</code> 分支和 <code>feature</code> 分支；ab 当中颜色较深的表示被修改的部分，即*</em>a<strong>b 中 a 被修改，a</strong>b** 中 b被修改*），<code>git merge</code> 会在 <code>master</code> 分支将两个分支的 <code>commit</code> 合并成一个新快照并提交，而 <code>git rebase</code> 会把 <code>master</code> 分支最后一次 <code>commit</code> 中所有的改动都添加到 <code>feature</code> 分支。</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/git_commits_merge_rebase.png" alt="Commits_Merge_Rebase"></p>
<ul>
<li><p>When you do rebase a feature branch onto master, you move the base of the feature branch to master branch’s ending point.</p>
</li>
<li><p>当在<code>feature</code> 分支执行 <code>git rebase master</code> 时，会将 <code>master</code> 最新的 <code>commit</code> 转移到 <code>feature</code> 分支（<em>译者注：也被称为[*</em>变基*<em>](<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA</a>)</em>）；</p>
<br>
</li>
<li><p>Merging takes the contents of the feature branch and integrates it with the master branch. As a result, only the master branch is changed. The feature branch history remains same.</p>
</li>
<li><p><code>git merge</code> 会获取 <code>feature</code> 分支内容并将其融合进 <code>master</code> 分支。最后的结果是只有 <code>master</code> 分支被修改了，<code>feature</code> 分支会保持不变；</p>
<br>
</li>
<li><p>Merging adds a new commit to your history.</p>
</li>
<li><p><code>git merge</code> 会在历史日志中增加一次 <code>commit</code>。</p>
</li>
</ul>
<p>产生的 commit 会像下方一样：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/Result_of-commits.png" alt="Result_of-commits"></p>
<h4 id="什么时候使用-rebase-什么时候所以用-merge？"><a href="#什么时候使用-rebase-什么时候所以用-merge？" class="headerlink" title="什么时候使用 rebase? 什么时候所以用 merge？"></a>什么时候使用 rebase? 什么时候所以用 merge？</h4><p>当想要从已与其他开发者共享的 <code>feature</code> 分支获取修改内容时，不推荐使用 <code>rebase</code>，因为 <code>rebase</code> 操作将会创建一个不一致的仓库。对于个人，<code>rebase</code> 要有意义的多；</p>
<p>如果想要看见过程中的完整历史日志(<em>译者注：指<code>git log</code></em>)，应该使用 <code>merge</code>。<code>merge</code> 会保存历史日志，而 <strong><code>rebase</code> 会覆盖历史日志</strong>。</p>
<p><code>rebase</code> 更适合梳理复杂的历史日志，可以用它在<font color="green"><b>交互式命令</b></font>下修改 <code>commit</code> 记录。还可以删除不想要的 <code>commit</code>，将两个或多个 <code>commit</code> 压缩成一个，还可以编辑 <code>commit message</code>。</p>
<p><code>rebase</code> 在提交时一次只会显示一个冲突，而 <code>merge</code> 在提交时会显示所有的冲突。尽管 <code>rebase</code> 比 <code>merge</code> 更适合且更容易解决冲突，但要牢记回退一次 <code>rebase</code> 操作也要比回退一次 <code>merge</code> 麻烦的多。更多 <code>git rebase</code> 操作可以参见：<a href="https://medium.com/@filissen/git-basic-rebase-1627b8296f04" target="_blank" rel="noopener">git — Basic Rebase</a>。</p>
]]></content>
      <categories>
        <category>码农笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>文档翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>记录第一次在github上贡献代码</title>
    <url>/2019/08/27/Encrypted/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9C%A8github%E4%B8%8A%E8%B4%A1%E7%8C%AE%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Sorry! This is private, you can access others." />
    <label for="pass">Sorry! This is private, you can access others.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1+4DSOuvFhDI2G0R9UhzltTvl6yJo+9RF9pgcZBoMFMgMLNaQR4zbpoVkl8Fh3Lg/qyVQNElrpKdHx+PhmF+3y0Be4cSBJPOGpz1MprWBZwHjI6IPl5S/0t1KNKcnbMWBNexqj8riu0tquc9ljIPtHi+bgawYMHtcMKIVXKMwsmqPlfZ2svwEyBoVV0hsgd0lJDrkpsd0hEmNBWFVvsO86F+dT7eEgIvDcB8gAiNFLOnHufhon3/hvUO/nPUBthKM7JyzZTjV2umv+oXUevIuzUJhlsgRfbgVvyaruOjlk1BKaadZ/nRsslWX9SAGlJBuPXvKUTPYN99s37INo5HmaOalxEBrhWjWw/Gr2uUe58xoARZGTVcz1SEkkFx4I8xyzSCq0vXPZHWaDgojh3n8enljpJXbEitClrW20QVwkLHi8uB7C+4YYo7bEkDAoVuXJ0WMpx8u8RMNTelpt8DXT6TJVEgE1+nO5BwrXful2qt4zjUDcq2w111eGGQW8G0mmKQBp2p0T2rgUWg9fHile5+gdWqLPnEGGVo2HpyCRZSAoyyHGDxRHYQrEBNvprvY2FG+8H8OzgkylzPkZs/U74gJXs/8P6MYlQos7soNF75bqgspFBvCY77oQjdsykc3b7hulRgWOHOZtstLSEtivqa42sOU0Db+yiF84pY/OTtqLGuTYyY2ATbMcKewAAvRMzGWjg31cWCwLtGiF5o0QESqR+KJwo1AvLuRFp+ewVgS2ZTcV8CaFBIBMD51SUInfEK6y4AhDgNbquXrvv72xhrbEmywGPxYxPW+4uyzg83QslPTsykA7yahaAAfH7mrLf9cxZBdwYgs2i6HylGOsM3FZ+W1w55rEYOV0FtbDmrU+4Ll4RveBN44pQ74K7zPONTVa3+GLf+VvAnY9l3awPnW8Y9UdPkycnJMTZtmcqz5HSQwmJ66IO8/qbkhl6HDcDrwiCnIsXKeGQJkk617RHta2PblBwbaW+UOrtrmUa8OFB/DeS/RfQFbWRGr3UdNh8ukhgytsxFkRtTNwlKb2hys1ZCZCIIUVpwCc/xGufj0AAvYEOuWQk1bo0gtqkLmc6UKW4PmmN7pNgxqP3KKHxa5CxfXLj1LtRPArPGAjR+zsk/EErcdNj4V/iC3ArrOOBWpNCHSq9aPUS8BCpw4QkCgGSG3tAj/vQq4jCX/v+f2FnS1VEA7nPrZuKRb4ojiDcj1qqkP0JwB+XXQcVJinbtT381xTH3VwVD3GSQh8/UHjose7k0o2C0xTT9q+MabXtwzh6ReCSs5rpJ3eQCbKVRFd9rD77cN6PEBGCOyWUHUGxwt0HdSTTViDmYeowpyWf7KJOMZX9b7sttd4meyBXb0wSBW3bOVe8zIe7yvSeacmALEaCCgvtQZ4WJWZhpcVAWSS6GbumOkk+ULlR9ULDwhttlfWIlAyYmvj47ls6pE4MCCpcAp8o+srkvBQrcGTrwlJluuxkagnYvGEJ3tCxPS6wXb/bhTEyypwnhaZCv1CGH+OQCupItzx5X+bDBI3ZdU9LtzuSU0IHlwMl41d+j6VFQ7fOOyZu8iloNmRJIPJh1VSWE1dKJXm0bLrjhPXlWF2nbxbjea4UiE1M5BO/t+6aDnFSZPzyHh2dn7kaJLWbFsBIo9pTssYF0OPv6vaIkr31+/iWWW0th0ba7rrtM58ROqLVWF2mvApj7Tk5kpGMuMgyI6sz4kOKHT1ORriciXmOOgam1iUd8ZkLiWDuItdz2Q4BNOuAHE4Dy3JEFMH1xNl6DOxoQ0cLIo0B1Pv/9R0E1+8RHCujFjJRO3kjM81fYQc7Wpm3I+o01wa3X8Yg/Bl46kGcm7UiiWm73sd8K8dBw1Hh5Y+1EHCmx6dP/3Y42nF4bToHoUmWRKA+sgW5Izjp/AJ8RoCh8a27y6ohNqnLifdETwp1DpddMu2KUwAPFt+WRgZ/XK/lbyeibpHYQgz8f617K2THxU/OLeP+HJ18Z2AYtMepZlVqR9AnTpkvctE3ChhFTO9pGdotGQ8lTyvSVF1QT16n3c9otavsGoe2EHs/fsnUh4XB76dWgKRH2x3fswEsmhycgEeMFu1fuscoj3CurVeDWpDbx/kpwzfqVH/u+Wl+HptRMknqJQCpndVr2XLgl6ONBcT7kVC6r5602mz8c9vWnpeFxVNb5eRluoctTthWnAN9H2qV1PshmbUlKJunQ2H2A3WYI4rapoQ+DHktQVxLHS4eakPv7mCKDMJ1WXqzTYCspIi3BWuAPQVSJMqEP/Uurjov6V8fhfMOxO6GlCtD1PGQEaJzoILAcibgA351uIEiBjqiwgiDv5IJ7MBYJalUqW5Fi4s8fqo29zfaYw33pQli8NvuQgu4rKmWwxRSSZeuCj0Y73PmDLS0mgVNTsM3pmeNSQZ3NMO371d6qjOzhYdSBLq8L6NgqvEVjPawzeLj2mxCjjTfeXNuVja+Cq2c/Xg8Ix9VATPZmfWko+b1m2mfFFe9WZ0CH7YluDKs2VstgSfD4jfUFGBH4/ifEZhvd2MWKSgmaVjXBIobbMKwVuVGpXwp0Aoj7t8LRQosuYbS/UGKXYzxgFbracPZu/MnvmwbnojOGm6nZe4340Azlm8k0MMNkKmmFYDkb8ThjMCkYPQ/ixygLweBPRIax30C03ZAO+9jL7tWAqt84xy1CVhvKJjctAq2ZLz03B1xmS07lySxpIRX39HNqtknNLSpbEQud4Ct0W4u2wKawzKzVPx17mkdVatwGsu6VFQbOiSKEB7SeosMNipgQkZ7INlbcH+fwPQniOWzHkJ1XV3ZtSe8hg8MBL7NQ+GfXmKcVvwbcKr1Kpue6n0WYvrmyYoDboQrc/YIrRkhaU2j3el210okrx0ZZztTI+/o4VkjHSph5FptXGk7iXvV1ZXZDySFgNHApT+pJbwpWYKeBx7jbOGeQn6pgAcL5io0WlL5T9ra5thVcGYq+b68MOMHqJSm5qL7oO+dmNuw17n5UM4gvS1ZBJPTeM7ro/998NKEwMLK18xIbAyXn9Ccx7zlt07FtTE9oTg9thSaRDS67iFOnZO8f/Dpc8MN5dDxJIAm+K+XOuPkk9gPcbcbOoZmCzmzUEUzYRpInpwmWd7iDIvaaynxY6GWJGBEFulCpQaidShk2gdU5boEf9m02lL6/Qfbs8ZQE5WKyLeWRo1FObN4ddQTHuZffJbWEyGyi6LpHw0Hp02BOpFCbGm/hVYTDiKND/SmeUqsvmP7a8bjMRXh4g4iSfDJmimoHYGxPYhXUG9SaumEH2ZYuobpj45y+nTD/KWCGBki6iZTxmiCM37BEyya1ngtLPTwYMIQUmMLit8f+xvr+/Qu+Ugw2wl4kKgGPRNtVL44GxxVNwlUY12tzlLUD0XQcgJ6CYeYAcYTZUs0z/OCOYIF/EIcEh+tEmU+LAGxhj0DA0VARPq5dOHp1FE4ePN7PF581L8PRlqrv6SwHEj4pwKusE6Ia1Jnc+FSPEPHLTc+YZ+kdlM93EepTGa/ogEvIr1rBfjQno/R6uTzNcSx3fjoN7PAuQpYSMqtxyrqjdSc2KK1rvz335vjYyOrAqOxF5Vc3efm9kijIMSI3jNJtuObTnYpdhfkND2ijZl2Bhkopc1hrXHv93xyfGMBs+zSshNc/BQvj1agtEQ2SQX0RXE6QVWvYKIodujEDT3GSDhwZtZ8BekGIE6hYLkNgglahXE+CnafQ0kc0MVXHCm8tuPV6nwO8cfGYZAB+P7sMMOfAgePkFwu8cbL1CfQd2CWuLD2Balwd+IZTUsEy7NNq+0fA+WVdDgtsnTgcj/0J5vIdXFDB3uipcUfHlQR7i/H+tGba/MWyBi6BHbrG6QzW8BsBb3a8aVQl9OW5G7iAOynQCaMdg6vQvSsMK3SmKZ1oQ1UFLDr6UxyserT71rE3iEL0wGazg44+rLAkaEcjkZ5dGZqavERjgl3nEeZkr7OmPmF+sWvf/n4iDtxfPvdRtnuCp6OH1LUMO2DzVzgXRwzpj/3B6QozJXIWh5oUz1xKiCfrhWwZHNM7Gz7tqIbp+7REJTLlFyRX0m7rezWS0e2oIB2TdohVuWHAhLM2jW5TSDczPhcShS1msIwJ18P1eL0SFU/Ded/lH6qcn4Q6iw0kFCBLvskKPg5pjoH9807i0ybaB8b0OzX71qrCwaeGo049J/lXm34FRJjXxBioKjy6KMU1PD7lEVqDjuTIOKFvmKWkpOvxFSQic4XjqHR4Tsg92ZvdqwNLUINATJjnlhsSkCZQIuJfOfqG5pVIkzFw75qqb5/zRqz+MwxXHTFOCbh3ixfEAkW+koSToaAgrfh059J2n16qtDumeIL1zcuWQ9axaZX5WsBzNQJ6SvfcCrUX4VW2lcsJIjjTdlR6AaiVFLBiZl4SBELRqpuhiqj4kRQJBDYzELglsPWWCrr4+s3IVv3c15uS4nVyJIGt5yGcwvS3zlGw/yShs80FAiPOE/8z0F71OW69pC9vLF/Cgc9Iig9tnF0lgvehuiYSY7cN5x3+pCck5pSTZGGZZh99QVQPI2a8tO7BFwv6K4VrDsJFcf+tpXCn7erIUmOoBZAw+t1Txba+J5w5n6LfI3WolaecH9xNhJKNCwrHYjgC7UnIwwNIB+HTBz6U/3kdIKAjuASHEO9qcMUmq9PlfXZkMehIFM6a7nBiTmRmWPIxg++hw7u1LaHs6ggLyBwuv6802FBCQatf9DZjNpOYXFbMr35jfaki0T+xuVz1X+VVTinkqNmmFKNfyRcKG7cKhodPsuyM0VADXMARTDMxeap1tVvgVJzu7JrdNZAes7BK67IrmOc8gmjH7+zY/A3qz6D4HKcHwF7ms62JDnCZiuIaaKCn2QAFjTV9B+eMjzjOHMVNlONlnnX+sXHgc6g5Zc9oTrNo7ZhBFkrXiYE6xCnMy4vyDiJYuK/U7A4MmM98Pfd+L92ZnjuBrWDub31TV7D8OKXfQCcbYhuS/+IiAMzwlSheXsTUJZzVu5uAT06SReR3dJPH4oOlEBwY/O6VQPZSR/09mdwvQBFtSK6nvKy9gzCQV1Tr3wZOOaFGbKXL6rGUMrtKARr+8h37N+1pW/S+Wslp1dm0xfzlXLX+brVzXUicrnNOEn1MysLrVJklEfGWrLuS2U2OwnM/bN12bStdd/aHJiSHLKHXBqpp1k5byF/QgeBNG4bvzeaUHNB7RMt56PKC247q3RlWQ/ZTj+3YdtW2nTxLFGniq156ZYj6CbgjOL72e+kQNLe89i0f/ICmGem3wgruoV2iD/TeV1qfjNz7mU8qgRgoqRmQRbJVfJjWZkwcSohpGh2wfIcx5wTuveSzQ8ukjrHWHzc4X2h1BCcazwDf66tVMI9jtDkJibdZrzDCE0XMFxtjFjkJf6zzfle8IIMhz3ZKMR8fnXI50uQozbEpN5Q8WjUpoIofiA39ywUpLmzpN26pm/pgnbPmMXwMy9ghOPbCUs2FwWxH9Ej8+rzJKcmHNoIcuM0n6k/Ouq3HK6FuTEUOuMxu4AMyuuTF26GEq7knQMRun1OJ/vZHJ9NRtbITZDr/5mCSotVz00hf6SmgqDpfsLPHM0PaDnubsuKTK50h/GMEpHByBLwkQFiEFY5Q4NnLd0a5OyJL4vGBp22l5a+hBA7hJtLvY1+LXF6ixph/MoIuMO/Pia92FCoRWirf1WwqquWakTMVb4koiHImamXyvWRRVlPmjG716AJpznIqA6Z/kt0cprCymTJmKMqVKfz5AABnKYTXs2EqhS3pcW/u+0tkQmv5Z45AdoBfyvPnsF8DbadzOxD/xwYGZFzyxERhUGe3eKczcgqeodyyDXzksZ4ghJXpDU5G8lK2XoxaM2Ec+TL+4QrLy78fY6V+F32cmijoaQAkq+iig4tMdIuNE0WaCO/8ca622R28/f6s+0LaKo1dx9mxje1Lq79TmOr0OnoDFz4jK06IpNSw/+ft/jSPKCyU3zm3Sb9T8L/xmwzn0YFgzGIt6MCffYl5FXD+T7rhSQtjfDFYxm9LpjE3TZI34DTkCLl870il0vva7fJm922t0G+8yBd6wwBHyUHy8uCuFXS4G4OgMkcmf9j+7btBNWM8LwyKpMBcLKdxDvrzdx2Y0b/kUdbDXqgstge6uRIEecYMyeRsUqiX7cNI7xM6DNI4STFj4nGJvTqa7/xascbfqy5JelebA8DyKC4Q4vjrsiHQ1RrjEb8X69LveamJYly/7XEzvXMC/ZfFCAJ++xFXSkhngs5pxDMKYobsYSwv+iUCH38Yr4hZCAXrXvVCaQamInTwHicyfwKfqi/R/fZTk4gdVX4hNdhRGd2/uiLCys3PqXuYWOlpgKwBlujOEHn08a6sdZ2nNr/XcDDGdxCvoAQVViE6ibD7iwH+WggqnsBgDReoJlfOJjRJNsHoN+2mFwqdkl+JG25GJJubfCCfCUNx3hJE9yVR5DQR5+GEqndC8lTFM0pVt8AaHo6tk1cV4ad8+ZRAcBKo9W8fTrnO3XWkyo0n6aR+JjuR5GhMkaPtjEmtZvJ1b+DwcaFnZZ9itvqSC7nwDdQxP9AUTCDTlPxHh7bKm8gRWiclQD0KhE00Noj3BU+NOLnp/4OYg7xcO21YTgX2MC6a/J3k57WxZ13y56eyNIUFmnc1s3z50nrpeVULx3zUlh2ePHHTc6f+0ZJjtcVmuWmqhawIrEFYuPt6Rn37xkyRF84p9NaVIEy6oZ+Blp4Rusz6h3PmJYgHDDSCCkTux8ZVWjwOSK1HIxuJhUUtY9ACFoMDTg2wNHuyEQBkUtUTix1f1dJ/X9ZKD7orcBUGLfgSAFHBh7Eh4mbwixoTxdKZ2AvDPjIZN8nS0UWdOXhOnu175wWDAruYy4XXZobFWZplG79hht5seShUDm6wDTfRnCt67ulF0E7/mAMkK7v+FXdW5yuDtH/zKJjntOwRQVwAsHxioUSZRWcfK/j7kB4mubwSDSdyPNDfiZDnrNPvPjZJQrwer2gZxMRpcpjXTNDcHVXvQPmrHTb570coDESFt8WxaWj8WaNih/aVSOPOOp1u22HBgL0bcCy8+UX9r+A/qIKjFTWHETnMjfYkYnwCDr4apmsQ2imLVjP5i4g4ungWOrQN2ayj8irb3o6iigHSy2Ci0JhKH0EQYcQLjUUG7G3yfTshhvMHPzv1haCgDoQpxrEgaMkUCcd+d0pKPR0wWE7hBP0ZH6RoY+Vrc6/E9jMNkyd9NmQ5kft98Vj1xJlIlkptK91/Gv0/c8LrWtbIpxVkYI6q7Yx/t4CDZ9CR3n9q6YCvg+4lNy29JToSYjOvSzhwg1vZAuBf3Gu3GO387gv5DptWlGdqJw2c3Iue3cPktRuB20PI4dUqrEvgslhFYtjEbGGbWnVGWBR4ut7loKmemDWCRTos89s8SC864G0UGpShdeygwxb7l87tf7DFq3eHF9Z+cxUs6Yorn7pbEWL0d0DbWnv+0Pa72CjZLrelB9+/IFPKyoIJLJMFffkAdizWM3VQaMRFITR6LAmbvGaLUjXTKlyC7a4mqFOAYQCF2up8WBHgcFLUCcJ5T7CX512Qe94PX73uqfzyN6mXDEtRHb5LFcH7Ag7dnDmrR+ppBNmWunX0Gn4WtdeegfGlwziscYbNbHuDnPsCsURTHE0afjEORpHuaVX6MpgZvg2+ISh+jFLENo8hHsu4+MzRyuCl+bjg8fFYfchdB974vxqPDkcA96T9UFquSxfagauvej4XaBQcW8yFStihwMKdNJObIn/eQui0H6ZTR1zMWY7NsymYSSBOxuMph5hHrARikHRKiG5ph/sZVjuXlIfJtvN1cj4Kzhac2JQvbKa/dcBQ5N4l12xpRE1PJesR62AXn8reFl4czDBx2xuQMPsM5FOVpSOlV0CnZ6s/nF5gVjVexscO0Bqbus/xCWRQJQGzfKNVe45TT8tKfpS8CgsxpxROCWTqtSGfwUN7o6KYDItI3EruwDBrdSHUl3Ki/ttxsUIGJIMDMzctg/Hw/9kq4hs+VI4AiXm9Q8Ld/rCnRIlFdx5N8ed/CXXKWDkHr4SBeXE0TTuIdcJ5S02jdnqKG6j3nNbCLRr9h6lBO1msfMZx/l+CJyvyWNoafwyUjWMYziB0q1euKk45G6B7y+fiSDADHhvvKG+stzlgvAA477fqGOPV33niNdBAOryBLSx8v3XaM7j3quCTz1gs13atq4T18VWa/Z7Js6hHNUmofWEKV+vgYCMxeaHrS227ClgLhCZTO2W9OzvbR4DGrMrFPZWpiDByAjUiwST5wy0yLUE4HEePcmeOTC4eepVo6N13GjGblOMCiEyZyN3tp0oj02bCuLLJEfZ0JCpy20GwaOC0RbWdSB3Ctbjt6O+WXHDq/WaZ8dse7JiSixULHZL4uXf1eWw14cj7L9oMN3nhTxsl0Opgtgl2MIJ0eGTXTfaHYUAyHad3mTJNrLfn7IcQ7C3JNgusv3K6w1ysTEgUNBP1B0vaG2iUQpQefnS9L8+MlyKoxGyXJ8TR7YZEo7fO/O1n9unmizKzRDyoCB8yfvC5qCUlNiM1F9WoH8JQTgEJxXE8aDnLwfnxCkpjuKxt18FtSgZLfUGUj2xO5kztU2yoerpYIhl0gfOx3pFKh3+uQ1yslCOzsfk0FsSp0+i1bEFWZ0rMPwqhPF6v2LG3AvH7oY8wDfHoUoRKNRfuhuuCHWo7PjE6gPJlCKO40R+3Ld+jsoJ9X3L5f9BBsTzS1sc3qxLKLvht0P0giQl5P15IlejJgvh33givcq7jNa/Y8FrISMY9VyfIdpm3ESCnkhJZGqpCHAM0uG0F01ZAH3d9JqzcvVvgenSHs8IumN0XfPxnC8PzxEqLcDOpSHfOuYABTImIV4AVJZw9HxdtqWc1JWWP4JvQn2AYM4ySGVk5+kieq8tdndBe7D+rNKw3OSYChIh/WnSSTpPUx7YOy1lBMTSx8t7JwZqswjK4245OubDJPdY/Kdp1ojhBrUZqHhbtACghk1L0+vpyBDYFlB1U4Lyd0D5B3hptA3sGmP9UCiBVBNYLppMg9c6TDhkQ1gj/l469vF0N7qV/w1jhHqZSnHogC4j0m2rLKnSRu7bBeRMwVigSeUivMNhvUaq6B/iXohKCVF7QOPU98UT1R46sy0luFbI7aww/3Fs87abehMfvwSyVvjAPWsuqqov9wK5WwMNXo+uEUbrZ9VNca9mZWeGw7kLsaRnEbzK1ujcU0DRDJdppMWHjoZCE0zcuqOtDYR9osYRetwNKw3nks5x7oh7KGbiH9uH1jtGB9XVu8s1COuAkK9JNB/M2rOgECm+DvugLLl9XHk8is5LWtx5lJNdYNThsORX6w==
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Encrypted</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Code Contribution</tag>
      </tags>
  </entry>
  <entry>
    <title>初级程序员可以在GitHub上贡献哪些代码</title>
    <url>/2019/08/27/Encrypted/%E5%88%9D%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E5%8F%AF%E4%BB%A5%E5%9C%A8GitHub%E4%B8%8A%E8%B4%A1%E7%8C%AE%E5%93%AA%E4%BA%9B%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Sorry! This is private, you can access others." />
    <label for="pass">Sorry! This is private, you can access others.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1+sw0DlQyi0yKt49YBlRszwfmlAlDPQxLnwHxYuJMUoQyYG4GjTrfRcKxlFW75dAtg0zRnjwVATEQiK00wtMKReYi+HoNsq3ybwh8WsVz5qaaTKFnD02evMisTVVILZHraGfXjukX6whQfTwKuu1RDyaw0XbdOv48bc53X+SExIe0bruTR1APz7CoI3/4TMfYcoyOCzWSF3k0juNIBg8Mgn6W6twVvfIxo3DA9sncQfjEwP179FVZyMs1EQ8mqggS8Xs7d3b3PsNjD4Mgwtm0ZVEZE92X3vy/Qo1CkH+W1D3n+IAjZJ52sbxTMcjOMVpgFp++gT2MQXoZGqpI91QL8d7sNIdqqX1DXE25byCCZeIAOl/KE9nQp7G/CzbmPxD/1M0+zqhgvv088gZGO0CRXg829mx6RASeofc6M1DQEKKfx6DlQt9EuxnjK/jsQurqyalEuUvCwiBYMnhaCi0eCGEssr9RklJ2LUDLPgzAC6ugp3ZUk/mepXb++RZhgmdAwGPOT8LTfy44hBZ+9zozn2K+q6lewQ8pYi8ouBG5GRWNaGu8tDYTKlxZ5wUzPNq/oKvewnIIJRIX8vbCBMWa065vMLNjfDZD0zr9897KJlvJAnGvvr0NmfjV+AwUH8g8Zxl4d1+U7CiH7GvUIjs7ssDVXat9QYCqWuHz5wu7hcMBJqNc+Q1fliDR1Wg7ZG+jscA9MWerJjDjT2w/EJrBzVwNi/t24IINhbHOuEq7SpHbzeYsMyfahtxXsU2YVDOgZOOoHsz5r4q8drW9/gmWFZoMkbiaFGaFDAQr+pnxJ2iKR8jfgspAxIFakX8LWfkn9SsCf00dtr+EpUiL9s1myzs3yKDF0eyLTCoxYX1RWkhi8CT3BlKSZbuePt0p15AwQ+X3oD6lF+7FnM6iea2qrJYwHIVZLiOa+i2OhnZ0RzDJVFkDBGUtblGUAREGFLEJT8TFAPTfx4UncX1Bj9vNn4jAbBwT71c3n8VbMZuAzeevxXZTC0iaXbZ0xzKF2cbyEHqPRKqt59hhQvYpxx5/9u/PpYb7fW0AToV3jj2UcYrRya3KzmlYJTipmX26jIjUOm0Xj6N2GCYW40hV/tGzaHzbibdGp7qEf8aIv2zpG/wvXIAWNEt66WS32oJ3SrWtpgrZAQEX7Kt+APbNjkYsDfA0OJ5TWmVeclgsyCK5dhg8GiuopcyZAhL7d/pmN3dY9P6aMaBIXV5nfKDkOFoid4tItTqCPiU/h+q+NJ1x1wkYoUZ1WibNKQhX/12I6eQyqe3RfxVJ+i7u0ShLMxQ0u8oGhgvpISgpkofwXuDIDBXUnm6RfjCM4K1JkYWW/zc1uUXHQXu99tqiaTUI7kkZGr+qgPrP1rJEwRMeiVO6UFQbMeYhvjNGpoZVcg3htmqQ3D1XYpJUfBt2pWhzsfHK2CZI2j7VLuLI2Ps6FBSmgCbhaBDFNqVdmbVCbNQ8n+xoIaiSwuSK9khDLDjHd90OVtsrS0MUjqaDvEq6hVOny7R8AR65NfTeHZS4r+Wf5ZO8Q0wDNEvhdfQVPsW/At2LZPk8LeVUBOLQchzgvko0NRbiPq4DvzIFdmcurrMP2vWl0c1SKAifNUCucLAvYY9lsmHH6j2oC4sd7mvwZsPKMEfjBeWNCiHvHknLZ1/UwPxu+VhKkXKBYqLXDZdj1kDyjm6QcINSudFnraGtDrig32v7TgzQFd+YO7W0NJQkeLTwuzbhkHr3SH6RjeibLU+mKg1udENb23oYWtVN2I6l6fOAMoDHE0F2BU7qsqaetDmYdofj0K1cyoOla21YSGwVeLpk3khnTu3+zg7CSPDuGPYKNoNK1Enjojb0x7H8TZe+JO3vvEZat8MUrthpGsc8ggF5LmyTds63ThLaKpC7u55dbkO1HpJMD2wrWraJTuKMlnYDGJIiXHxAPv52qyb3lhzaKuBHbuvr456/Djo/4Mv/MG/U5Bp+5p4CXmwHJdJICZosIGNJKurV16m2xW9if+5EaFt8+lb9lIUsIFXac+VA/Jz2rAcliclgWoENfHoDKCvWWx0ApZzNEi/Xq3wR68j39IueOwsX9m3tzkPpzL2Y9cWbDeGmbSffNiED1IGFBpMeO4T+o2PqK2G5/Ce5kvO4dWsM+YzzfAUODXJD9Ols34nWJEkMOyHaGdrj181d0b23jxiMmHD75grR/Gz1HdrmvJ93/W7TJkGDH8UbTF1dbWjfnO7cEbHFHFN25ekVrpr8SXlBXNdCPTGcNfYv9t/Aetf+f4xzCsT/YhT5HCii9MR/IC5e2Foiyy2C1WRchsHks7D/edCKJR9QngDXgy9AinKY3hF77j1RNridrQa5aBDsYdqC4gUV0fmmHSbHmlT7jclpZIe3wYpSueMvMYxsA4DukYl8dAC+HWEJxDZa01+iC4MuUeLeh+GBGrWuQwMqiuJGZ70huCt8k5tiCI3tku01FXdU6qKKwjRHpydX6XBLkXWvNFCCqlXHRTUKrzMaBabGihdshuYXFColI3EtMW9QPeHoG/OixZbvdhyWeNykDRd6V+N1H8LUzmAZCLEi5CtbCE1GZHqyqF24Gvb/S7NnibXCEk5DpS4b2C3Vm3+9VumPYoJQT9ofqHBMq9CwNP/9fZP/sANyztyPAKn9D2OkJV1I9hn3hzHgluvBnd4mHeX8obTmTBGRguabwsC7xOzwYP4h85Ch9lGcqOfjx3wXNbrJF3lJXV5c4UHhYSfipjauGg3lQGLaZy9k6pt5MbS6466KxH7wKaJLSd+n5klwMtRdc6m7Gf1CI5Byi6TaL/7gs45aiPhplmAbrnVjRVPDNK6CD8xoXyL1fjFAirh8m5ztuKRyMnGO01nB2aFFVZhpPfQupNtwZUZ2imsBXf/1H5VmC1LIQF+P3r5+CYM22mlI6hoO4lVnI77GLNHLWcTlpnTfH52NRnmdh0TOdeg1gONXT/S8UsgpQyCESS/v24G5unEojTW4kkUS82jRp+WA/lTggx+jIOMsJ3dsjHTs9AqRQ+GTFljT/5GdyV8JVA2f/4fKfi7ugyLqsPR4cXtzjxQe+9PJTNdCAU5I3IohlT/ek0dZ99TFFiuNCVojdACi8/DrDCBsT/DIWWzQnwoTueNta7/Q3Q6x/WPnpPnc8HhgqgiTB0RVQ1vG6Fz6Vja6OBfdxWjJnvnZGwMWG03Nk+QgkrB1hkHnXSyhWTEOJ5+e9qDOmG6T3bUT0K+3mxSKCNK8V8IO25fFa208nHpUsUA/4kvR1A0ooNJy2poGwVdiXXIb5zyqm+sbfgM8ljiggyBuu2VbPJwJPVDO9LVXUG1DjMXs2h47vk4XIkBtUNnSGNXJTdVGge7xwwx0foWaQUW8fELa3JIm0c/ISawb37gNXdqWqWiytzwMHGuAG73nQBrSbxbNb7S8mwc1bSUJ7B/IVcja8lQx96ooMkis1gfTbBhyS9lail0p75+DXP2vj91N7i81KMEEDMht83850viXhwyCEtW2Idj8N6oB+jYHKLf/3TV6ZwJizcyBFzGQqoep+5bqz+98UHFKdiW9daHNgqD6VP/aoTBGrVU6W5T60IZqRlK9KF8aKLWSozmlKZjaQ4hxGVgBUzhvGjcp40Ot2f8iX4EaQRJR2ws+jhvlwOgivAJDuY/DF9RuYWxoJGObuKeCGpsUjlXwIjy32qcyqInoJmD+e4vaYTVPzjdOXoKSJDMphsQypZ05iq74Wv4j566il2jCRiGyFIB0NpX9RvK7ztf5Gm9HljT8lciTu/QcZHIIXWBaVGZkwTo6iYplOqEr5alxHTk/MTwmySbmREF4AjRRFhWDCodmLF55Jx/CqGXydNln74I03YCSpB9NEdizZ5hqF7AQhKJxntHwK6QXbnYUZdbPUOWyGVgkO4e67EFRShse3TZjqxET2huXOd0yvpnX4lbAHJ9NaARW4Gf00LCc690Rty/c9JEMZBGXJlnc9CHafbLVMJnRFfK2muiO4ON2fm3R67lusFGfun3xImFmICcUAHnxUpDxme8xN+6FCBfeGGRBsv2IzhEqsOkAug8mNb9KkHEMdwTZSo9Zly0kWavvZYWdm1vE7OgOdoV8YbRp/bsufdwu4v+8e9VYP+pgXgNQR6xxHGSJ7wIrjXsS1tdaSWpOhrCR7SnIuXeOu1Z4ew6f5OysYyAF2cJgJxR3I57UuGM7VnGzHwfyEWgVGRxWc9OHJHcEQmYoOwFR9qNfif5l7kNnv73UcJGs47tCWFx1GhkdFmM9cpsdO40s1R7qHAz6biQpJpgTU1tNJDp5M0gpF8luW+Ikpe0fkArDpaI6rokud/L7mqFNDYA2AptZQSLAwB8zJsx4zLAXsRUcRfULCKfVp9BBSkCELjUTYOo/qKISxKK8zso0Q7IU6pRYh6iE15t+82ztQdgZrnAGWuOmX6+NxROynb4C73Bq8JLfrvcyaqkFCakqUhD/OGcDI5cQ9WOvetiiGtWz5tMUF3ZHIfg0qqo3M5zE2PCxVCtNzZYxve4GnBbsPN1U/SmYXlq9YYsRniaOiD4z5qMHHiq3O2lOid+Hz7+ZYSO7uKVsokZ7ANAyb5Vt3Dj4N94B2qpTlnhTeUio16EqOPciKssoG8dvtzZAIED6j5XQd5Tw4Soki7BKz13GKlqdXw0Gtuxru623knKp4Ui+kUEV5wGnxgLAS9EynHCzDkBMzlaKF8ARa3THtqtejO7W0+HyI8tq4ggerZOqVyimCuPcl+DhCGsOqPNlt9HfpBwZPeypte1pEQ8zNdGgqnxSYU+VGIaIU0xAmicwdMDE3txYOZmDyp0y7/SBiAT9zSjoQubJlnRM1jMOwLSgmeuyOMlyshTSrTmU12odSNhDXsJ8iY4cmS+wunvshzZNL7Y8LL5Y95Ma4KXEjldA1tYaFQKRtdaXpsNoiaKLETPBJb6JzNnkL9EekFiQkbyktuBTsoBKcFm9o7iB+AS+uFc7IubFDBa4x2rdVNLIBFJ7EmWnITBI0GcyWYkximsEXLL+9gW7fZhuqRtC46/vOoNggE7mc5D6ir3pRPOfUMjvc6JcRs3v2y07zwjPPTwB04gjvH2a/Ve9WlECLbJ0VaT+YUZFLsouzcrKr/subekbZg0rnQDW8VF5mmLWM7xvHZ9eqdLonANLfBFsOItuICuF6t4SEPdo/uVnt7iUUWcbqTutXWCJslXNEmSUlf5oqGL+iMPJgzorkrmHaIWyOfcbJSY/6dlMSo4oSLPZSCfuaXye7YPTL7icOuljtHzhZwZiTPYDdEOTlt6N+m5C7hOCEuQ9/J4oOYnjaM+BdrKgGKPJLvn6looNqpnENp+oexv7qBpTRuNxsmh7QI1T9zCtaRyes7xAFnSygm8NVqtwKWE6sjU7MAtle48huRaTjeXCOpRg07zJXxz2KQG9cyzvASTkZFhUzxsObJNWtoElyNieRoUrGUFoBwni6a+XTsucH2umWCgXnHZTgzWpTwhz7o1X3P4SSH6CT/efhBrYxj9civwLemz3io5d6sQTUQPtqnTwqNu7mNSq/X0kq7ajwkvWk+gKYhLiNQYVpV2RoAAMzp0EeVu/xcckbC68c8n1NEsgIsDpJkX4EJr2TTGqDsVBWWcCL4Zz9IBQiYB/tS6UpuFeFRYyH9GW+3ldIgTPIxtXj3gwDf+f9tVASPCbdC65HSfXcaQE34A26OV+fGlGct6hL0ymaVoCl90hGNYaQtet0l5kh4dmAffV/PrkgXdgEYXXPyfCjrg1anyknD57LGudyO5Z3JY5TJN5tnsGvFr0c3qJlMmGxY8wI1jq1YtpQgbEJT1Eo8QHPH9Ni5q7JybWxuyYWOWrjT47m/xKsP876GlgVRKZomLyx5ymCHbvdn3kFaSdRXdmQzuhOYrI47sJ/Pe1W2fO89qjZFxaovflk8RuxYTD8WPkUHpq/zNlRAan3KUfaZHzrVq5/fNw1C7PkFr3bxcFePoZWPHLqYDDGM4VDQ1tImJVWJaKAHPZWyOJ11FhQqljxRjp3VVdr2OEYtGVG3lSt6mm9t1L3VGeOGVYBaJ8FQT4xaYF2K9FmJzu0bIHI8EFNA9Lyp1hr2p2c8KiDyN01gxw+aoiMB1QvZdspBwZJVtr1ozhgETsZgbukrw4q7s3T/F0LPyVBGkt+E/ZU+GNxJLqHjG+oKhO/NDzoLk8e8rG0WNRDwQJFWCR0bGeRvJyO/Pb9BTeapHy0PqMVNADEyl6I0xwPQt54LNuj4CE4TfqDuX0eWRpoWk+O7oY+e+vVgKijgpMENUkgOanjv6S64z5bKL/1ui3zlG5yVANFGoRs+qxXvG3Mv0zvEmQI/0B65Drt6n3nza2LLvKVqOBOS8/iYTL/0029e0f6WWuPbRoksMsyOiSHS/ZSkXBFuvLf81cOexyYPCSyTexCq8MceBzPQ2wCfFDcqLlAELDrLVmFuvZElrDpjvB4GiqT3WNK8lzPqIePWhMsbw9roa1/8vRPajte74XHJudyvBhE5huTJBnFR+Q9p2R+6r9Begd+Ogv89IIQ50StwTUoRvO0BdTvyLizvgH3YLoPJT4NV8xtRhvBdoPHTBBTuUp4YJKSqW2UDQfaXPorxCY2N+/jybOVF0wDaHicItPUX6zIUj9ov7pjsqTY2p7g/q+By//JqoAKJKNru0eASsu/xetyf3VLMVbjgsE5La2i0n19fEZQBPTk9lGeawSX3U+dyztbkvY/UII9g3nPJ7pY1PT/Ffd1NKwLvZBtvhdqYQWlp6YiT9cSBBwaFyIk9gm0WGFBAcZ0vVL93C3MlmhxJZvZra6mb/QwMss9XNAX/aJjHOjFhneTXGZui14ePdskmG7h9HIUgvoefLIQkAdfRylySxzqiEBfwoZKmHUo=
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Encrypted</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>贡献代码</tag>
      </tags>
  </entry>
  <entry>
    <title>域名和服务器相关的操作记录</title>
    <url>/2019/08/27/Encrypted/%E5%9F%9F%E5%90%8D%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9A%84%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Sorry! This is private, you can access others." />
    <label for="pass">Sorry! This is private, you can access others.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Encrypted</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>Git—GitHub常用操作记录</title>
    <url>/2019/08/25/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/Git%E2%80%94GitHub%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>本文以一次完整的实际操作需求记录Git命令，在此之前需要配置好<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>工具和注册<a href="https://github.com/join" target="_blank" rel="noopener">GitHub</a>账号</p>
</blockquote>
<h3 id="Git基本命令"><a href="#Git基本命令" class="headerlink" title="Git基本命令"></a>Git基本命令</h3><p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/git-basic-command.png" alt="Git基本命令"></p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/GitConcepts.png" alt="Git概念图"></p>
<h3 id="更新fork的远程仓库"><a href="#更新fork的远程仓库" class="headerlink" title="更新fork的远程仓库"></a>更新fork的远程仓库</h3><blockquote>
<p><strong>假设：</strong><br>① forked from 仓库地址：<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:company/project.git<br>② 自己 fork 的仓库：<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:username/project.git</p>
</blockquote>
<ol>
<li><p>添加远程仓库到本地并设定名为 upstream<br><code>git remote add upstream git@github.com:company/project.git</code></p>
</li>
<li><p>显示本地的远程仓库地址<br><code>git remote -v</code><br> 添加成功的话，将会看到如下类似信息：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">origin  git@github.com:username/project.git (fetch)</span><br><span class="line">origin  git@github.com:username/project.git (push)</span><br><span class="line">upstream        git@github.com:company/project.git (fetch)</span><br><span class="line">upstream        git@github.com:company/project.git (push)</span><br></pre></td></tr></table></figure>
</li>
<li><p>fetch 远程分支<br><code>git fetch upstream</code><br>fetch成功的话，将会看到如下类似信息：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">remote: Enumerating objects: 76, done.</span><br><span class="line">remote: Counting objects: 100% (76/76), done.</span><br><span class="line">remote: Compressing objects: 100% (4/4), done.</span><br><span class="line">remote: Total 166 (delta 72), reused 74 (delta 72), pack-reused 90</span><br><span class="line">Receiving objects: 100% (166/166), 26.84 KiB | 37.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (75/75), completed with 43 local objects.</span><br><span class="line">From git@github.com:company/project.git</span><br><span class="line">9410674..abb35b6  master      -&gt; upstream/master</span><br><span class="line">0130b86..481332e  release-1.8 -&gt; upstream/release-1.8</span><br><span class="line">0d988d6..2d9c4e7  release-1.9 -&gt; upstream/release-1.9</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并 fetch 的分支到本地 master<br><code>git merge upstream/master</code><br>合并成功的话，将会看到类似的下方信息：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Updating 9410674..abb35b6</span><br><span class="line">Fast-forward</span><br><span class="line">docs/dev/table/catalog.zh.md                       | 366 ---------------------</span><br><span class="line">docs/dev/table/hive/index.md                       |  16 +-</span><br><span class="line">docs/dev/table/hive/index.zh.md                    |  14 +-</span><br><span class="line">docs/dev/table/sqlClient.md                        |   2 +-</span><br><span class="line">docs/dev/table/sqlClient.zh.md                     |   2 +-</span><br><span class="line">.../test-scripts/kafka-common.sh                   |   2 +-</span><br><span class="line">.../test_high_parallelism_iterations.sh            |  26 +-</span><br><span class="line">.../runtime/taskmanager/TaskAsyncCallTest.java     |  14 +-</span><br><span class="line">.../functions/sql/FlinkSqlOperatorTable.java       |  11 +</span><br><span class="line">.../planner/codegen/calls/StringCallGen.scala      |   2 +-</span><br><span class="line">.../planner/expressions/ScalarFunctionsTest.scala  |   2 +-</span><br><span class="line">.../planner/expressions/SqlExpressionTest.scala    |   4 +</span><br><span class="line">12 files changed, 53 insertions(+), 408 deletions(-)</span><br><span class="line">delete mode 100644 docs/dev/table/catalog.zh.md</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看log更新记录<br><code>git log</code><br>将会看到类似的下方信息：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">commit 0e2eac4a39e1e543d8d79e607be117207b3fcfdb (HEAD -&gt; master, upstream/master, origin/master, origin/HEAD)</span><br><span class="line">Author: Stephane Nicoll &lt;snicoll@pivotal.io&gt;</span><br><span class="line">Date:   Sun Aug 25 05:08:17 2019 +0200</span><br><span class="line"> </span><br><span class="line">    Upgrade Java 13 version in CI image</span><br><span class="line">    </span><br><span class="line">    See gh-17839</span><br><span class="line"> </span><br><span class="line">commit 7d994e607d33f9b53c9d7f6d3ee71b77ed7b4dfb</span><br><span class="line">Author: Stephane Nicoll &lt;snicoll@pivotal.io&gt;</span><br><span class="line">Date:   Sat Aug 24 08:22:28 2019 +0200</span><br><span class="line"> </span><br><span class="line">    Restructure tests to exercise deprecated property in a dedicated test</span><br></pre></td></tr></table></figure>
</li>
<li><p>推送本地 master 分支到自己fork的仓库<br><code>git push origin master</code></p>
</li>
<li><p>去自己 GitHub 的 project 库中核对更新内容</p>
<h3 id="merge-失败，解决冲突"><a href="#merge-失败，解决冲突" class="headerlink" title="merge 失败，解决冲突"></a>merge 失败，解决冲突</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 查看当前状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git st</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 借助可视化工具，比如IDEA中的Git工具，项目右键Git -&gt; Resolve Conflicts，接着在可视化窗口选择操作接收哪部分修改</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="修改-remote-仓库"><a href="#修改-remote-仓库" class="headerlink" title="修改 remote 仓库"></a>修改 remote 仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 重设 remote 地址</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote <span class="built_in">set</span>-url origin git@github.com:username/project.git</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 将本地分支 master 与 remote 的 master 分支关联起来，有下面两种方式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ① 设置 <span class="built_in">set</span>-upstream</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --<span class="built_in">set</span>-upstream-to=origin/master master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ② 从本地强 push 到 remote(慎用，可能导致远端代码丢失)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -f origin master</span></span><br></pre></td></tr></table></figure>

<h3 id="项目太大导致克隆失败"><a href="#项目太大导致克隆失败" class="headerlink" title="项目太大导致克隆失败"></a>项目太大导致克隆失败</h3><blockquote>
<p>在克隆一个项目到本地时，出现下方错误提示<br> error: RPC failed; curl 56 GnuTLS recv error (-9): A TLS packet with unexpected length was received.<br>fatal: the remote end hung up unexpectedly<br>fatal: early EOF<br>fatal: index-pack failed</p>
</blockquote>
<p>这时应考虑在第一次克隆的时候，把克隆深度设置为1，然后再fetch，操作如下：</p>
<ol>
<li><p>设置克隆深度为1<br><code>git clone  https://github.com/username/project.git --depth  1</code></p>
</li>
<li><p>进入项目再fetch</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> project</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch --unshallow</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.1 如果下载时还是失败，可考虑将 git 配置中的 postBuffer增大一些，下载完毕后记得改回来即可，具体命令如下：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim ~/.gitconfig</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 在文件末尾添加下方内容</span></span></span><br><span class="line">[http]</span><br><span class="line">    postBuffer = 500m</span><br><span class="line">[https]</span><br><span class="line">    postBuffer = 500m</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="撤销命令-git-reset"><a href="#撤销命令-git-reset" class="headerlink" title="撤销命令 git reset"></a>撤销命令 git reset</h3><h4 id="Git-和-的区别"><a href="#Git-和-的区别" class="headerlink" title="Git ~ 和 ^ 的区别"></a>Git ~ 和 ^ 的区别</h4><p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/Git%E4%B8%AD~%E5%92%8C%5E%E5%8C%BA%E5%88%AB.webp" alt="Git ~和^的区别"></p>
<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul>
<li><p><strong>–soft</strong><br>不会改变暂存区和工作区的文件，只是将 head 指针指向后面指定的 commit 处。同时将离开你待提交的更改文件，用<code>git status</code>可以查看；</p>
<br>
</li>
<li><p><strong>–mixed</strong><br>这是<strong>默认省略</strong>选项，重置暂存区文件，不改变工作区文件（比如已经保存的文件，但未被标记为待提交状态），同时会提示哪些文件还未被更新。<br>如果选中中指定了 -N ，那么被移除的文件将被标记为 intent-to-add；</p>
<br>
</li>
<li><p><strong>–hard</strong><br>重置暂存区和工作区文件，自上一阶段 commit 以来对工作树中跟踪文件的任何更改都将被丢弃掉。</p>
</li>
</ul>
<h4 id="撤销本地的-add操作"><a href="#撤销本地的-add操作" class="headerlink" title="撤销本地的 add操作"></a>撤销本地的 add操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD</span><br></pre></td></tr></table></figure>

<h4 id="撤回本地的-commit"><a href="#撤回本地的-commit" class="headerlink" title="撤回本地的 commit"></a>撤回本地的 commit</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 撤回本地上一次commit</span></span><br><span class="line">git reset HEAD~</span><br><span class="line"><span class="comment"># 撤回到倒数第n次commit前</span></span><br><span class="line">git reset HEAD~n</span><br></pre></td></tr></table></figure>

<h3 id="git-status-中文文件名正常显示"><a href="#git-status-中文文件名正常显示" class="headerlink" title="git status 中文文件名正常显示"></a>git status 中文文件名正常显示</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 未进行设置时，中文文件名会以8进制的字符编码显示</span></span><br><span class="line"><span class="comment"># 这样就可以直接显示中文名了</span></span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="修改上一次-commit-注释"><a href="#修改上一次-commit-注释" class="headerlink" title="修改上一次 commit 注释"></a>修改上一次 commit 注释</h3><h4 id="未-push-到远端"><a href="#未-push-到远端" class="headerlink" title="未 push 到远端"></a>未 push 到远端</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入包含 commit 内容的界面编辑</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 更新第一行内容</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 依次按下 ctrl+x，shift+y，enter，即保存退出</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> 查看 git 日志确认更改完成</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br></pre></td></tr></table></figure>

<h4 id="已-push-到远端"><a href="#已-push-到远端" class="headerlink" title="已 push 到远端"></a>已 push 到远端</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 确保push的时候，已经获取到最新内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> push 到远端</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push</span></span><br></pre></td></tr></table></figure>

<h3 id="未添加-gitignore-时"><a href="#未添加-gitignore-时" class="headerlink" title="未添加 .gitignore 时"></a>未添加 .gitignore 时</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先进入当前工作目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> workdirectory</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清空暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm -rf --cached ./</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加上 .gitignore 文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 文件中写需要被忽略的文件名/类型</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看此次添加到暂存区的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git ls-files</span></span><br></pre></td></tr></table></figure>

<h3 id="删除远端分支"><a href="#删除远端分支" class="headerlink" title="删除远端分支"></a>删除远端分支</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 需要注意不支持当前工作分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete branch</span></span><br></pre></td></tr></table></figure>

<h3 id="分支的创建和删除"><a href="#分支的创建和删除" class="headerlink" title="分支的创建和删除"></a>分支的创建和删除</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch newbranch</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 切换到新分支</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout newbranch </span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 创建并切换到新分支，是上方两条命令的简写</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b newbranch</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d newbranch</span></span><br></pre></td></tr></table></figure>

<h3 id="删除远程分支并清理本地记录"><a href="#删除远程分支并清理本地记录" class="headerlink" title="删除远程分支并清理本地记录"></a>删除远程分支并清理本地记录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line">git push origin --delete &lt;BranchName&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前本地分支与远程分支的对应关系</span></span><br><span class="line">git remote show origin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除本地未与远程关联的分支</span></span><br><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>第11章| Java并发编程实践</title>
    <url>/2019/08/19/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC11%E7%AB%A0-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h3 id="生产者和消费者模式"><a href="#生产者和消费者模式" class="headerlink" title="生产者和消费者模式"></a>生产者和消费者模式</h3><p><strong>该模式通过平衡生产者线程与消费者线程的工作能力来提高程序整体处理数据的速度</strong></p>
<p><em>生产者和消费者模式概念</em></p>
<blockquote>
<p><strong>生产者和消费者模式是通过一个容器来解决生产者与消费者的强耦合问题。</strong> 生产者与消费者不直接通信，而是通过阻塞队列通信，所以生产者生产完数据后不用等待消费者处理，直接扔给阻塞队列；同时消费者不找生产者要数据，而是从阻塞队列处取数据。这里的<strong>阻塞队列</strong>相当于一个缓冲区，平衡了生产者与消费者的处理能力。</p>
</blockquote>
<h4 id="多生产者和多消费者场景"><a href="#多生产者和多消费者场景" class="headerlink" title="多生产者和多消费者场景"></a>多生产者和多消费者场景</h4><p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E5%A4%9A%E7%94%9F%E4%BA%A7%E8%80%85%E5%A4%9A%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F.jpg" alt="多生产者多消费者模式"></p>
<p><strong>场景：</strong>在长连接服务器中，生产者1负责将所有客户端发送的消息存放在阻塞队列1中，消费者1从队列读取消息，然后通过消息ID进行散列得到N个队列中的一个，再根据编号将消息存在不同的队列中。每个阻塞队列会被分配一个消费线程，如果消费者3无法消费消息，会将消息重新抛回到阻塞队列1中，交给其他消费者处理。</p>
<h4 id="线程池与生产消费者模式"><a href="#线程池与生产消费者模式" class="headerlink" title="线程池与生产消费者模式"></a>线程池与生产消费者模式</h4><p><strong>Java线程池类是一种高明的生产消费者模式实现方式</strong>，生产者将任务丢给线程池，线程池创建线程并处理任务，如果将要运行的任务数大于线程池的基本线程数就把任务扔给阻塞队列。这种做法要比只用一个阻塞队列来实现生产者和消费者模式高级，因为消费者能处理的就直接处理掉了，速度更快。而生产者消费者模式需要生产者先存，消费者后取，速度慢。</p>
<p><strong>系统可用线程池是实现多生产者消费者模式：</strong>比如，创建N个不同规模的Java线程池来处理不同性质的任务，比如线程池1将数据读到内存之后，交给线程池2里的线程继续处理压缩数据。线程池1主要处理IO密集型任务，线程池2主要处理CPU密集型任务。</p>
<h3 id="线上问题定位"><a href="#线上问题定位" class="headerlink" title="线上问题定位"></a>线上问题定位</h3><p>线上在不能调试代码的情况下，定位问题只能看<strong>日志</strong>、<strong>系统状态</strong>和<strong>dump</strong>线程。</p>
<p><strong>top命令</strong>（查看每个线程情况）</p>
<ul>
<li><p>输入<code>top</code><br>Java程序应用，只需关注COMMAND栏为Java的性能数据</p>
</li>
<li><p>在输入<code>top</code>后，再按数字<code>1</code><br>查看每个CPU的性能数据，其中CPU参数含义如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>us</td>
<td>用户空间占用CPU百分比</td>
</tr>
<tr>
<td>sy</td>
<td>内核空间占用CPU百分比</td>
</tr>
<tr>
<td>ni</td>
<td>用户进程空间内改变过优先级的进程占用CPU百分比</td>
</tr>
<tr>
<td>id</td>
<td>空闲CPU百分比</td>
</tr>
<tr>
<td>wa</td>
<td>等待输入/输出的CPU时间百分比</td>
</tr>
</tbody></table>
</li>
<li><p>在输入<code>top</code>后，再按大写字母<code>H</code><br>查看每个线程的性能信息，可能出现3中情况</p>
<ul>
<li><p>某个线程CPU利用率一直100%，说明这个线程有可能是死循环，需要记住PID作进一步分析。</p>
<ul>
<li><p>该情况可能由GC造成，可用jstat命令查看GC情况，看是否由与持久代或年老代满了，产生了Full GC， 导致CPU利用率持续居高不下。示例命令：<code>jstat -gcutil 31177(lvmid, 本地jvm标识id，可用jps查看) 1000(统计间隔，ms) 5(下方打印个数)</code>，输出各个参数含义如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>S0</td>
<td>年轻代中第一个survivor（幸存区）已使用的占当前容量百分比</td>
</tr>
<tr>
<td>S1</td>
<td>年轻代中第二个survivor（幸存区）已使用的占当前容量百分比</td>
</tr>
<tr>
<td>E</td>
<td>年轻代中Eden（伊甸园）已使用的占当前容量百分比</td>
</tr>
<tr>
<td>O</td>
<td>old代已使用的占当前容量百分比</td>
</tr>
<tr>
<td>P</td>
<td>perm代已使用的占当前容量百分比</td>
</tr>
<tr>
<td>YGC</td>
<td>从应用程序启动到采样时年轻代中gc次数</td>
</tr>
<tr>
<td>YGCT</td>
<td>从应用程序启动到采样时年轻代中gc所用时间(s)</td>
</tr>
<tr>
<td>FGC</td>
<td>从应用程序启动到采样时old代(全gc)gc次数</td>
</tr>
<tr>
<td>FGCT</td>
<td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td>
</tr>
<tr>
<td>GCT</td>
<td>从应用程序启动到采样时gc用的总时间(s)</td>
</tr>
</tbody></table>
</li>
<li><p>还可以dump线程，分析究竟是哪个线程、执行什么代码造成的CPU利用率高。示例命令：<code>jstack 31177 &gt; ~/dump</code></p>
</li>
</ul>
<p>  <em>注意:dump出来的线程ID(nid)是16进制的，而top命令看到的是10进制的，所以对比时需要转换一下！</em></p>
</li>
<li><p>某个线程一直在top10位置，说明这个线程可能存在性能问题</p>
</li>
<li><p>CPU利用率高的几个线程一直在变换，说明并不是一个线程导致的CPU利用率高</p>
</li>
</ul>
</li>
</ul>
<h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p><strong>常用命令</strong></p>
<ul>
<li><p>查看有多少台机器连接到port端口上：<code>netstat -nat | grep port -c</code>，其中<code>-n</code>数字化显示localhost等信息，<code>-a</code>显示所有，<code>-t</code>表示tcp协议，<code>grep port -c</code>表示含有port的行数</p>
</li>
<li><p>查看Java线程数量：<code>ps -eLf | grep java -c</code>，其中<code>-e</code>显示所有线程，<code>-L</code>显示轻量级或非轻量级线程，<code>-f</code>格式化显示</p>
</li>
<li><p>查看网络流量：<code>cat /proc/net/dev</code></p>
</li>
<li><p>查看系统平均负载：<code>cat /proc/loadavg</code></p>
</li>
<li><p>查看系统内存情况：<code>cat /proc/meminfo</code></p>
</li>
<li><p>查看CPU利用率：<code>cat /proc/stat</code></p>
</li>
</ul>
<h3 id="异步任务池"><a href="#异步任务池" class="headerlink" title="异步任务池"></a>异步任务池</h3><p><strong>使用场景</strong>：如果一个任务扔进线程池之后，运行线程池的程序重启了，那么线程池中的任务将被丢失。另外，线程池只能处理本机任务，在集群环境下不能有效调用所有机器的任务。因此需要结合线程池开发一个<strong>异步任务处理池</strong>，设计图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%B1%A0%E8%AE%BE%E8%AE%A1%E5%9B%BE.jpg" alt="异步任务池设计图"></p>
<p>任务状态有如下几种：</p>
<ul>
<li>创建：提交给任务池之后的状态</li>
<li>执行中：任务池从数据库中拿到任务执行时的状态</li>
<li>重试：执行任务出错时，程序显示性地告诉任务池需要重新执行，并设置下一次执行时间</li>
<li>挂起：当一个任务需要依赖其他任务时，此时可将该任务挂起，等待依赖任务执行完毕，收到消息后继续执行</li>
<li>终止：执行任务失败，让线程池停止执行这个任务，并设置错误消息告诉给调用端</li>
<li>执行完成：任务执行结束</li>
</ul>
<p><strong>任务池的任务隔离</strong>:使用不同的线程池处理不同的任务，或不同线程池处理不同优先级的任务。如果任务类型非常少，建议采用任务类型隔离任务；如果任务类型非常多，比如几十个，简易采用优先级隔离任务。</p>
<p><strong>任务池的重试策略</strong>:根据不同的任务类型设置不同的重试策略。对实时性要求<strong>不高</strong>的任务，可采用默认隔离策略。重试时间间隔随着次数的增加，时间不断增长，从几秒到几分钟再到几小时。每个任务类型可以设置执行该任务类型线程池的最大和最小线程数、最大重试次数。</p>
<p><strong>使用任务池的注意事项</strong>：<font color="red">任务必须无状态</font>，即任务不能在执行任务的机器中保存数据。</p>
<ul>
<li>OSS: Object Storage Service，对象文件存储</li>
<li>SFTP: SSH File Transfer Protocol，安全文件传送协议</li>
</ul>
<p><strong>异步任务的属性</strong>主要有：</p>
<ul>
<li>任务名称</li>
<li>下次执行时间</li>
<li>已执行次数</li>
<li>任务类型</li>
<li>任务优先级</li>
<li>执行时的报错信息（用于快速定位问题）</li>
</ul>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>生产者</tag>
        <tag>消费者</tag>
      </tags>
  </entry>
  <entry>
    <title>第10章| Executor框架</title>
    <url>/2019/08/17/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC10%E7%AB%A0-Executor%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p><em>Java线程既是工作单元，也是执行机制。jdk5后将工作单元和执行机制分离开来，工作单元包括Runnable和Callable，执行单元为Executor。</em></p>
<h3 id="Executor框架简介"><a href="#Executor框架简介" class="headerlink" title="Executor框架简介"></a>Executor框架简介</h3><ol>
<li>Executor框架的两级调度模型</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%B8%A4%E7%BA%A7%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9E%8B.jpg" alt="任务的两级调度模型"></p>
<p><strong>应用程序通过Executor框架控制上层的调度，下层的调度由操作系统内核控制！</strong></p>
<ol start="2">
<li>Executor框架的结构与成员</li>
</ol>
<ul>
<li><p>3大框架结构</p>
<ul>
<li>任务：<br>包括被执行任务需要被实现的接口（Runnable和Callable）；</li>
<li>任务的执行：<br>任务执行机制的核心接口Executor，以及继承Executor的ExecutorService接口；Executor框架的两个关键类实现了ExecutorService接口，即ThreadPoolExecutor和ScheduledThreadPoolExecutor；</li>
<li>异步计算的结果：<br>Future和实现Future接口的FutureTask类。<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/Executor%E6%A1%86%E6%9E%B6%E7%9A%84%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3.jpg" alt="Executor框架的类与接口"><br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/Executor%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="Executor框架的使用示意图"></li>
</ul>
</li>
<li><p>主要框架成员</p>
<ul>
<li><p>ThreadPoolExecutor：一般由工厂类Executors创建，有3种类型;</p>
<ul>
<li>SingleThreadExecutors（<em>适用于保证顺序执行各个任务，并且在任意时间点，不会有多个线程是活动的场景</em>）</li>
<li>FixedThreadPool（<em>适用于需要限制当前线程数的应用场景，比如负载较重的服务器</em>）</li>
<li>CachedThreadPool（<em>大小无界的线程池，适用于执行很多短期异步任务的小程序，或负载较轻的服务器</em>）；</li>
</ul>
</li>
<li><p>ScheduledThreadPoolExecutor： 一般由工厂类Executors创建，有2种类型;</p>
<ul>
<li>ScheduledThreadPoolExecutor：包含若干个线程的ScheduledThreadPoolExecutor，<em>适用于需要后台多个线程执行周期任务，同时为了满足资源管理的需求而需要限制后台线程数量的应用场景</em>；</li>
<li>SingleThreadPoolExecutor：只包含一个线程的ScheduledThreadPoolExecutor，<em>适用于单个后台线程执行周期任务，同时需要保证顺序执行多个任务的应用场景</em>；</li>
</ul>
</li>
<li><p>Future接口：该接口与实现该接口的FutureTask类表示异步计算的结果</p>
</li>
<li><p>Runnable或Callable接口：区别Runnable不会返回结果，而Callable可以。<strong>除了可以自定义实现Callable接口的对象外，还可用工厂类Executors将Runnable包装为一个Callable</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="ThreadPoolExecutor详解"><a href="#ThreadPoolExecutor详解" class="headerlink" title="ThreadPoolExecutor详解"></a>ThreadPoolExecutor详解</h3><p><strong>最核心类ThreadPoolExecutor，是线程池的实现类</strong>，主要由以下4个组件构成：</p>
<ul>
<li>corePool: 核心线程池的大小</li>
<li>maximumPOol: 最大线程池的大小</li>
<li>BlockingQueue: 用于暂时保存任务的工作队列</li>
<li>RejectedExecutionHandler: 到达到了最大线程池大小且工作队列已满时，execute()将要调用的Handler</li>
</ul>
<p><strong>Executors可创建3种类型的ThreadPoolExecutor</strong>，如下：</p>
<ul>
<li>FixedThreadPool</li>
<li>SingleThreadExecutor</li>
<li>CachedThreadPool</li>
</ul>
<h4 id="FixedThreadPool详解-可重用固定线程数的线程池"><a href="#FixedThreadPool详解-可重用固定线程数的线程池" class="headerlink" title="FixedThreadPool详解(可重用固定线程数的线程池)"></a>FixedThreadPool详解(可重用固定线程数的线程池)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">源码</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明</strong>：当线程数大于corePoolSize时，keepAliveTime为多余的空闲线程等待新任务的最长时间，超过这个时间后多余的线程将被终止。将keepAliveTime设置为0L表示立即终止多余的空闲线程。</p>
<p>FixedThreadPool的execute()方法的运行示意图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/FixedThreadPool%E7%9A%84execute()%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%90%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="FixedThreadPool的execute()方法的运行示意图"></p>
<p>从上图可以看出：</p>
<ol>
<li>如果当前运行的线程数少于corePoolSize，则创建新线程执行任务；</li>
<li>在线程池完成预热之后（当前运行的线程数等于corePoolSize），将任务加入LinkedBlockingQueue；</li>
<li>线程执行完1中的任务后，会在循环中反复从LinkdeBlockingQueue获取任务执行。</li>
</ol>
<p>FixedThreadPool使用<strong>无界队列</strong>LinkedBlockingQueue作为线程池的工作队列（队列容量默认为Integer.MAX_VALUE），使用无界队列会产生以下影响：</p>
<ol>
<li>当线程池中的线程数达到corePoolSize后，新任务将在无界队列中等待，因此线程池的线程数不会超过corePoolSize，只会等于。因此在保存任务的队列未超出时，并不会创建新线程来执行任务；</li>
<li>由于1，使用无界队列maximumPoolSize将是一个无效参数；</li>
<li>由于1和2，使用无界队列时keepAliveTime将是一个无效参数；</li>
<li>由于使用无界队列，运行中的FIxedThreadPool（未执行方法shutdown()或shutdownNow()）不会拒绝任务（即不会调用RejectedExecutionHandler.rejectedExecution()方法）</li>
</ol>
<h4 id="SingleThreadExecutor详解（使用单个worker线程的Executor）"><a href="#SingleThreadExecutor详解（使用单个worker线程的Executor）" class="headerlink" title="SingleThreadExecutor详解（使用单个worker线程的Executor）"></a>SingleThreadExecutor详解（使用单个worker线程的Executor）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">源码</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">            (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明</strong>：SingleThreadExecutor使用<strong>无界队列</strong>LinkedBlockingQueue作为线程池的工作队列。</p>
<p>SingleThreadExecutor的运行示意图如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/SingleThreadExecutor%E7%9A%84execute()%E7%9A%84%E8%BF%90%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="SingleThreadExecutor的execute()的运行示意图"></p>
<p>从上图可以看出：</p>
<ol>
<li>如果当前线程数少于corePoolSize，则创建一个新线程执行任务；</li>
<li>线程池完成预热之后，将任务加入LinkedBlockingQueue；</li>
<li>线程执行完1中的任务后，会在一个无线循环中反复从LinkedBlockingQueue获取任务并执行。</li>
</ol>
<h4 id="CachedThreadPool详解（根据需要创建新线程的线程池）"><a href="#CachedThreadPool详解（根据需要创建新线程的线程池）" class="headerlink" title="CachedThreadPool详解（根据需要创建新线程的线程池）"></a>CachedThreadPool详解（根据需要创建新线程的线程池）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明</strong>：这里maximumPoolSize被设置为<code>Integer.MAX_VALUE</code>，意味着maximumPoolSize是无界的，而CachedThreadPool使用<strong>没有容量</strong>的SynchronousQueue作为线程池的工作队列，所以如果主线程提交任务的速度高于maximumPool中线程处理任务速度时，CachedThreadPool会不断创建新线程。极端情况下，其会创建过多线程而耗尽CPU和内存资源。</p>
<p>CachedThreadPool的execute()方法执行示意图如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/CachedThreadPool%E7%9A%84execute()%E7%9A%84%E8%BF%90%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="CachedThreadPool的execute()的运行示意图"></p>
<p>从上图可以看出：</p>
<ol>
<li><p>首先执行SynchronousQueue.offer方法。如果当前maximumPool中有空闲线程正在执行SynchronousQueue.poll方法，那么主线程执行offer操作与空闲线程执行poll操作配对成功，主线程把任务交给空闲线程执行，execute方法执行完成；否则执行下面的步骤2。</p>
</li>
<li><p>当初始maximumPool为空，或者maximumPool中没有空闲线程时，将没有线程执行SynchronousQueue的poll方法。这种情况下步骤1将失败，此时CachedThreadPool会创建一个新线程执行任务，execute方法执行完成。</p>
</li>
<li><p>在步骤2中新创建的线程将任务执行完后，会执行SynchronousQueue的poll方法。这个pool操作会让空闲线程最多在SynchronousQueue中等待60s。如果60s内主线程提交了一个新任务（主线程执行步骤1），那么这个空线程将执行主线程提交的新任务；否则，这个空闲线程将停止。由于空闲60s的线程会被终止，因此长时间保持空闲的CachedThreadPool不会使用任何资源。</p>
</li>
</ol>
<p>SynchronousQueue是一个没有容量的阻塞队列，每个插入操作必须等待另一个线程的对应移除操作，反之亦然。CachedThreadPool使用SynchronousQueue将主线程提交的任务传递给空闲线程执行，该传递过程如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/CachedThreadPool%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BC%A0%E9%80%92%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="CachedThreadPool的任务传递示意图"></p>
<h3 id="ScheduledThreadPoolExecutor详解"><a href="#ScheduledThreadPoolExecutor详解" class="headerlink" title="ScheduledThreadPoolExecutor详解"></a>ScheduledThreadPoolExecutor详解</h3><p>ScheduledThreadPoolExecutor功能与Timer类似，但Timer对应的是单个后台线程，而ScheduledThreadPoolExecutor可以在构造函数中指定多个对应的后台线程数数。</p>
<h4 id="ScheduledThreadPoolExecutor运行机制"><a href="#ScheduledThreadPoolExecutor运行机制" class="headerlink" title="ScheduledThreadPoolExecutor运行机制"></a>ScheduledThreadPoolExecutor运行机制</h4><p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/ScheduledThreadPoolExecutor%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BC%A0%E9%80%92%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="ScheduledThreadPoolExecutor的任务传递示意图(基于JDK6)"></p>
<p>从图中可看出ScheduledThreadPoolExecutor执行可分为两大部分：</p>
<ol>
<li>当调用ScheduledThreadPoolExecutor的scheduleAtFixedRate方法活着scheduledWithFixedDelay方法时，会向DelayQueue添加一个ScheduledFutureTask；</li>
<li>线程池中的线程从DelayQueue中获取ScheduledFutureTask，然后执行任务。</li>
</ol>
<h4 id="ScheduledThreadPoolExecutor的实现"><a href="#ScheduledThreadPoolExecutor的实现" class="headerlink" title="ScheduledThreadPoolExecutor的实现"></a>ScheduledThreadPoolExecutor的实现</h4><p>ScheduledFutureTask主要包含3个成员变量</p>
<ol>
<li>long型成员变量time，表示这个任务将要被执行的具体时间；</li>
<li>long型成员变量sequenceNumber，表示这个任务被添加到ScheduledThreadPoolExecutor中的序号；</li>
<li>long型成员变量period，表示任务执行的间隔周期。</li>
</ol>
<h4 id="FutureTask详解（异步计算的结果）"><a href="#FutureTask详解（异步计算的结果）" class="headerlink" title="FutureTask详解（异步计算的结果）"></a>FutureTask详解（异步计算的结果）</h4><ol>
<li><p>简介<br>FutureTask除了实现Future接口外，还实现了Runnable接口。因此FutureTask可以交给Executor执行，也可以调用线程直接执行（FutureTask.run())。</p>
</li>
<li><p>FutureTask的3中状态</p>
</li>
</ol>
<ul>
<li>未启动<br>FutureTask.run()方法还未被执行前的状态</li>
<li>已启动<br>FutureTask.run()方法在被执行的过程中</li>
<li>已完成<br>FutureTask.run()方法执行完后正常结束或被取消(FutureTask.cancel())或抛异常结束</li>
</ul>
<p>FutureTask的状态迁移示意图如下所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/FutureTask%E7%9A%84%E7%8A%B6%E6%80%81%E8%BF%81%E7%A7%BB%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="FutureTask的状态迁移示意图"></p>
<p>FutureTask的get和cancel方法的执行示意图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/FutureTask%E7%9A%84get%E5%92%8Ccancel%E7%9A%84%E6%89%A7%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="FutureTask的get和cancel的执行示意图"></p>
<h4 id="FutureTask的使用"><a href="#FutureTask的使用" class="headerlink" title="FutureTask的使用"></a>FutureTask的使用</h4><p><strong>三种使用方法：</strong></p>
<ol>
<li>把FutureTask交给Executor执行；</li>
<li>通过ExecutorService.submit()方法返回一个FutureTask，然后执行FutureTask.get()或FutureTask.cancel()方法</li>
<li>单独使用FutureTask。</li>
</ol>
<p><strong>使用场景：</strong><br>当一个线程需要等待另一个线程执行完某项任务后才能继续执行，此时可用FutureTask。</p>
<h4 id="FutureTask的实现"><a href="#FutureTask的实现" class="headerlink" title="FutureTask的实现"></a>FutureTask的实现</h4><p>基于AbstractQueuedSynchronizer（后文简称<strong>AQS</strong>）实现。</p>
<p><strong>说明</strong>：java.util.concurent中很多可阻塞类（比如ReentrantLock）都是基于AQS实现的。AQS是一个同步框架，提供了通用机制来原子性管理同步状态、阻塞和唤醒线程，以及维护被阻塞线程的队列。JDK6中AQS被广泛使用，基于AQS实现的同步器有：ReentrantLock、Semaphore、ReentrantReadWriteLock、CountDownLatch和FutureTask。</p>
<ol>
<li>每个基于AQS实现的同步器都包含以下两种类型操作：</li>
</ol>
<ul>
<li>至少一个acquire操作，这个操作阻塞调用线程，除非AQS状态允许这个线程继续执行。（该操作被get方法调用）</li>
<li>至少一个release操作，这个操作改变AQS状态，改变后的状态允许一个或多个阻塞线程被解除阻塞。（该操作包含run()和cancel()）</li>
</ul>
<ol start="2">
<li><p>基于“复合优于继承”原则，FutureTask声明了一个内部私有的继承于AQS的子类Sync，对FutureTask所有共有方法的调用都会委托这个内部子类。</p>
</li>
<li><p>Sync实现了AQS的tryAcquireShared(int)和tryReleaseShared(int)方法，Sync通过这两个方法检查和更新同步状态。</p>
</li>
</ol>
<p>FutureTask的设计示意图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/FutureTask%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="FutureTask的设计示意图"></p>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>ThreadPoolExecutor</tag>
        <tag>ScheduledThreadPoolExecutor</tag>
        <tag>FutureTask</tag>
      </tags>
  </entry>
  <entry>
    <title>第9章| Java中的线程池</title>
    <url>/2019/08/16/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC9%E7%AB%A0-Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<p><strong>合理使用线程池带来的3个好处：</strong></p>
<ul>
<li><strong>降低资源消耗</strong>，重复利用已创建的线程降低线程创建/销毁时造成的消耗；</li>
<li><strong>提高响应速度</strong>，任务到达时不需等待线程创建即可执行；</li>
<li><strong>提高线程的可管理性</strong>，无限制地创建线程会造成系统资源的消耗，降低系统的稳定性，使用线程池可以统一分配、调优、监控。</li>
</ul>
<h3 id="线程池的实现原理"><a href="#线程池的实现原理" class="headerlink" title="线程池的实现原理"></a>线程池的实现原理</h3><p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E4%B8%BB%E8%A6%81%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.jpg" alt="线程池的主要处理流程图"></p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/TreadPoolExecutor%E6%89%A7%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="TreadPoolExecutor执行示意图"></p>
<p><strong>ThreadPoolExecutor执行execute方法分以下4种情况：</strong></p>
<ol>
<li>如果当前运行的线程少于corePoolSize，则创建新线程来执行任务（<font color="red">注意，执行这一步骤需要获取全局锁</font>）；</li>
<li>如果运行的等于或多于corePoolSize，则将任务加入BlockingQueue；</li>
<li>如果无法将任务加入BlockingQueue中（队列已满），则创建新的线程执行任务（<font color="red">注意，执行这一步骤需要获取全局锁</font>）；</li>
<li>如果创建新线程将使当前运行的线程超出maximumPoolSize，任务将被拒绝，并调用RejectedExecutionHandler.rejectedExecution()方法。</li>
</ol>
<p><font color="red">ThreadPoolExecutor的这种设计思路，是为了避免在执行execute()方法时获取全局锁（这是一个严重的可伸缩瓶颈），在当前运行的线程数大于或等于corePoolSize后，几乎所有的execute()方法调用都是不需要获取全局锁的。</font></p>
<p><strong>工作线程：</strong> 线程池创建线程时，会将线程封装为工作线程Worker，Worker在执行完任务后，会循环获取工作队列中的任务并执行</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/ThreadPoolExecutor%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="ThreadPoolExecutor执行任务示意图"></p>
<h3 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h3><h4 id="线程池的创建"><a href="#线程池的创建" class="headerlink" title="线程池的创建"></a>线程池的创建</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">创建线程池</span><br><span class="line"><span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, maxiumPoolSize, keepAliveTime, milliseconds, runnableTaskQueue, handler);</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ol>
<li><p>corePoolSize(线程池的基本大小)：当提交一个任务到线程池中时，线程池会创建一个线程来执行任务，<strong>即使其他空闲的基本线程能够执行新任务也会创建线程</strong>，等到需要执行的任务数大于等于线程池基本大小时就不再创建。另外如果调用了prestartAllCoreThreads()方法，线程池就会提前创建并启动所有基本线程；</p>
</li>
<li><p>runnableTaskQueue（任务队列）：用于保存等待执行的任务阻塞队列；</p>
</li>
<li><p>maximumPoolSize（线程池最大数量）：线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大数量，则继续创建新线程执行任务。</p>
</li>
<li><p>ThreadFactory：用于设置创建线程的工厂，可以创建出自定义线程名的线程；</p>
</li>
<li><p>RejectedExecutionHandler（饱和策略）：当队列和线程池都满了，说明线程池已经饱和了，那么这里指定提交新任务后的执行策略。一般由以下四种：</p>
<ul>
<li>AbortPolicy: 直接抛出异常；</li>
<li>CallerRunsPolicy： 只用调用者所在线程来运行任务；</li>
<li>DiscardOldestPolicy： 丢弃队列里最近的一个任务，并执行当前任务；</li>
<li>DiscardPolicy： 不处理，直接丢弃。</li>
</ul>
<p> <em>也可以根据引用场景来实现RejectedExecutionHandler接口自定义策略</em></p>
</li>
</ol>
<h4 id="向线程池提交任务"><a href="#向线程池提交任务" class="headerlink" title="向线程池提交任务"></a>向线程池提交任务</h4><p>两个方法可以提交任务，execute()或submit()方法</p>
<ol>
<li>execute()方法没有返回值，无法判断是否被线程池执行成功，输入为Runnable类的实例。</li>
<li>submit()方法可以返回future类型的值，以此得知是否被执行成功。其中可用get()方法获取返回值，get(long timeout, TimeUnit unit)方法会阻塞当前线程一段时间后立即返回，可能导致任务没被执行完。</li>
</ol>
<h4 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h4><p>两个方法可以关闭，shutdown()或shutdownNow()。</p>
<p><strong>原理：</strong>便利线程池中的工作线程，然后逐个调用线程的interrupt()方法中断线程，所以无法响应中断的任务将无法终止。</p>
<p><strong>shutdown()和shutdownNow()区别：</strong><br>① shutdownNow()首先将线程池的状态设为STOP，然后尝试停止所有的正在执行或暂停任务线程，并返回等待执行任务的列表。<br>② shutdown()只将线程池设为SHUTDOWNING状态，然后中断没有正在执行的任务</p>
<h4 id="合理配置线程池"><a href="#合理配置线程池" class="headerlink" title="合理配置线程池"></a>合理配置线程池</h4><p><strong>合理配置角度</strong></p>
<ol>
<li>任务性质：CPU密集型任务、IO密集型任务和混合任务；（<em>按照线程池规模划分，CPU密集型：Ncpu+1个线程，IO密集型：2</em>Ncpu，混合型，如果拆分为CPU密集和IO密集的两个任务执行时间相差不大，就可以拆分。*）</li>
<li>任务优先级：高、中和低；（<em>使用优先级队列PriorityBlockingQueue处理，其可以让优先级高的任务先执行</em>）</li>
<li>任务的执行时间：长、中和短；（<em>交给不同规模的线程池处理，或使用优先级队列，让执行时间短的任务先执行</em>）</li>
<li>任务的依赖性：是否依赖其他系统资源。（<em>比如依赖数据库连接的任务，等待时间越长，CPU空闲时间越长，所以应当设置更大的线程数，充分利用CPU资源</em>）</li>
</ol>
<p><strong>建议使用有界队列：</strong>有界队列能增加系统的稳定性和预警能力，可以根据需要设置大一些，如几千。如果某部分出了问题，使用无届队列会导致被阻塞的线程无限量增大。</p>
<h4 id="线程池的监控"><a href="#线程池的监控" class="headerlink" title="线程池的监控"></a>线程池的监控</h4><p><strong>监控线程池的属性：</strong></p>
<ol>
<li>taskCount: 线程池需要执行的任务数量；</li>
<li>completedTaskCount: 线程池在运行过程中已经完成的任务数量，小于或等于taskCount；</li>
<li>largestPoolSize: 线程池里曾经创建过的最大线程数量。通过该属性能知道线程池是否满过，如果该值等于线程池最大线程数，表明曾经满过。</li>
<li>getPoolSize: 线程池的线程数量。如果线程池不销毁，线程池里的线程不会自动销毁，所以该值只增不减；</li>
<li>getActiveCount: 获取活动的线程数</li>
</ol>
<p><em>通过扩展线程池进行监控。可以通过继承线程池来自定义线程池，重写线程池的beforeExecute、afterExecute和terminated方法，也可以在执行任务前、执行后和线程池关闭前执行一些代码来进行监控</em></p>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>第8章| Java中的并发工具类</title>
    <url>/2019/08/15/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC8%E7%AB%A0-Java%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="等待线程完成的CountDownLatch"><a href="#等待线程完成的CountDownLatch" class="headerlink" title="等待线程完成的CountDownLatch"></a>等待线程完成的CountDownLatch</h3><p><strong>功能</strong>：允许一个或多个线程等待其他线程完成操作。</p>
<ol>
<li>在jdk1.5前，join可用于让当前线程等待join线程执行结束，<strong>原理</strong>是不停检查join线程是否存活，如果join线程存活则让当前线程一直等待；join线程终止后，调用notifyAll()方法。</li>
<li>在jdk1.5后，并发包提供了CountDownLatch方法来实现join功能，并且功能比join更多。</li>
</ol>
<p><strong>详解</strong>：CountDownLatch构造函数接收一个int类型参数作为计数器，传入N代表等待N个点完成。调用CountDownLatch的countDown()方法时，计数器N会减1，同时CountDownLatch的await()方法会阻塞当前线程，直至N减为0。</p>
<h3 id="同步屏障CyclicBarrier"><a href="#同步屏障CyclicBarrier" class="headerlink" title="同步屏障CyclicBarrier"></a>同步屏障CyclicBarrier</h3><p><strong>功能</strong>：让一组线程达到一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。</p>
<p><strong>详解</strong>：CyclicBarrier默认构造方法是CyclicBarrier(int parties)，其参数表示屏障拦截的线程数量，每个线程调用await()方法表明自己已经到达屏障，然后该线程被阻塞。另外一个<strong>高级构造方法</strong>CyclicBarrier(int parties, Runnable barrierAction)，在线程到达屏障时，优先执行barrierAction，可方便处理更复杂业务。</p>
<p><strong>CyclicBarrier和CountDownLatch的区别</strong></p>
<ol>
<li>CountDownLatch的计数器只能用一次，CyclicBarrier计数器可以重置，所以后者可以应对更复杂的场景；</li>
<li>CyclicBarrier还提供了例如getNumberWaiting()获取阻塞线程个数，以及IsBroken()返回阻塞线程是否被中断。</li>
</ol>
<h3 id="控制并发线程数的Semaphore"><a href="#控制并发线程数的Semaphore" class="headerlink" title="控制并发线程数的Semaphore"></a>控制并发线程数的Semaphore</h3><p><strong>功能</strong>：Semaphore（信号量）用来控制同时访问线程资源的线程数量，通过协调各个线程，保证合理使用公共资源。</p>
<p><strong>详解</strong>：Semaphore构造方法Semaphore(int permits)，permits表示可用的许可证数量，也就是最大并发数。使用时，首先用acquire()方法获取一个许可证，用完之后调用release()方法归还许可证。此外还可用tryAcquire()方法尝试获取许可证。</p>
<ol>
<li>应用场景<br>可用于流量控制，特别是公共资源有限的场景，比如数据库连接。例如“要读取几万个文件的数据，由于是IO密集型任务，可以启动30个线程并发读取。当读取到内存后，下一步存储到数据库中时，由于数据库仅有10个连接，此时必须控制仅有10个线程同时获取数据库连接保存数据，这里就可以用到Semaphore作流量控制。”</li>
<li>其他方法</li>
</ol>
<ul>
<li>int availablePermits(): 返回信号量中当前可用的许可证数量；</li>
<li>int getQueueLength(): 返回正在等待许可证的线程数量；</li>
<li>boolean hasQueuedThreads(): 是否有线程正在等待获取许可证；</li>
<li>[protected] void reducePermits(int reduction): 减少reduction个许可证;</li>
<li>[protected] Collection getQueuedThreads(): 返回所有等待获取许可证的线程集合;</li>
</ul>
<h3 id="线程间交换数据的Exchanger"><a href="#线程间交换数据的Exchanger" class="headerlink" title="线程间交换数据的Exchanger"></a>线程间交换数据的Exchanger</h3><p><strong>功能</strong>：Exchanger是一个用于线程间协作的工具类，可用于线程间数据交换。<br><strong>详解</strong>：提供一个同步点，在同步点两个线程可以交换彼此数据。这两个线程通过exchange()方法交换数据，如果一个线程先执行exchange()方法，它会等待另一个线程执行exchange()方法，当两个线程同时到达同步点时，即可交换数据，将己方数据交换给对方。(<font color="red">如果两个线程中有一个长时间不确定是否执行exchange()方法，可采用exchange(V x, long timeout, TimeUnit unit)来设置最大等待时长</font>)</p>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>第7章| Java中的13个原子操作类</title>
    <url>/2019/08/10/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC7%E7%AB%A0-Java%E4%B8%AD%E7%9A%8413%E4%B8%AA%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%B1%BB/</url>
    <content><![CDATA[<blockquote>
<p>jdk1.5后提供了java.util.concurrent.atomic包，其中的原子操作类提供了一种用法简单、性能高效、线程安全地更新一个变量的方式。</p>
</blockquote>
<p><strong>Atomic包提供了4种类型的13个原子更新类来完成原子更新</strong>，Atomic包里的类基本都是使用Unsafe实现的包装类，具体见下表</p>
<table width="100%">
<caption>简要汇总表</caption>
<tr>
    <th>更新方式</th>
    <th>具体实现类</th>
    <th>主要方法说明</th>
    <th>备注</th>
</tr>

<tr>
    <td rowspan="3">原子更新基本类型类</td>
    <td>AtomicBoolean: 原子更新布尔类型</td>
    <td rowspan="3">这3个类提供的方法差不多相同，这里以AtomicInteger为例进行介绍。1. int addAndGet(int delta): 以原子方式将输入的数值与实例中的值相加，并返回结果；2. boolean compareAndSet(int expect, int update): 如果输入的数值等于预期值，则以原子方式将该值设置为输入的值；3. int getAndIncrement(): 以原子方式将当前值加1，注意这里返回的是自增前的值；4. void lazySet(int newValue): 最终会设置成newValue，可能导致其他线程在之后的一小段时间内还可以读到旧的值；5. int getAndSet(int newValue): 以原子方式设置为newValue的值，并返回旧值。</td>
    <td rowspan="3">原子更新char、float、double变量可以采用类似于先将变量类型转为整型，再使用compareAndSwapInt进行CAS。</td>
</tr>
<tr>
    <td>AtomicInteger: 原子更新整型</td>
</tr>
<tr>
    <td>AtomicLong: 原子更新长整型</td>
</tr>

<tr>
    <td rowspan="3">原子更新数组</td>
    <td>AtomicIntegerArray: 原子更新整型数组里的元素</td>
    <td rowspan="3">以AtomicIntegerArray类为例，常用方法有：① int addAndGet(int i, int delta): 以原子方式将输入值与数组中索引i的元素相加；② boolean compareAndSet(int i, int expect, int update): 如果当前值等于预期值，则以原子方式将数组位置i 的元素设置成update值。</td>
    <td rowspan="3">AtomicIntegerArray中数组value[]通过构造方法传递进去，AtomicIntegerArray会将当前数组复制一份，所以内部元素进行修改时，用value[]得到的值不变。</td>
</tr>
<tr>
    <td>AtomicLongArray: 原子更新长整型数组里的元素</td>
</tr>
<tr>
    <td>AtomicReferenceArray: 原子更新引用类型数组里的元素</td>
</tr>

<tr>
    <td rowspan="3">原子更新引用类</td>
    <td>AtomicReference: 原子更新引用类</td>
    <td rowspan="3">方法与原子更新基本类型类似</td>
    <td rowspan="3">AtomicInteger只能更新一个变量，可以使用这个原子更新引用类型提供的类来一次更新多个变量的值</td>
</tr>
<tr>
    <td>AtomicReferenceFieldUpdater: 原子更新引用类型里的字段</td>
</tr>
<tr>
    <td>AtomicMarkableReference: 原子更新带有标记位的引用类型，可以原子更新一个布尔类型的标记位和引用类型。构造方法是AtomicMarkableReference(V initialRef, boolean initialMark)</td>
</tr>

<tr>
    <td rowspan="3">原子更新字段类</td>
    <td>AtomicIntegerFieldUpdater: 原子更新整型字段的更新器</td>
    <td rowspan="3">成员方法与上面的大同小异</td>
    <td rowspan="3">两步原子更新字段类：① 因为原子更新字段类都是抽象类，所以使用时要用静态方法newUpdater()创建一个更新器，并设置想要更新的类和属性；② 更新类的字段（属性）必须使用public volatile修饰符。</td>
</tr>
<tr>
    <td>AtomicLongFieldUpdater: 原子更新长整形字段的更新器</td>
</tr>
<tr>
    <td>AtomicStampedReference: 原子更新带有版本号的引用类型，该类型将整型值与引用关联起来，可用于原子的更新数据和数据的版本号，可以解决CAS出现的ABA问题。</td>
</tr>

</table>




]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>原子操作</tag>
      </tags>
  </entry>
  <entry>
    <title>第6章| Java并发容器和框架</title>
    <url>/2019/08/08/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC6%E7%AB%A0-Java%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E5%92%8C%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h3 id="ConcurrentHashMap的实现原理与使用"><a href="#ConcurrentHashMap的实现原理与使用" class="headerlink" title="ConcurrentHashMap的实现原理与使用"></a>ConcurrentHashMap的实现原理与使用</h3><p>ConcurrentHashMap是线程安全且高效的HashMap</p>
<h4 id="为什么使用ConcurrentHashMap"><a href="#为什么使用ConcurrentHashMap" class="headerlink" title="为什么使用ConcurrentHashMap"></a>为什么使用ConcurrentHashMap</h4><p>原因：  </p>
<ul>
<li><p>线程不安全的HashMap可能导致程序死循环<br>比如HashMap在并发执行put操作时会引发死循环，因为多线程操作会导致HashMap的Entry链表形成环形结构，此时Entry的next节点永远不为空，会导致死循环获取Entry</p>
</li>
<li><p>HashTable虽然是线程安全的，但是效率低下<br>HashTable使用synchronized保证线程安全，在线程竞争激烈情况下HashTable效率低下。</p>
</li>
<li><p>ConcurrentHashMap的分段锁技术提升了并发访问率<br>在HashTable中，当出现并发访问时所有线程都得竞争同一把锁。而ConcurrentHashMap里有多把锁，每把锁锁定其中一部分数据，那么就可以在并发访问时提高访问效率。</p>
</li>
<li><input disabled type="checkbox"> <p>查看HashMap、HashTable和ConcurrentHashMap底层源码实现</p>
</li>
</ul>
<h4 id="ConcurrentHashMap的结构"><a href="#ConcurrentHashMap的结构" class="headerlink" title="ConcurrentHashMap的结构"></a>ConcurrentHashMap的结构</h4><ol>
<li>ConcurrentHashMap由Segment（<strong>可重入锁</strong>）数组结构和HashEntry数组结构构成，一个ConcurrentHashMap里有一个Segment数组。</li>
<li>Segment数组的结构与HashMap相似，是一种数组和链表结构。一个Segment包含一个HashEntry数组，HashEntry是一个链表结构的元素。对HashEntry进行修改时，必须先获得他对应的Segment锁，具体结构图如下：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/ConcurrentHashMap%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt="ConcurrentHashMap结构图"></p>
<h4 id="ConcurrentHashMap的初始化"><a href="#ConcurrentHashMap的初始化" class="headerlink" title="ConcurrentHashMap的初始化"></a>ConcurrentHashMap的初始化</h4><p>通过源码可知，Segments数组的长度ssize是通过concurrencyLevel计算得出的。<strong>为了能通过按位与的散列算法来定位Segments数组的索引，必须保证segments数组的长度是2的N次方</strong>，所以必须计算出一个大于或等于concurrentLevel的最小的2的N次方作为segments数组的长度。<br>其中计算公式为<strong>hash%length==hash&amp;(length-1)</strong>，公式成立的前提为长度为2的N次方</p>
<h4 id="定位Segment"><a href="#定位Segment" class="headerlink" title="定位Segment"></a>定位Segment</h4><ol>
<li>在插入和读取元素时，必须先通过散列算法定位到Segment，然后使用变种hash算法对元素的hashCode进<strong>再散列</strong>。</li>
<li>进行再散列的目的是减少散列冲突，使元素能够更均匀分布在不同的Segment上，提高容器的存取效率。</li>
</ol>
<h3 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h3><p>基于链接节点的无届线程安全队列，采用“先进先出”的规则排序节点。</p>
<h4 id="入队列"><a href="#入队列" class="headerlink" title="入队列"></a>入队列</h4><ol>
<li>将入队节点设置成为当前队列尾节点的下一个节点；</li>
<li>更新tail节点，如果tail节点的next节点不为空，则将入队节点设置为tail节点；如果tail节点的next节点为空，则将入队节点设置成tail的next节点。也就是说tail节点不总是尾节点。</li>
</ol>
<h4 id="出队列"><a href="#出队列" class="headerlink" title="出队列"></a>出队列</h4><ol>
<li>出队列就是从队列中返回一个节点元素，并清空该节点对元素的引用。</li>
<li>当head节点有元素，直接弹出head节点里的元素，而且不更新head节点；当head节点没有元素时，出队操作才更新head节点。</li>
<li>获取head节点的元素，判断是否为空，如果为空，表示另一个线程已经进行了一次出队列操作将该节点的元素取走，如果不为空，则使用CAS将head节点设置为null并返回head节点的元素。</li>
</ol>
<h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p>阻塞队列常用于<strong>生产者和消费者</strong>场景，生产者是向队列添加元素的线程，消费者是从队列里取元素的线程。</p>
<p>阻塞队列不可用时，支持阻塞的插入和移除方法提供了以下<strong>四种处理方式</strong>：</p>
<table>
<thead>
<tr>
<th>处理方式</th>
<th>抛出异常</th>
<th>返回特殊值</th>
<th>一直阻塞</th>
<th>超时退出</th>
</tr>
</thead>
<tbody><tr>
<td>插入方法</td>
<td>add(e)</td>
<td>offer(e)</td>
<td>put(e)</td>
<td>offer(e,time,unit)</td>
</tr>
<tr>
<td>移除方法</td>
<td>remove()</td>
<td>poll()</td>
<td>take()</td>
<td>poll(time,unit)</td>
</tr>
<tr>
<td>检查方法</td>
<td>element()</td>
<td>peek()</td>
<td>不可用</td>
<td>不可用</td>
</tr>
</tbody></table>
<ul>
<li>抛出异常：队列满时，继续插入数据则抛出IllegalStateException；队列空时，从队列取数据则抛出NoSuchElementException；</li>
<li>返回特殊值：插入元素时，成功返回true；移除元素时，如果没有则返回null。</li>
<li>一直阻塞：队列满时，继续插入数据会一直阻塞生产者线程直到队列可用或响应中断退出；队列空时，从队列取数据会阻塞消费者线程直到队列不空。</li>
<li>超时退出：队列满时，继续插入数据会阻塞生产者线程一段时间，超过指定时间则退出。</li>
</ul>
<h4 id="Java里的阻塞队列"><a href="#Java里的阻塞队列" class="headerlink" title="Java里的阻塞队列"></a>Java里的阻塞队列</h4><ol>
<li><strong>ArrayBlockingQueue</strong><br>用数组实现的有界阻塞队列，FIFO；</li>
<li><strong>LinkedBlockingQueue</strong><br>用链表实现的无界阻塞队列，默认和最大长度为Integer.MAX_VALUE，FIFO；</li>
<li><strong>PriorityBlockingQueue</strong><br>支持优先级的无界阻塞队列，默认自然顺序排序，也可以自定义顺序规则；</li>
<li>DelayQueue<br>支持延时获取元素的无界阻塞队列，在创建元素时可指定延时，只有延迟期满才能从队列中提取元素。<br>适用场景：<br>① 设计缓存系统：用DelayQueue保存缓存元素的有效期，用一个循环线程循环查询DelayQueue，能获取到说明缓存有效期到了；<br>② 调度定时任务：用DelayQueue保存当天要执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行。</li>
<li>SynchronousQueue<br>不存储元素的阻塞队列，每一个put操作必须等待一个take操作，否则不能继续添加元素，默认用非公平性性策略访问队列。</li>
<li>LinkedTransferQueue<br>由链表结构组成的无界阻塞TransferQueue队列，主要多了tryTransfer和transfer方法。<br>① transfer方法：如果当前有消费者正在等待接收元素，transfer方法可以把生产者传入的元素立刻传输给消费者；如果没有消费者在等待接收元素，transfer方法将元素存放在队列tail节点，并等到该元素被消费者消费了才返回。<br>② tryTransfer方法：如果当前有消费者正在等待接收元素，tryTransfer方法可以把生产者传入的元素立刻传输给消费者；如果没有消费者在等待接收元素，tryTransfer方法将元素存放在队列tail节点，并返回false。<br>③ <strong>区别</strong>：tryTransfer方法无论消费者是否接收，方法立即返回，而transfer方法必须等到消费者消费了才返回。</li>
<li>LinkedBlockingDeque<br>由链表结构组成的双向阻塞队列，可以从队列的两端插入和移除元素。</li>
</ol>
<h4 id="阻塞队列的实现原理"><a href="#阻塞队列的实现原理" class="headerlink" title="阻塞队列的实现原理"></a>阻塞队列的实现原理</h4><p>使用等待 / 通知模式实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        checkNotNull(e);</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (count == items.length)</span><br><span class="line">                notFull.await();</span><br><span class="line">            enqueue(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</span><br><span class="line">        items[putIndex] = x;</span><br><span class="line">        <span class="keyword">if</span> (++putIndex == items.length)</span><br><span class="line">            putIndex = <span class="number">0</span>;</span><br><span class="line">        count++;</span><br><span class="line">        notEmpty.signal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">                notEmpty.await();</span><br><span class="line">            <span class="keyword">return</span> dequeue();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        E x = (E) items[takeIndex];</span><br><span class="line">        items[takeIndex] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (++takeIndex == items.length)</span><br><span class="line">            takeIndex = <span class="number">0</span>;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">if</span> (itrs != <span class="keyword">null</span>)</span><br><span class="line">            itrs.elementDequeued();</span><br><span class="line">        notFull.signal();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>当生产者往满的队列中添加元素时会阻塞生产者（await），当消费者消费了一个队列中的元素后，会通知生产者当前队列可用（signal）。</li>
<li>当消费者从空的队列中取元素时会阻塞消费者（await），当生产者添加了一个元素后，会通知消费者当前队列可用（signal）。</li>
</ul>
<h3 id="Fork-Join-框架"><a href="#Fork-Join-框架" class="headerlink" title="Fork/Join 框架"></a>Fork/Join 框架</h3><p>Fork/Join 框架是Java 7 提供的一个用于并行执行任务的框架，把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果。</p>
<ol>
<li>分割任务；</li>
<li>执行任务并合并结果。</li>
</ol>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>ConcurrentHashMap</tag>
        <tag>ConcurrentLinkedQueue</tag>
      </tags>
  </entry>
  <entry>
    <title>第5章| Java中的锁</title>
    <url>/2019/08/06/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC5%E7%AB%A0-Java%E4%B8%AD%E7%9A%84%E9%94%81/</url>
    <content><![CDATA[<blockquote>
<p>本章主要介绍Java并发包（concurrent）下与锁相关的API和组件的使用及实现细节。</p>
</blockquote>
<h3 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h3><ol>
<li><strong>锁</strong>：用来控制多个线程访问共享资源的方式，通常一个锁能防止多个线程同时访问共享资源，但读写锁可以允许多个线程并发地访问共享资源。</li>
<li>JDK1.5前用synchronized实现锁功能，之后Lock提供了与synchronized类似的同步功能，尽管使用时需要<strong>显示地释放与获取锁</strong>，但与其同时也新增了<strong>获取锁与释放锁的可操作性</strong>、<strong>可中断地获取锁</strong>与<strong>超时获取锁等特性</strong>。</li>
<li>Lock的使用方式：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化锁对象</span></span><br><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>注意</strong>：不要在try块中获取锁，因为如果获取锁时发生了异常，抛出异常时，会导致锁无故释放。</p>
<ol start="4">
<li>Lock接口比synchronized多的特性，见下表</li>
</ol>
<table>
<thead>
<tr>
<th>特性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>尝试非阻塞地获取锁</td>
<td>当前线程尝试获取锁，如果这一时刻锁没有被其他线程获取到，则成功获取并持有锁</td>
</tr>
<tr>
<td>能中断地获取锁</td>
<td>获取锁的同时可以响应中断，此时抛出中断异常，同时释放锁</td>
</tr>
<tr>
<td>超时获取锁</td>
<td>在指定的截止时间内获取锁，如果超时了无法获取锁，则返回</td>
</tr>
</tbody></table>
<p><strong>Lock接口实现基本都是通过聚合了一个同步器的子类来实现访问控制的</strong></p>
<h3 id="队列同步器AbstractQueueSynchronizer"><a href="#队列同步器AbstractQueueSynchronizer" class="headerlink" title="队列同步器AbstractQueueSynchronizer"></a>队列同步器AbstractQueueSynchronizer</h3><ol>
<li>作用：构建锁或其他同步组件的基础框架，其用一个into变量表示同步状态，通过内置的FIFO队列完成资源获取线程的排队工作。</li>
<li>同步器的主要实现方法为继承，<strong>一般推荐子类定义为自定义同步组件的静态内部类</strong>。</li>
<li>队列同步器本身没有任何同步接口，仅定义了若干同步状态获取与释放的方法供自定义同步组件使用；</li>
<li>队列同步器既可以支持独占式获取同步状态，也可以支持共享式获取同步状态；</li>
<li>同步器是实现锁的关键，实现锁的过程中聚合同步器，利用同步器实现锁的语义。<strong>同步器与锁的关系：</strong> ①锁面向使用者，定义了使用者与锁交互的接口，隐藏了实现细节；②同步器面向锁的实现者，简化了锁的实现方式，屏蔽了同步状态管理、线程排队、等待与唤醒等底层操作。③锁与同步器隔离了使用者与实现者所要关注的领域。</li>
</ol>
<h4 id="队列同步器的接口与示例"><a href="#队列同步器的接口与示例" class="headerlink" title="队列同步器的接口与示例"></a>队列同步器的接口与示例</h4><p>前面说道队列同步器的使用方式为继承，也就是使用者需要重写指定的方法，随后将同步器组合在自定义同步组件的实现中，并调用同步器提供的模板方法，这些模板方法会调用使用者重写的方法。</p>
<ol>
<li>有3个方法可以用来访问或修改同步状态：</li>
</ol>
<ul>
<li>getState()：获取同步状态</li>
<li>setState(int newState)：设定当前同步状态</li>
<li>compareAndSetState(int expect, int update)：使用CAS设置当前状态，该方法可以保证设置的原子性</li>
</ul>
<ol start="2">
<li>队列同步器提供的模板方法主要分为3类</li>
</ol>
<ul>
<li>独占式获取与释放同步状态</li>
<li>共享式获取与释放同步状态</li>
<li>查询同步队列中的等待线程情况</li>
</ul>
<h3 id="队列同步器的实现分析"><a href="#队列同步器的实现分析" class="headerlink" title="队列同步器的实现分析"></a>队列同步器的实现分析</h3><h4 id="同步队列"><a href="#同步队列" class="headerlink" title="同步队列"></a>同步队列</h4><ol>
<li>实现原理<br>同步器依赖内部的<strong>同步队列</strong>(一个FIFO双向队列)来完成同步状态的管理,当前线程获取同步状态<strong>失败</strong>时,同步器会将当前线程以及等待状态等信息构造成为一个节点(Node)并将其加入同步队列,同时会<strong>阻塞当前线程</strong>,当同步状态<strong>释放</strong>时,会把首节点中的线程<strong>唤醒</strong>,使其再次尝试获取同步状态。</li>
<li>节点是构成同步队列的基础,其基本结构如下图所是：<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.jpg" alt="同步队列的基本结构"></li>
</ol>
<p>其中同步器将节点加入到同步队列的过程如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E8%8A%82%E7%82%B9%E5%8A%A0%E5%85%A5%E5%88%B0%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97.jpg" alt=" 节点加入到同步队列"></p>
<h4 id="独占式同步状态获取与释放"><a href="#独占式同步状态获取与释放" class="headerlink" title="独占式同步状态获取与释放"></a>独占式同步状态获取与释放</h4><ol>
<li>同步器的acquire(int arg)方法可以获取同步状态，该方法<strong>对中断不敏感</strong>（线程获取同步状态失败后进入同步队列中，后续对线程进行中断操作时，线程不会从同步队列中移出）;</li>
<li>在acquireQueued(final Node node, int arg)方法中，当前线程在“死循环”中尝试获取同步状态，而只有前驱节点是头节点才能够尝试获取同步状态，这样做的原因有二：<br>① 头节点是成功获取到同步状态的节点，而头节点的线程释放了同步状态之后，将唤醒其后继节点，后继节点的线程被唤醒后需要检查自己的前驱节点是否是头节点。<br>② 维护同步队列的FIFO原则。</li>
<li>独占式同步状态获取流程，也就是acquire(int arg)方法调用流程，如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E7%8B%AC%E5%8D%A0%E5%BC%8F%E5%90%8C%E6%AD%A5%E7%8A%B6%E6%80%81%E8%8E%B7%E5%8F%96%E6%B5%81%E7%A8%8B.jpg" alt="独占式同步状态获取流程"><h4 id="共享式同步状态获取与释放"><a href="#共享式同步状态获取与释放" class="headerlink" title="共享式同步状态获取与释放"></a>共享式同步状态获取与释放</h4></li>
</ol>
<h4 id="独占式超时获取同步状态"><a href="#独占式超时获取同步状态" class="headerlink" title="独占式超时获取同步状态"></a>独占式超时获取同步状态</h4><h3 id="重入锁ReentrantLock"><a href="#重入锁ReentrantLock" class="headerlink" title="重入锁ReentrantLock"></a>重入锁ReentrantLock</h3><p>名词解释：是支持重进入的锁,它表示该锁能够支持一个线程对<br>资源的重复加锁。除此之外,该锁的还支持获取锁时的公平和非公平性选择。</p>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Lock</tag>
        <tag>读入锁</tag>
        <tag>重写锁</tag>
      </tags>
  </entry>
  <entry>
    <title>良心推荐Linux/Ubuntu下好用的工具</title>
    <url>/2019/08/06/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E8%89%AF%E5%BF%83%E6%8E%A8%E8%8D%90Linux-Ubuntu%E4%B8%8B%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p>本篇博文主要记录个人在Ubuntu18.0(<em>其他系统安装方法可参见开源地址的详细说明</em>)下用过的好用工具，将不定期更新……</p>
</blockquote>
<h3 id="截图工具"><a href="#截图工具" class="headerlink" title="截图工具"></a>截图工具</h3><h4 id="动态截图工具「peek」"><a href="#动态截图工具「peek」" class="headerlink" title="动态截图工具「peek」"></a>动态截图工具「peek」</h4><p>开源工具，GitHub repo—<a href="https://github.com/phw/peek" target="_blank" rel="noopener">phw/peek</a>，<strong>4.7k</strong> Stars</p>
<p>工具特点：可以方便地动态截图，输出格式可选为GIF、APNG、WebM、MP4。</p>
<p>安装方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo add-apt-repository ppa:peek-developers/stable</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install peek</span></span><br></pre></td></tr></table></figure>

<h4 id="可编辑截图工具「flameshot」"><a href="#可编辑截图工具「flameshot」" class="headerlink" title="可编辑截图工具「flameshot」"></a>可编辑截图工具「flameshot」</h4><p>开源工具，GitHub repo—<a href="https://github.com/lupoDharkael/flameshot" target="_blank" rel="noopener">lupoDharkael/flameshot</a>，<strong>3.6k</strong> Stars</p>
<p>工具特点：能自定义截图区域，界面操作！</p>
<p>安装方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install flameshot</span></span><br></pre></td></tr></table></figure>

<h3 id="定时闹钟工具「Alarm-Clock」"><a href="#定时闹钟工具「Alarm-Clock」" class="headerlink" title="定时闹钟工具「Alarm Clock」"></a>定时闹钟工具「Alarm Clock」</h3><p>工具特点：可自定义闹钟和计时器，一次延后提醒间隔5min</p>
<p>安装方法：打开Ubuntu Software，搜索Alarm Clock点击安装即可！</p>
<h3 id="Ubuntu18-04-安装-mac-os-主题"><a href="#Ubuntu18-04-安装-mac-os-主题" class="headerlink" title="Ubuntu18.04 安装 mac os 主题"></a>Ubuntu18.04 安装 mac os 主题</h3><p>参考文章：<a href="https://www.cnblogs.com/feipeng8848/p/8970556.html" target="_blank" rel="noopener">给Ubuntu18.04(18.10)安装mac os主题</a></p>
<p>若文章失效，可下载<a href="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/saved_pages/%E7%BB%99Ubuntu18.04(18.10)%E5%AE%89%E8%A3%85mac%20os%E4%B8%BB%E9%A2%98.zip" target="_blank" rel="noopener">保存的离线网页</a>，文章内容最后更新于2019-07-02。</p>
<h3 id="自动锁定-解锁控制面板-「Touchpad-Indicator」"><a href="#自动锁定-解锁控制面板-「Touchpad-Indicator」" class="headerlink" title="自动锁定/解锁控制面板 「Touchpad_Indicator」"></a>自动锁定/解锁控制面板 「Touchpad_Indicator」</h3><p>工具特点：插上鼠标自动锁定控制面板，拔下鼠标自动解锁控制面板</p>
<p>安装方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:atareao/atareao</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install touchpad-indicator</span><br></pre></td></tr></table></figure>

<p>卸载方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove --autoremove touchpad-indicator</span><br></pre></td></tr></table></figure>

<h3 id="清理工具「Ubuntu-Cleaner」"><a href="#清理工具「Ubuntu-Cleaner」" class="headerlink" title="清理工具「Ubuntu Cleaner」"></a>清理工具「Ubuntu Cleaner」</h3><p>工具特点：能够帮助清除浏览器、缩略图、APT 缓存，以及旧的内核文件、包的配置文件以及不需要的安装包</p>
<p>安装方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:gerardpuig/ppa</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install ubuntu-cleaner</span><br></pre></td></tr></table></figure>

<p>卸载方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove ubuntu-cleaner &amp;&amp; sudo apt autoremove</span><br></pre></td></tr></table></figure>

<p><em>注意：该工具仅在 python 2 下工作，当将默认版本切换为 python 3 后将不工作！</em></p>
<h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p>工具特点：简洁强大的Markdown编辑器</p>
<p>安装方法（参见官网）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> or run:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span></span><br><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> add Typora<span class="string">'s repository</span></span></span><br><span class="line">sudo add-apt-repository 'deb https://typora.io/linux ./'</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install typora</span></span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu18.04</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>手写简易数据库连接池</title>
    <url>/2019/08/05/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h3 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h3><h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><p>用超时等待模式构造一个简单的数据库连接池，模拟从连接池中获取、使用、释放连接的过程。</p>
<h4 id="手段"><a href="#手段" class="headerlink" title="手段"></a>手段</h4><ol>
<li>将客户端获取连接的过程设定为超时等待的模式，即在1000ms内如果无法获取到可用连接，将返回null给客户端；</li>
<li>设定连接池的大小为10，通过调节客户端连接的线程数模拟无法获取连接的场景；</li>
</ol>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="ConnectionPool"><a href="#ConnectionPool" class="headerlink" title="ConnectionPool"></a>ConnectionPool</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;定义连接池，用构造函数初始化连接的最大上限，用一个双向队列维护连接，</span></span><br><span class="line"><span class="comment"> * 调用方需要先调用fetConnection(long)方法指定在多少ms内超时获取连接，</span></span><br><span class="line"><span class="comment"> * 再调用releaseConnection(Connection)方法将连接放回线程池。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Created by hank on 8/5/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个双向队列,用来维护连接</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Connection&gt; pool = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数初始化连接上限initialSize</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectionPool</span><span class="params">(<span class="keyword">int</span> initialSize)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// initialSize小于0没有意义</span></span><br><span class="line">        <span class="keyword">if</span> (initialSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; initialSize; i++) &#123;</span><br><span class="line">                <span class="comment">// 从尾部依次放入连接池中</span></span><br><span class="line">                pool.addLast(ConnectionDriver.createConnection());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将连接返回线程池</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseConnection</span><span class="params">(Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 锁定信号量pool</span></span><br><span class="line">            <span class="keyword">synchronized</span> (pool) &#123;</span><br><span class="line">                <span class="comment">// 连接释放后需要进行通知，这样其他待连接的线程才能知道线程池中已经空闲了一个连接</span></span><br><span class="line">                pool.addLast(connection);</span><br><span class="line">                pool.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在指定时间内为获取到连接就返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">fetchConnection</span><span class="params">(<span class="keyword">long</span> mills)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 锁定信号量pool</span></span><br><span class="line">        <span class="keyword">synchronized</span> (pool) &#123;</span><br><span class="line">            <span class="comment">// 未设置&gt;0的等待时间，需要一直等待连接</span></span><br><span class="line">            <span class="keyword">if</span> (mills &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (pool.isEmpty()) &#123;<span class="comment">// 线程池没有空闲连接，需要等待</span></span><br><span class="line">                    pool.wait();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 当有空闲连接时，返回空闲连接</span></span><br><span class="line">                <span class="keyword">return</span> pool.removeFirst();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 超时的时间刻度</span></span><br><span class="line">                <span class="keyword">long</span> future = System.currentTimeMillis() + mills;</span><br><span class="line">                <span class="comment">// 剩余超时时间</span></span><br><span class="line">                <span class="keyword">long</span> remaining = mills;</span><br><span class="line">                <span class="comment">// 当没有空闲连接而且还没有超时</span></span><br><span class="line">                <span class="keyword">while</span> (pool.isEmpty() &amp;&amp; remaining &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 继续等待remaining个时长</span></span><br><span class="line">                    pool.wait(remaining);</span><br><span class="line">                    <span class="comment">// 更新剩余等待时长为0</span></span><br><span class="line">                    remaining = future - System.currentTimeMillis();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 定义返回变量</span></span><br><span class="line">                Connection result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 两种情况</span></span><br><span class="line">                <span class="comment">// 1. pool不为空直接下来执行，此时remaining&gt;0</span></span><br><span class="line">                <span class="comment">// 2. 经过remaining时长的等待，pool已经不为空了</span></span><br><span class="line">                <span class="keyword">if</span> (!pool.isEmpty()) &#123;<span class="comment">// 返回一个连接</span></span><br><span class="line">                    result = pool.removeFirst();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 经过等待后pool依然为空，就返回null</span></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ConnectionDriver"><a href="#ConnectionDriver" class="headerlink" title="ConnectionDriver"></a>ConnectionDriver</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;由于java.sql.Connection是一个接口，最终得依靠数据库驱动（jar包）的方式实现。</span></span><br><span class="line"><span class="comment"> * 简单起见，这里通过动态代理构造一个Connection，该Connection的代理实现为commit()方法调用休眠100ms。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Created by hank on 8/5/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*InvocationHandler是一个代理接口,每一个代理实例都关联了一个调用处理器（invocation handler）。</span></span><br><span class="line"><span class="comment">    当方法被代理实例调用时（invoked），方法的调用（invocation）将被编码和发送到方法的调用处理器。*/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="comment">// 对commit()方法进行操作</span></span><br><span class="line">            <span class="keyword">if</span> (method.getName().equals(<span class="string">"commit"</span>)) &#123;</span><br><span class="line">                <span class="comment">// 休眠100毫秒</span></span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Connection的代理，在commit时休眠100毫秒</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Connection <span class="title">createConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassLoader loader = ConnectionDriver<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        <span class="comment">// Class&lt;?&gt;[]</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = <span class="keyword">new</span> Class&lt;?&gt;[]&#123;Connection<span class="class">.<span class="keyword">class</span>&#125;</span>;</span><br><span class="line">        InvocationHandler h = <span class="keyword">new</span> ConnectionHandler();</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*  为指定的接口返回代理类的实例，该实例将使用指定的调用处理器调用方法，有3个参数分别如下</span></span><br><span class="line"><span class="comment">         loader是定义代理类的class loader</span></span><br><span class="line"><span class="comment">         interfaces是一个代理类实现的列表</span></span><br><span class="line"><span class="comment">         h是调用处理器，来发送方法调用*/</span></span><br><span class="line">        <span class="keyword">return</span> (Connection) Proxy.newProxyInstance(loader, interfaces, h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ConnectionPoolTest"><a href="#ConnectionPoolTest" class="headerlink" title="ConnectionPoolTest"></a>ConnectionPoolTest</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试简易数据库连接池的工作情况，模拟客户端ConnectionRunner获取、使用、释放连接过程。</span></span><br><span class="line"><span class="comment"> * Created by hank on 8/5/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPoolTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义线程池最大连接个数</span></span><br><span class="line">    <span class="keyword">static</span> ConnectionPool pool = <span class="keyword">new</span> ConnectionPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 保证所有客户端ConnectionRunner能够同时开始，来竞争线程池资源</span></span><br><span class="line"><span class="comment">     CountDownLatch构造函数接收int类型的参数作为计数器，</span></span><br><span class="line"><span class="comment">     想等待N个点完成(countDown()方法可以用在任何地方，所以N个点即可指N个线程，也可以是N个执行步骤。</span></span><br><span class="line"><span class="comment">     用在多个线程时，只需把CountDownLatch的引用传递到线程即可），就传入N。</span></span><br><span class="line"><span class="comment">     当调用countDown()方法是，N会减1；await()方法会阻塞当前线程，直到N变为0*/</span></span><br><span class="line">    <span class="keyword">static</span> CountDownLatch start = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main线程将等待所有ConnectionRunner结束后，才继续执行</span></span><br><span class="line">    <span class="keyword">static</span> CountDownLatch end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 线程数量</span></span><br><span class="line">        <span class="keyword">int</span> threadCount = <span class="number">20</span>;</span><br><span class="line">        end = <span class="keyword">new</span> CountDownLatch(threadCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// count为进行模拟操作的次数，总获取次数=threadCount*count;</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取到连接的次数</span></span><br><span class="line">        AtomicInteger got = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="comment">// 未获取到连接的次数</span></span><br><span class="line">        AtomicInteger notGot = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="comment">// 依次创建threadCount个连接</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ConnectionRunner(count, got, notGot), <span class="string">"ConnectionRunnerThread"</span>);</span><br><span class="line">            <span class="comment">// 执行start()方法，但是run里面还是在start.await()，都还在阻塞中，等待计时器清零再同步开始</span></span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// start 计数器变为0  创建线程工作完成</span></span><br><span class="line">        start.countDown();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 阻塞当前线程，转而执行上面创建的10线程，等到计数器为0后，再打印下面三条信息</span></span><br><span class="line">        end.await();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"总获取次数："</span> + threadCount * count);</span><br><span class="line">        System.out.println(<span class="string">"获取到次数："</span> + got);</span><br><span class="line">        System.out.println(<span class="string">"未获取到次数："</span> + notGot);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对应的成员变量</span></span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">        AtomicInteger got;</span><br><span class="line">        AtomicInteger notGot;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ConnectionRunner</span><span class="params">(<span class="keyword">int</span> count, AtomicInteger got, AtomicInteger notGot)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.count = count;</span><br><span class="line">            <span class="keyword">this</span>.got = got;</span><br><span class="line">            <span class="keyword">this</span>.notGot = notGot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现接口方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 阻塞当前线程，都在等待start的计数器，等清零0一块儿开始</span></span><br><span class="line">                start.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 从线程池中获取连接，如果1000ms内无法获取到，就返回null</span></span><br><span class="line">                    <span class="comment">// 分别统计连接获取的数量got和未获取到数量notGot</span></span><br><span class="line">                    Connection connection = pool.fetchConnection(<span class="number">1000</span>);</span><br><span class="line">                    <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 模拟创建声明</span></span><br><span class="line">                            connection.createStatement();</span><br><span class="line">                            <span class="comment">// 模拟提交，实际为通过代理休眠了100ms</span></span><br><span class="line">                            connection.commit();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="comment">// 完成后释放连接</span></span><br><span class="line">                            pool.releaseConnection(connection);</span><br><span class="line">                            <span class="comment">// 将获取到连接次数变量+1</span></span><br><span class="line">                            got.incrementAndGet();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (connection == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 未获取到连接，nogGot+1</span></span><br><span class="line">                        notGot.incrementAndGet();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 模拟操作次数-1</span></span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 模拟完成</span></span><br><span class="line">            end.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>一次运行结果展示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">总获取次数：200</span><br><span class="line">获取到次数：200</span><br><span class="line">未获取到次数：0</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p>当前代码实现的是10个线程同时运行获取连接池（10个连接不变）的情况，现可通过设定不同线程数量来观察获取连接的情况。具体<strong>线程数量</strong>和<strong>总获取次数</strong>的设定情况，以及测试结果得到的<strong>获取到的次数</strong>、<strong>未获取到的次数</strong>和<strong>未获取到的比例</strong>均参见下表：<br><em>说明：本机测试环境CPU:i5-3210M，内存:8G，不同环境可能测试结果会有偏差</em><br>线程数量与连接获取的关系</p>
<table>
<thead>
<tr>
<th>线程数量</th>
<th>总获取次数</th>
<th>获取到次数</th>
<th>未获取到次数</th>
<th>未获取到比例</th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>200</td>
<td>200</td>
<td>0</td>
<td>0.00%</td>
</tr>
<tr>
<td>20</td>
<td>400</td>
<td>388</td>
<td>12</td>
<td>3.00%</td>
</tr>
<tr>
<td>30</td>
<td>600</td>
<td>556</td>
<td>44</td>
<td>7.30%</td>
</tr>
<tr>
<td>40</td>
<td>800</td>
<td>694</td>
<td>106</td>
<td>13.25%</td>
</tr>
<tr>
<td>50</td>
<td>1000</td>
<td>820</td>
<td>180</td>
<td>18.00%</td>
</tr>
</tbody></table>
<p><strong>分析</strong>：<br>从上表可以看出随着获取连接线程的逐步增多，在保持线程池内10个连接的情况下，未获取到连接次数的比例也从0%到7.3%再到18%逐步增多。</p>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>数据库</tag>
        <tag>连接池</tag>
        <tag>CountDownLatch</tag>
      </tags>
  </entry>
  <entry>
    <title>第4章| Java并发编程基础</title>
    <url>/2019/08/04/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC4%E7%AB%A0-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h3><h4 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h4><p>现代操作系统调度的最小单元是线程，也叫轻量级进程（Light Weight Process），在一个进程里可以创建多个线程，这些线程都拥有各自的计数器、堆栈和局部变量等属性，并且能够访问共享的内存变量。</p>
<p>Java程序本身就是多线程的，可参见一下示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Java线程管理MXBean</span></span><br><span class="line">        ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();</span><br><span class="line">        <span class="comment">// 不需要获取同步的monitor和synchronizer信息，仅仅获取线程和线程堆栈信息</span></span><br><span class="line">        ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(<span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 遍历线程信息，仅打印线程ID和线程名称信息</span></span><br><span class="line">        <span class="keyword">for</span> (ThreadInfo threadInfo : threadInfos) &#123;</span><br><span class="line">            System.out.println(<span class="string">"["</span> + threadInfo.getThreadId() + <span class="string">"] "</span> + threadInfo.getThreadName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">[<span class="number">5</span>] Monitor Ctrl-Break</span><br><span class="line">[<span class="number">4</span>] Signal Dispatcher</span><br><span class="line">[<span class="number">3</span>] Finalizer</span><br><span class="line">[<span class="number">2</span>] Reference Handler</span><br><span class="line">[<span class="number">1</span>] main</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h4 id="为什么要使用多线程"><a href="#为什么要使用多线程" class="headerlink" title="为什么要使用多线程"></a>为什么要使用多线程</h4><ol>
<li><strong>更多地利用多处理器核心</strong>，将计算逻辑分配到多个处理器核心上，减少程序的处理时间，提高效率；</li>
<li><strong>提高响应时间</strong>，将数据一致性不强的操作派发给其他线程处理（也可以使用消息队列），来加快线程处理用户请求的响应，缩短响应时间，提升用户体验；</li>
<li><strong>更好的编程模型</strong>，Java为多线程编程提供了良好、考究并且一致的编程模型，使开发人员能更专注于解决问题。</li>
</ol>
<h4 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h4><ol>
<li><p>线程分配到的时间片多少决定了线程使用处理器资源的多少，而线程的优先级就决定线程需要多或者少分配一些处理器资源的线程属性。</p>
</li>
<li><p>在Java线程中，通过整形变量priority控制优先级，范围由1~10，默认等级是5，优先级高的线程分配到的时间片数量多于优先级低的。</p>
</li>
<li><p>频繁阻塞（休眠或IO操作）的线程需要设置较高优先级，偏重计算（需要较多CPU时间或偏运算）的线程则设置较低优先级，确保处理器不被独占。</p>
</li>
</ol>
<p><strong>由于不同的JVM以及操作系统中的线程规划存在差异，例如Mac和Ubuntu都会忽略线程优先级的设定，所以不能将线程的优先级作为程序正确性的依赖</strong></p>
<h4 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h4><p>线程共有6中状态，如下表所示：</p>
<table>
<thead>
<tr>
<th align="center">状态名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NEW</td>
<td>初始状态，线程被构建，但是还没有调用start()方法</td>
</tr>
<tr>
<td align="center">RUNNABLE</td>
<td>运行状态，Java线程将操作系统中的就绪和运行两种状态统称为“运行中”</td>
</tr>
<tr>
<td align="center">BLOCKED</td>
<td>阻塞状态，表示线程阻塞于锁</td>
</tr>
<tr>
<td align="center">WAITING</td>
<td>等待状态，表示当前线程需要等待其他线程作出一些特定动作（通知或中断）</td>
</tr>
<tr>
<td align="center">TIME_WATIING</td>
<td>超市等待状态，可以在指定时间内自行返回</td>
</tr>
<tr>
<td align="center">TERMINATED</td>
<td>终止状态，表示线程已被执行完毕</td>
</tr>
</tbody></table>
<p><font color="red">就绪+时间片=执行</font></p>
<p><strong>jstack使用步骤</strong></p>
<ol>
<li>运行代码;</li>
<li>jps查看当前Java进行有哪些，并确定代码的pid;</li>
<li>jstack pid;</li>
</ol>
<p>线程的状态随着代码的执行在不断切换，Java线程状态变迁图如下所示：<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%8F%98%E8%BF%81.jpg" alt="Java线程状态变迁"></p>
<h4 id="Daemon线程"><a href="#Daemon线程" class="headerlink" title="Daemon线程"></a>Daemon线程</h4><ol>
<li><p>一种支持性线程，被用作程序中后台调度以及支持性工作。当一个Java虚拟机不存在Daemon线程时，Java虚拟机就会退出。在启动线程之前，可用<code>Thread.setDaemon(true)</code>将线程设置为Daemon线程。</p>
</li>
<li><p>由于在JVM退出时Daemon线程中的finally代码块不一定会被执行，所以不可依靠finally代码块中的内容来确保执行关闭或清理资源等逻辑。</p>
</li>
</ol>
<h3 id="启动和终止线程"><a href="#启动和终止线程" class="headerlink" title="启动和终止线程"></a>启动和终止线程</h3><h4 id="构造线程"><a href="#构造线程" class="headerlink" title="构造线程"></a>构造线程</h4><ol>
<li><p>构造线程对象要明确所需属性，如线程所属的线程组、线程优先级，是否为Daemon线程等。</p>
</li>
<li><p>一个新构造的线程对象是由其parent线程来进行空间分配的，而child线程继承了parent是否为Daemon、优先级和加载资源的contextClassLoader以及可继承的ThreadLocal，同时还会分配一个唯一的ID来标识这个child线程。</p>
</li>
</ol>
<h4 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h4><p><strong>start()</strong> 含义：当前线程（即parent线程）同步告诉Java虚拟机，只要线程规划器空闲，应立即启动调用start()方法的线程。</p>
<p><em>tips：自定义线程最好有名称，方便jstack分析</em></p>
<h4 id="理解中断"><a href="#理解中断" class="headerlink" title="理解中断"></a>理解中断</h4><ol>
<li>中断可理解为线程的一个标识位属性，表示一个线程是否被其他线程进行了interrupt()中断操作。</li>
<li>Java中某些声明抛出InterruptedException的方法在抛InterruptedException之前，JVM会先将该线程的中断标识位清除，然后再抛出InterruptedException，此时调用isInterrupted()方法将会返回false。</li>
</ol>
<h4 id="过期的suspend-、resume-和stop"><a href="#过期的suspend-、resume-和stop" class="headerlink" title="过期的suspend()、resume()和stop()"></a>过期的suspend()、resume()和stop()</h4><p>不建议使用的原因：</p>
<ol>
<li>suspend()调用后，线程不会释放已经占有的资源（比如锁），而是占有着资源进入睡眠状态，容易引发<strong>死锁</strong>问题。</li>
<li>stop()方法在终结一个线程时不会保证线程资源的正确释放，通常是没有给予线程完成释放工作的机会，会导致线程工作在不确定的状态下。</li>
</ol>
<p><strong>暂停和恢复操作可用等待和通知机制代替。</strong></p>
<h4 id="安全地终止线程"><a href="#安全地终止线程" class="headerlink" title="安全地终止线程"></a>安全地终止线程</h4><p>通过标识位或中断操作的方式能够使线程在终止时有机会去清理资源，而不是武断地将线程停止，因此这种方式显得更加安全和优雅。</p>
<h3 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h3><h4 id="volatile和synchronized关键字"><a href="#volatile和synchronized关键字" class="headerlink" title="volatile和synchronized关键字"></a>volatile和synchronized关键字</h4><p>现代多核处理器为了加快程序的执行，每个执行的线程不仅能从共享内存中获取变量，其自身也可以拥有一分拷贝的变量，所以一个线程在程序执行的时候获取到变量不一定是最新的。</p>
<ul>
<li><strong>volatile</strong>修饰字段（成员变量）是在告诉程序中的线程需要从共享内存中访问该变量，而对它的改变必须刷新回共享内存中，从而保证所有线程对该变量访问的可见性（<em>不推荐过多使用volatile变量，因为过多的获取和写入将降低程序执行效率</em>）；</li>
<li><strong>synchronzied</strong>修饰方法或以同步块方式使用，确保多个线程在同一时刻，只有一个线程能操作方法或同步块，保证了线程对变量的可见性与排他性。</li>
</ul>
<ol>
<li>可以用<code>javap -v *.class</code>命令来查看生成clas文件信息，分解class文件。进而可以发现同步块的实现使用了<code>monitorenter</code>和<code>monitorexit</code>，而同步方法的实现是依靠修饰符上的<code>ACC_SYNCHRONIZED</code>完成的。<strong>这两种方式本质上都是获取对象的监视器，获取过程是排他的，即一个时刻只有一个线程能获取到synchronized所保护对象的监视器</strong><br></li>
<li>对象、对象监视器、同步队列和执行线程间的关系如下：<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E5%AF%B9%E8%B1%A1%E3%80%81%E5%AF%B9%E8%B1%A1%E7%9B%91%E8%A7%86%E5%99%A8%E3%80%81%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97%E5%92%8C%E6%89%A7%E8%A1%8C%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.jpg" alt="对象、对象监视器、同步队列和执行线程间的关系"><br>进入同步队列的线程处于阻塞状态！</li>
</ol>
<h4 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h4><ol>
<li>A线程修改了一个对象的值，而B线程感知到了变化，然后进行相应的操作。整个过程开始于A线程，当最终执行是B线程，这里A是生产者Ｂ是消费者。这种模式隔离了“做什么”和“怎么做”，在功能层实现了解耦，体系结构具备了良好的伸缩性。</li>
<li>等待/通知机制，指A线程调用O对象的wait()方法进入等待状态，而B线程调用notify()或notifyAll()方法后，A线程收到通知从O对象的wait()方法返回，进而执行后续操作。</li>
</ol>
<p><strong>wati()、notify()和notifyAll()方法使用细节：</strong></p>
<ul>
<li>wati()、notify()和notifyAll()方法需要先对调用对象加锁；</li>
<li>调用wait()方法后，线程状态由RUNNING变为WAITING，并将当前线程放置到对象的等待队列中；</li>
<li>notify()和notifyAll()方法调用后，<strong>等待线程不会立即从wait()方法返回，而是需要调用notify()和notifyAll()方法的线程释放锁</strong>，等待线程才有机会从wait()返回；</li>
<li>notify()/notifyAll()方法将等待队列中的一个/所有等待线程从等待队列移到同步队列，被移动线程的状态从WAITING变为BLOCKED;</li>
<li>从wait()方法返回的前提是获得了调用对象的锁。</li>
</ul>
<h4 id="等待-通知的经典范式"><a href="#等待-通知的经典范式" class="headerlink" title="等待/通知的经典范式"></a>等待/通知的经典范式</h4><ul>
<li><p>等待方遵循如下规则：<br>1）获取对象的锁；<br>2）如果条件不满足，那么调用对象的wait()方法，被通知后仍要检查条件；<br>3）条件满足则执行对应的逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">对应的伪代码：</span><br><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">    <span class="keyword">while</span>(条件不满足)&#123;</span><br><span class="line">        对象.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    执行对应的逻辑;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通知方遵循如下规则：<br>1）获取对象的锁；<br>2）改变条件；<br>3）通知所有等待该对象的线程；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">对应的伪代码：</span><br><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">    改变条件;</span><br><span class="line">    对象.notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="管道输入-输出流"><a href="#管道输入-输出流" class="headerlink" title="管道输入/输出流"></a>管道输入/输出流</h4><ol>
<li><p><strong>明晰概念</strong>：管道输入/输出流主要用于线程之间的数据传输，传输的介质为内存，由4种具体实现：PipedOutputStream（字节）、PipedInputStream（字节）、PipedReader（字符）和PipedWriter（字符）。</p>
</li>
<li><p><strong>Piped流必须先进行绑定，即调用connect()方法</strong>，如果没有将输入/输入流绑定起来，访问该流将会抛出异常（<em>实测，并没有抛出异常？！</em>）。</p>
</li>
</ol>
<h4 id="Thread-join-的使用"><a href="#Thread-join-的使用" class="headerlink" title="Thread.join()的使用"></a>Thread.join()的使用</h4><p>现有两个线程A和Ｂ，如果在A线程中执行了B.join()，那么A线程需要等待B线程终止后才能从B.join()返回。</p>
<h4 id="ThreadLocal的使用"><a href="#ThreadLocal的使用" class="headerlink" title="ThreadLocal的使用"></a>ThreadLocal的使用</h4><ol>
<li>ThreadLocal即线程变量，以ThreadLocal对象为键、任意对象为值的存储结构。</li>
<li>优势：可以计算两个方法不在一个方法或类中时的前后间隔时间，比如在AOP中计算方法调用前到方法调用后的间隔时间。</li>
</ol>
<h3 id="线程应用实例"><a href="#线程应用实例" class="headerlink" title="线程应用实例"></a>线程应用实例</h3><h4 id="等待超时模式"><a href="#等待超时模式" class="headerlink" title="等待超时模式"></a>等待超时模式</h4><p><em>设：①等待时长REMANINING=mills；②超时时间FUTURE=now+mills。</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">伪代码</span><br><span class="line"><span class="comment">// 当前对象加锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">get</span><span class="params">(<span class="keyword">long</span> mills)</span> throw InterruptedException</span>&#123;</span><br><span class="line">    <span class="keyword">long</span> remanining = mills;</span><br><span class="line">    <span class="keyword">long</span> future = System.currentTimeMills()+mills;</span><br><span class="line">    <span class="comment">// 当超时大于0并且result返回值不满足时</span></span><br><span class="line">    <span class="keyword">while</span>(remanining&gt;<span class="number">0</span> &amp;&amp; result==<span class="keyword">null</span>)&#123;</span><br><span class="line">        Thread.wait(remanining);</span><br><span class="line">        remaining=future - System.currentTimeMills();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="一个简单的数据库连接池实例"><a href="#一个简单的数据库连接池实例" class="headerlink" title="一个简单的数据库连接池实例"></a>一个简单的数据库连接池实例</h4><p><a href="https://fcbhank.gitee.io/2019/08/05/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/#more" target="_blank" rel="noopener">手写简易数据库连接池</a></p>
<h4 id="线程池技术及示例"><a href="#线程池技术及示例" class="headerlink" title="线程池技术及示例"></a>线程池技术及示例</h4><h4 id="一个基于线程技术的简单web服务器"><a href="#一个基于线程技术的简单web服务器" class="headerlink" title="一个基于线程技术的简单web服务器"></a>一个基于线程技术的简单web服务器</h4><ul>
<li><input disabled type="checkbox"> 手写简易web服务器</li>
</ul>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>线程启动</tag>
        <tag>线程终止</tag>
        <tag>线程通信</tag>
      </tags>
  </entry>
  <entry>
    <title>第3章| Java内存模型——04设计</title>
    <url>/2019/08/02/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC3%E7%AB%A0-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E2%80%94%E2%80%9404%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h3 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h3><h4 id="JMM的设计"><a href="#JMM的设计" class="headerlink" title="JMM的设计"></a>JMM的设计</h4><p>JMM的设计维持一个平衡点：既要让开发人员提供足够强的内存可见性保证，同时要对编译器和处理器的限制要尽可能地放松。</p>
<p>JMM两种重排序策略</p>
<ol>
<li>对于会改变程序执行结果的重排序，JMM要求编译器和处理器必须禁止这种重排序；</li>
<li>对于不会改变程序执行结果的重排序，JMM对编译器和处理器不做要求（即允许重排序）</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/JMM%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="JMM的设计示意图"></p>
<p><strong>实际，happens-before关系本质上和as-if-serial语义是一回事</strong>，辨析如下：</p>
<ul>
<li>as-if-serial语义保证单线程内程序的执行结果不被改变，happens-before关系保证正确同步的多线程程序的执行结果不被改变；</li>
<li>as-if-serial语义给编写单线程程序的程序员创造了一个幻境：单线程程序是按照程序的顺序来执行的。happens-before关系给编写多线程程序的程序员另一个幻境：正确同步的多线程程序是按照happens-before指定的顺序执行的。</li>
</ul>
<h3 id="Java-内存模型综述"><a href="#Java-内存模型综述" class="headerlink" title="Java 内存模型综述"></a>Java 内存模型综述</h3><p>根据对不同类型的读/写操作组合的执行顺序的放松，将常见处理器内存模型划分如下：</p>
<ul>
<li>放松程序中写-读操作的顺序，由此产生了Total Store Ordering内存模型（简称TSO）；</li>
<li>在上面的基础上，继续放松程序中写-写操作的顺序，由此产生了Partial Store Order内存模型（简称PSO）；</li>
<li>在前两条的基础上，继续放松程序中读-写和读-读操作的顺序，由此产生了Relaxed Memory Order内存模型（简称为RMO）和PowerPC内存模型。</li>
</ul>
<p>处理器内存模型的特征表如下：</p>
<table>
<thead>
<tr>
<th>内存模型名称</th>
<th>对应的处理器</th>
<th>Stored-Load重排序</th>
<th>Store-Store重排序</th>
<th>Load-Load和Load-Store重排序</th>
<th>可以更早读取到其他处理器的写</th>
<th>可以更早读取到当前处理器的写</th>
</tr>
</thead>
<tbody><tr>
<td>TSO</td>
<td>sparc-TSO X64</td>
<td>Y</td>
<td></td>
<td></td>
<td></td>
<td>Y</td>
</tr>
<tr>
<td>PSO</td>
<td>sparc-PSO</td>
<td>Y</td>
<td>Y</td>
<td></td>
<td></td>
<td>Y</td>
</tr>
<tr>
<td>RMO</td>
<td>ia64</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td></td>
<td>Y</td>
</tr>
<tr>
<td>PowerPC</td>
<td>PowerPC</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
</tbody></table>
<h4 id="JMM的内存可见性保证"><a href="#JMM的内存可见性保证" class="headerlink" title="JMM的内存可见性保证"></a>JMM的内存可见性保证</h4><ul>
<li>单线程程序。单线程程序不会出现内存可见性问题。编译器、runtime和处理器会共同确保单线程程序的执行结果与改程序在顺序一致性模型中的执行结果相同；</li>
<li>正确同步带额多线程程序。正确同步的多线程程序的执行将具有顺序一致性（程序的执行结果与改程序在顺序一致性内存模型中的执行结果相同）。这是JMM关注重点，JMM通过限制编译器和处理器的重排序来为程序员提供内存可见性保证。</li>
<li>未同步/未正确同步的多线程程序。JMM为它们提供了最小安全性保障：线程执行时读取到的值，要么是之前某个线程写入的值，要么是默认值（0，null，false）。</li>
</ul>
<p><strong>注意最小安全保障与64位数据的非原子性写并不矛盾</strong>，最小安全性保障对象默认初始化后才会被任意线程使用，最小安全性“发生”在对象被任意线程使用之前。64位数据的非原子性写“发生”在对象被任意线程使用的过程中（写共享变量）</p>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>内存模型</tag>
      </tags>
  </entry>
  <entry>
    <title>第3章| Java内存模型——03同步原语</title>
    <url>/2019/08/01/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC3%E7%AB%A0-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E2%80%94%E2%80%9403%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD/</url>
    <content><![CDATA[<h3 id="volatile的特性"><a href="#volatile的特性" class="headerlink" title="volatile的特性"></a>volatile的特性</h3><p><em>tips:</em> 为好理解volatile特性，可将对volatile变量的单个读/写看成是使用同一个锁对这些单个读/写操作做了同步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">示例代码：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolatileFeaturesExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> vl = <span class="number">0L</span>; <span class="comment">//使用volatile声明64位的long型变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</span><br><span class="line">        vl = l; <span class="comment">//单个volatile变量的写</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        vl++; <span class="comment">//复合（多个）volatile变量的读/写</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vl; <span class="comment">//单个volatile变量的读</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">当多线程调用上面的<span class="number">3</span>个方法时，上述方法等同于下面实现</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolatileFeaturesExample1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> vl = <span class="number">0L</span>; <span class="comment">// 64位的long型普通变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;<span class="comment">//对单个的普通变量的写用同一个锁同步</span></span><br><span class="line">        vl = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123; <span class="comment">//普通方法调用</span></span><br><span class="line">        <span class="keyword">long</span> temp = get(); <span class="comment">//调用已同步的读方法</span></span><br><span class="line">        temp += <span class="number">1L</span>; <span class="comment">//普通写操作</span></span><br><span class="line">        set(temp); <span class="comment">//调用已同步的写方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="comment">//对单个的普通变量的读用同一个锁同步</span></span><br><span class="line">        <span class="keyword">return</span> vl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>锁的happens-before规则保证释放锁和获取锁的两个线程之间内存可见</strong>，意味着对一个volatile变量的读，总能看到对这个变量最后的写入。</p>
<p>volatile变量自身具有两个特性：</p>
<ol>
<li>可见性：一个volatile变量的读，总能看到对这个变量最后的写入；</li>
<li>原子性: 对任意单个volatile变量的读/写具有原子性，但类似于volatile++这种复合操作不具有原子性。</li>
</ol>
<h4 id="volatile写-读建立的happens-before关系"><a href="#volatile写-读建立的happens-before关系" class="headerlink" title="volatile写-读建立的happens-before关系"></a>volatile写-读建立的happens-before关系</h4><p><strong>从jdk1.5开始，volatile变量的读-写可以实现线程之间的通信</strong><br>从内存语义角度来说，volatile的<strong>写-读</strong>与锁的<strong>释放-获取</strong>具有相同的内存效果(写-&gt;释放，读-&gt;获取)。</p>
<h4 id="volatile写-读的内存语义"><a href="#volatile写-读的内存语义" class="headerlink" title="volatile写-读的内存语义"></a>volatile写-读的内存语义</h4><p><em>写-内存语义</em>：<strong>当写一个volatile变量时，JMM会把该线程对应的本地内存中共享变量值刷新到主内存</strong><br><em>读-内存语义</em>：<strong>当读一个volatile变量时，JMM会把该线程本地内存置为无效。线程接下来将从主内存中读取共享变量</strong></p>
<h4 id="volatile内存语义的实现"><a href="#volatile内存语义的实现" class="headerlink" title="volatile内存语义的实现"></a>volatile内存语义的实现</h4><p>volatile重排序规则表</p>
<table style="text-align:center">
<tr>
<th>是否能重排序</th>
<th colspan="3">第二个操作</th>
</tr>
<tr>
<th>第一个操作</th>
<th>普通读/写</th>
<th>volatile读</th>
<th>volatile写</th>
</tr>
<tr>
<td>普通读/写</td>
<td></td>
<td></td>
<td>NO</td>
</tr>
<tr>
<td>volatile读</td>
<td>NO</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>volatile写</td>
<td></td>
<td>NO</td>
<td>NO</td>
</tr>
</table>

<ol>
<li>为实现volatile的内存语义，编译器生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。保守策略的JMM内存屏障插入策略：</li>
</ol>
<ul>
<li>在每个volatile写操作前面插入一个StoreStore屏障；</li>
<li>在每个volatile写操作后面插入一个StoreLoad屏障；</li>
<li>在每个volatile读操作后面插入一个LoadLoad屏障；</li>
<li>在每个volatile读操作后面插入一个LoadStore屏障；</li>
</ul>
<p>保守策略下，volatile写插入内存屏障后生成的指令序列示意图如下：<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E6%8C%87%E4%BB%A4%E5%BA%8F%E5%88%97%E7%A4%BA%E6%84%8F%E5%9B%BE-%E5%86%99.png" alt="指令序列示意图-写"></p>
<p>保守策略下，volatile读插入内存屏障后生成的指令序列示意图如下：<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E6%8C%87%E4%BB%A4%E5%BA%8F%E5%88%97%E7%A4%BA%E6%84%8F%E5%9B%BE-%E8%AF%BB.png" alt="指令序列示意图-读"></p>
<h3 id="锁的内存语义"><a href="#锁的内存语义" class="headerlink" title="锁的内存语义"></a>锁的内存语义</h3><p>锁是Java并发编程中最重要的同步机制，它除了让临界区互斥执行外，还可以让释放锁的线程向获取锁的另一个线程发送消息。</p>
<h4 id="锁内存语义的实现"><a href="#锁内存语义的实现" class="headerlink" title="锁内存语义的实现"></a>锁内存语义的实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">示例代码</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock(); <span class="comment">//获取锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            a++;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock(); <span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock(); <span class="comment">//获取锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = a;</span><br><span class="line">            <span class="comment">//……</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock(); <span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">在ReentrantLock中，调用lock()方法获取锁；调用unlock()方法释放锁。</span><br></pre></td></tr></table></figure>

<p><strong>ReentrantLock</strong>实现依赖于Java同步框架<strong>AbstractQueuedSynchronizer</strong>，该框架使用一个整形的volatile变量来维护同步状态，具体ReentrantLock类图如下：<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/ReentrantLock%E7%9A%84%E7%B1%BB%E5%9B%BE.png" alt=" ReentrantLock的类图"></p>
<p>ReentrantLock分为公平锁和非公平锁，内存语义如下：</p>
<ul>
<li>公平锁和非公平锁释放时，最后都要写一个volatile变量state；</li>
<li>公平锁获取时，首先会去读取volatile变量；</li>
<li>非公平锁获取时，首先会用CAS更新volatile变量，这个操作同时具有volatile读/写的内存语义。</li>
</ul>
<p>同样对reentrantLock的分析可以看出，锁释放-获取的内存语义的实现至少由以下两种方式：</p>
<ol>
<li>利用volatile变量的读-写所有具有的内存语义；</li>
<li>利用CAS所附带的volatile读和volatile写的内存语义。</li>
</ol>
<h4 id="concurrent包的实现"><a href="#concurrent包的实现" class="headerlink" title="concurrent包的实现"></a>concurrent包的实现</h4><p>Java线程之间的通信由以下4种方式</p>
<ol>
<li>A线程写volatile变量，随后B线程读这个volatile变量；</li>
<li>A线程写volatile变量，随后B线程用CAS更新这个volatile变量；</li>
<li>A线程用CAS更新一个volatile变量，随后B线程用CAS更新这个volatile变量；</li>
<li>A线程用CAS更新一个volatile变量，随后B线程读这个volatile变量；</li>
</ol>
<p>从整体看，concurrent包的实现示意图如下：<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/concurrent%E5%8C%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="concurrent包的实现示意图"></p>
<h3 id="final域的内存语义"><a href="#final域的内存语义" class="headerlink" title="final域的内存语义"></a>final域的内存语义</h3><h4 id="final域的重排序规则"><a href="#final域的重排序规则" class="headerlink" title="final域的重排序规则"></a>final域的重排序规则</h4><p>对于final域，编译器和处理器遵守以下两个重排序规则：</p>
<ol>
<li>在构造函数内，对一个final域的写入，与随后把这个被构造对象的引用赋值给一个引用变量，这个操作之间不能重排序；</li>
<li>初次读一个包含final域的对象的引用，与随后读这个final域的引用，这个操作之间不能重排序</li>
</ol>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>内存模型</tag>
        <tag>同步原语</tag>
      </tags>
  </entry>
  <entry>
    <title>第3章| Java内存模型——02顺序一致性</title>
    <url>/2019/07/31/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC3%E7%AB%A0-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E2%80%94%E2%80%9402%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/</url>
    <content><![CDATA[<h3 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h3><p><strong>数据依赖性</strong>:如果两个操作访问同一个变量，且其中有一个为写操作，这时这两个操作存在数据依赖性。<br><font color="red">Note：数据依赖性仅针对单个处理器中执行的指令序列和单个线程中执行的操作</font>，不同处理器之间以及不同线程之间的数据依赖性不被编译器和处理器考虑。</p>
<p><strong>as-if-serial</strong>语义：不管如何重排序，（单线程）程序的执行结果不能被改变；编译器、runtime和处理器都必须遵守这个语义。</p>
<p>在计算机中，软件和硬件技术的一个共同目标：<strong>在不改变程序的执行结果前提下，可以尽量提高并行度</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(flag)&#123; <span class="comment">// A</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>+<span class="number">1</span>; <span class="comment">// B</span></span><br><span class="line">&#125;</span><br><span class="line">这个时候就说A和Ｂ之前存在控制依赖</span><br></pre></td></tr></table></figure>

<p>在单线程程序中，对存在控制依赖的操作重排序，不会改变执行结果；但在多线程中，可能会改变程序的执行结果。</p>
<h3 id="顺序一致性"><a href="#顺序一致性" class="headerlink" title="顺序一致性"></a>顺序一致性</h3><p>当数据未能正确同步时，就会存在<strong>数据竞争</strong>现象。数据竞争的定义如下：</p>
<ul>
<li>在一个线程中写一个变量，</li>
<li>在另一个线程中读同一个变量</li>
<li>而且写和读没有通过读来排序</li>
</ul>
<p>如果程序是正确同步的，程序的执行将具有顺序一致性（Sequentially Consistent）——即程序的执行结果与在顺序一致性内存模型中的执行结果相同，这里的同步包括常用的同步原语（synchronized、volatile、final）的正确使用。</p>
<h4 id="顺序一致性内存模型"><a href="#顺序一致性内存模型" class="headerlink" title="顺序一致性内存模型"></a>顺序一致性内存模型</h4><p>该模型是一个<strong>理想化的理论参考模型</strong>，为开发人员同提供了极强的内存可见性保证。有以下两大特性：</p>
<ol>
<li>一个程序中的所有操作必须按照程序的顺序来执行；</li>
<li>（不管程序是否同步）所有的线程都只能看到一个单一的操作执行顺序。在此模型中，每个操作都必须原子执行并立刻对所有线程可见。<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%A7%86%E5%9B%BE.png" alt="内存一致性模型的视图"></li>
</ol>
<ul>
<li>未同步程序在<strong>顺序一致性模型</strong>中虽然整体执行无序，但所有线程都只能看到一个一致的整体执行顺序（这是因为该模型能保证每个操作对任意线程立即可见）。</li>
<li>未同步程序在<strong>JMM</strong>中不但整体执行无序，且所有线程看到的操作执行顺序也可能不一样。</li>
</ul>
<p><strong>临界区概念</strong><br>当两个线程竞争同一资源时，如果对资源的访问顺序敏感，就称存在竞态条件。导致竞态条件发生的代码区称作临界区。</p>
<p>JMM具体实现上的方针是：在不改变（正确同步的）程序执行结果的前提下，尽可能地配合编译器和处理器的优化。</p>
<h4 id="未同步程序的执行特性"><a href="#未同步程序的执行特性" class="headerlink" title="未同步程序的执行特性"></a>未同步程序的执行特性</h4><ol>
<li><p>对于未同步或未正确同步的多线程程序，JMM只提供最小安全性：<strong>线程执行时读取到的值，要么是之前某个线程写入的值，要么是默认值</strong></p>
</li>
<li><p><strong>JMM不保证对64位的long型和double型变量的写操作具有原子性</strong>，而顺序一致性模型保证对所有的内存读/写操作都具有原子性。</p>
</li>
<li><p>总线会同步试图并发使用总线的事务。在一个处理器执行<strong>总线事务</strong>（处理器和内存之间数据传递的一系列步骤）期间，总线会禁止其他的处理器和I/o设备执行内存的读/写。总线的工作机制如下图：<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E6%80%BB%E7%BA%BF%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" alt="总线的工作机制"></p>
</li>
<li><p><strong>注意：</strong>jdk5之前，一个64为long/double型变量的<strong>读/写</strong>操作可以被拆分为两个32位的<strong>读/写</strong>操作来执行，而jdk5之后只允许将一个64为long/double型变量的<strong>写</strong>操作拆分为两个32位的<strong>写</strong>操作来执行</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>内存模型</tag>
        <tag>顺序一致性</tag>
      </tags>
  </entry>
  <entry>
    <title>第3章| Java内存模型——01基础</title>
    <url>/2019/07/30/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC3%E7%AB%A0-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E2%80%94%E2%80%9401%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<blockquote>
<p>Java线程之间的通信对开发人员完全透明，内存可见性就是经常困扰的问题之一。本章可分为4个部分：</p>
<ol>
<li>Java内存模型的基础<br>主要介绍内存模型相关的基本概念；</li>
<li>Java内存模型的顺序一致性<br>主要介绍重排序与顺序一致性内存模型；</li>
<li>同步原语<br>主要介绍3个同步原语（synchronized、volatile和final）的内存语义及重排序规则在处理器中的实现；</li>
<li>Java内存模型的设计<br>主要介绍Java内存模型的设计原理，及其与处理器内存模型和顺序一致性内存模型的关系。</li>
</ol>
</blockquote>
<h3 id="Java内存模型的基础"><a href="#Java内存模型的基础" class="headerlink" title="Java内存模型的基础"></a>Java内存模型的基础</h3><p><strong>问题1</strong>：线程之间是如何通信的？(<strong>通信</strong>指线程之间通过一种机制来交换信息)<br><strong>答</strong>：<br><strong>①共享内存</strong>：在共享内存的并发模型里，线程之间共享程序的公共状态，通过写-读内存中的公共状态进行隐式通信；<br><strong>②消息传递</strong>：在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过发送消息来显式通信。</p>
<p><strong>问题2</strong>：线程之间是如何同步的？（<strong>同步</strong>指程序中用于控制不同线程间操作发生相对顺序的机制）<br><strong>答</strong>：<br>①在<strong>共享内存</strong>并发模型里，同步是显式进行的。开发人员必须显式指定某个方法或某段代码需要在线程之间互斥执行；<br>②在<strong>消息传递</strong>并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。</p>
<p><strong>Java的并发采用的是共享内存模型</strong>，因此其通信是隐式的，同步是显式的。</p>
<h4 id="Java内存模型的抽象结构"><a href="#Java内存模型的抽象结构" class="headerlink" title="Java内存模型的抽象结构"></a>Java内存模型的抽象结构</h4><ol>
<li>Java中所有实例域、静态域和数组元素都存储在<strong>堆内存</strong>中，堆内存在线程之间共享;</li>
<li>Java中局部变量、方法定义参数和异常处理器参数不会在线程之间共享，因此不存在内存可见性问题，也不会受到内存模型的影响。</li>
</ol>
<p><strong>Java线程间的通信由Java内存模型（JMM）控制，其决定一个线程对共享变量的写入何时对另一个线程可见。</strong><br>Java内存模型抽象结构示意图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Java内存模型抽象结构示意图"></p>
<p><strong>JMM通过控制主内存与每个线程本地内存之间的交互，来为Java开发人员提供内存可见性保证</strong></p>
<h4 id="从源代码到指令的重排序"><a href="#从源代码到指令的重排序" class="headerlink" title="从源代码到指令的重排序"></a>从源代码到指令的重排序</h4><p>为了提高程序执行性能，编译器和处理器通常会重排序指令，共有以下3种重排序</p>
<ol>
<li><p>编译器优化的重排序<br>编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</p>
</li>
<li><p>指令级并行的重排序<br>现代处理器采用了指令级并行技术（Instruction-Level Paralleism， ILP）将多条指令重叠执行。在不存在数据依赖性下，处理器可改变语句对应机器指令的执行顺序。</p>
</li>
<li><p>内存重排序<br>由于处理器的缓存和读/写缓冲区的存在，使得加载和存储操作看上去是乱序执行。</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%B0%E6%9C%80%E7%BB%88%E6%89%A7%E8%A1%8C%E7%9A%84%E6%8C%87%E4%BB%A4%E5%BA%8F%E5%88%97%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="从源码到最终执行的指令序列的示意图"></p>
<p><strong>J内存模型的处理器重排序规则会要求Java编译器在生成指令时，插入特定类型的内存屏障指令，来禁止特定类型的处理器重排序,从而避免多线程可能出现内存可见性的问题</strong></p>
<p><strong>写缓冲区</strong>，用来临时保存写入内存的数据，有以下<strong>好处</strong>：</p>
<ol>
<li>可以保证指令流水线持续运行</li>
<li>可以避免由于处理器速度过快从而需要等待向内存写入造成的时间延迟</li>
<li>批处理刷新写缓冲区，与合并写缓冲区中对同一内存地址的多次写的方式减少了对内存总线的占用</li>
</ol>
<p><strong>缺陷</strong>：每个写缓冲区仅对自己的处理器可见，这样会导致处理器对内存的读/写操作不一定与实际发生的内存读/写顺序一致。</p>
<p>一般常见的处理器都允许Store-Load重排序，不允许对存在数据依赖的操作做重排序。<strong>常用的Intel和AMD所使用的x86架构，只支持Store-Load重排序，这是因为CPU在写入的时候是首先写入寄存器，包括各级缓存，此时并没有刷新到内存中，如果等待其完成再读则太慢了。</strong></p>
<h4 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h4><p>从jdk5后，Java的内存模型为<strong>JSR-133</strong>内存模型。该内存模型使用<strong>happens-before</strong>来描述操作之间的内存可见性，这里的操作可以使同一个线程，也可以是不同线程。<br>happens-before规则：</p>
<ul>
<li>程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作；</li>
<li>监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁加锁；</li>
<li>volatile变量规则：对于一个volatile域的写，happens-before于任意后续对这个volatile域的读；</li>
<li>传递性：如果A happens-before B，且B happens-before C，那么A happens-before C</li>
<li>start规则：如果线程A执行操作ThreadB.start()（启动B线程），那么A线程的ThreadB.start()操作happens-before于线程B的任意操作；</li>
<li>join()原则：如果线程A执行操作ThreadB.join()并返回成功，那么线程B中的任意操作happens-before与线程A从ThreadB.join()操作成功返回。</li>
</ul>
<p><font color="red">Note：两个操作之间由happens-before关系，并不意味着前一个操作必须要在后一个操作之前执行（程序顺序规则：如果二者不存在数据依赖，就可以颠倒下顺序），其只要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在后一个操作之前。</font><br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/happens-before%E4%B8%8EJMM%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="happens-before与JMM的关系"></p>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>内存模型</tag>
      </tags>
  </entry>
  <entry>
    <title>记录next主题的hexo博客配置</title>
    <url>/2019/07/30/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E8%AE%B0%E5%BD%95next%E4%B8%BB%E9%A2%98%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="添加评论模块-utterances"><a href="#添加评论模块-utterances" class="headerlink" title="添加评论模块 utterances"></a>添加评论模块 utterances</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>为部署在github（或gitee）上安装了next主题的hexo博客添加评论系统，以此增加博客的互动性。</p>
<h4 id="为什么选择utterances评论系统？"><a href="#为什么选择utterances评论系统？" class="headerlink" title="为什么选择utterances评论系统？"></a>为什么选择utterances评论系统？</h4><h5 id="utterances的简介"><a href="#utterances的简介" class="headerlink" title="utterances的简介"></a>utterances的简介</h5><p>一款基于GitHub中issues开发的轻量级评论插件。可将GitHub的issues作为博客评论，wiki页等等；</p>
<ul>
<li>开源；🙌</li>
<li>不记录信息，没有广告, 一直免费；📡🚫</li>
<li>不保存数据，所有数据都保存在GitHub issues中；🔓</li>
<li>支持Primer, 该工具包支撑着GitHub的css样式；💅</li>
<li>暗色主题；🌘</li>
<li>轻量级. Vanilla TypeScript. 不需要下载字体, JS框架 或 polyfills for evergreen browsers. 🐦🌲</li>
</ul>
<h4 id="其他评论插件"><a href="#其他评论插件" class="headerlink" title="其他评论插件"></a>其他评论插件</h4><p>流行的<code>gitment</code>和<code>gitalk</code>评论插件要求的权限过多，有的甚至存在<a href="https://blog.wolfogre.com/posts/security-problem-of-gitment/" target="_blank" rel="noopener">安全性争议</a>。</p>
<h4 id="添加步骤"><a href="#添加步骤" class="headerlink" title="添加步骤"></a>添加步骤</h4><h5 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h5><p>在GitHub上新建一个库<code>comments</code>，该库专门用来存放评论内容。</p>
<h5 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h5><p>安装GitHua App——utterances</p>
<p>（1）进入<a href="https://github.com/apps/utterances" target="_blank" rel="noopener">utterances</a>页面，点击<font color="green">Install</font>按钮；</p>
<p>（2）这里选择<code>Only select repositories</code>，输入并选中前面新建的<code>comments</code>库；这里也可以看到<code>utterances</code>不能操作代码，只可以操作元数据，以及读写issues；点击下方<font color="green">Install</font>按钮；</p>
<h5 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h5><p>在next主题中手动添加<code>utterances</code>，所有操作都在next主题文件夹下</p>
<p>（1）在layout/_third-party/comments/中新建文件utterances.swig，并添加下面的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.utterances.enable %&#125;</span><br><span class="line">  &lt;script src=&quot;https://utteranc.es/client.js&quot;</span><br><span class="line">    repo=&quot;&#123;&#123; theme.utterances.repo &#125;&#125;&quot;</span><br><span class="line">    issue-term=&quot;&#123;&#123; theme.utterances.issue_term &#125;&#125;&quot;</span><br><span class="line">    theme=&quot;&#123;&#123; theme.utterances.theme &#125;&#125;&quot;</span><br><span class="line">    crossorigin=&quot;anonymous&quot;</span><br><span class="line">    async&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>（2）在layout/_partials/comments.swig中添加下面的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.utterances.enable %&#125;</span><br><span class="line">    &lt;div class=&quot;comments&quot; id=&quot;comments&quot;&gt;</span><br><span class="line">      &#123;% include &apos;../_third-party/comments/utterances.swig&apos; %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（3）在_config.yml中添加以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">utterance:</span><br><span class="line">  enable: true</span><br><span class="line">  #仓库名字，这里用来判断评论是否为博主本人owner为博主的username</span><br><span class="line">  repo: owner/comment</span><br><span class="line">  #主题</span><br><span class="line">  theme: github-light</span><br><span class="line">  #映射配置，这里指issues中标题</span><br><span class="line">  issue-term: title</span><br></pre></td></tr></table></figure>

<h4 id="utterances-工作原理"><a href="#utterances-工作原理" class="headerlink" title="utterances 工作原理"></a>utterances 工作原理</h4><p>当<code>utterances</code>被加载后，它会利用GitHub中的<a href="https://developer.github.com/v3/search/#search-issues" target="_blank" rel="noopener">issue search API</a>去寻找基于url、pathname或title关联页面的issues。如果<code>utterances</code>未能找到匹配页面的issues，没关系，<a href="https://github.com/utterances-bot" target="_blank" rel="noopener">utterances-bot</a>将会在有人评论后第一时间自动创建一条issue。</p>
<p>进行评论的话，用户必须允许<code>utterances</code>通过GitHub的<a href="https://developer.github.com/v3/oauth/#web-application-flow" target="_blank" rel="noopener">OAuth flow</a>去授权登录。或者用户可以直接在GitHub issue上进行评论。</p>
<h4 id="关闭评论"><a href="#关闭评论" class="headerlink" title="关闭评论"></a>关闭评论</h4><p>如果想关闭某篇博客的评论部分，仅需在首部两条<code>---</code>之间添加<code>comments: false</code>即可；<br>这里添加网评论模块后，会导致原来的分类和标签页底部出现评论框，这里同样只需要在首部添加<code>comments: false</code>即可，例如标签页的修改如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 201x-0x-xx xx:xx:xx</span><br><span class="line">type: tags</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="自定义-favicon"><a href="#自定义-favicon" class="headerlink" title="自定义 favicon"></a>自定义 favicon</h3><h4 id="Step-1-1"><a href="#Step-1-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>将已有图片转为 icon 格式，准备好图片，打开<a href="https://www.favicon-generator.org/" target="_blank" rel="noopener">在线生成 icon 工具</a>，上传图片，下载可得到<code>.zip</code>包。</p>
<h4 id="Step-2-1"><a href="#Step-2-1" class="headerlink" title="Step 2"></a>Step 2</h4><p>在 NexT 主题中进行设置</p>
<h5 id="Step-2-1"><a href="#Step-2-1" class="headerlink" title="Step 2.1"></a>Step 2.1</h5><p>首先在博客根目录的<code>source</code>目录下创建<code>images</code>文件夹，将上面<code>.zip</code>包里解压出的文件拷贝到<code>images</code>文件夹下</p>
<h5 id="Step-2-2"><a href="#Step-2-2" class="headerlink" title="Step 2.2"></a>Step 2.2</h5><p>然后编辑 NexT 主题配置文件<code>themes/next/_config.yml</code>，找到下方对应部分，并配置如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">images/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">images/favicon-32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">images/apple-icon-180x180.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> </span><br><span class="line">  <span class="attr">android_manifest:</span> <span class="string">images/manifest.json</span></span><br><span class="line">  <span class="attr">ms_browserconfig:</span> <span class="string">images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>

<h5 id="Step-2-3"><a href="#Step-2-3" class="headerlink" title="Step 2.3"></a>Step 2.3</h5><p>验证效果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动本地预览</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br><span class="line">浏览器打开 http://localhost:4000</span><br></pre></td></tr></table></figure>

<h3 id="同时部署-hexo-到-github-和-腾讯云（原-Coding）上"><a href="#同时部署-hexo-到-github-和-腾讯云（原-Coding）上" class="headerlink" title="同时部署 hexo 到 github 和 腾讯云（原 Coding）上"></a>同时部署 hexo 到 github 和 腾讯云（原 Coding）上</h3><p>编辑 hexo 根目录下的配置文件 _config.yml，修改 deploy 处如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span> </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:yourusername/yourusername.github.io.git,master</span></span><br><span class="line">    <span class="attr">tencent:</span> <span class="string">git@git.dev.tencent.com:yourusername/yourusername.git,master</span></span><br></pre></td></tr></table></figure>

<h3 id="在-pages-页面绑定自定义域名"><a href="#在-pages-页面绑定自定义域名" class="headerlink" title="在 pages 页面绑定自定义域名"></a>在 pages 页面绑定自定义域名</h3><h4 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h4><p>在自定义域名解析处添加一条 CNAME 记录到 <code>yourname.coding.me</code>，替换对应的<code>yourusername</code></p>
<h4 id="github"><a href="#github" class="headerlink" title="github"></a>github</h4><p>在自定义域名解析处添加一条 CNAME 记录到 <code>yourname.github.io</code>，替换对应的<code>yourusername</code>，然后由于每次 deploy 时都会覆盖掉，所以需要手动在 hexo 根目录下添加一个名为 <code>CNAME</code> 的文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">your.custom.com</span><br></pre></td></tr></table></figure>

<h3 id="利用-Hexo-Blog-Encrypt-给博客加密"><a href="#利用-Hexo-Blog-Encrypt-给博客加密" class="headerlink" title="利用 Hexo-Blog-Encrypt 给博客加密"></a>利用 Hexo-Blog-Encrypt 给博客加密</h3><p>参考文章：<a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">hexo-blog-encrypt</a></p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>输入正确密码后，可在接下来的30分钟内，无需密码访问该页面。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 国内可用 cnpm 替换 npm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save hexo-blog-encrypt</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者用 yarn 安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash">yarn add hexo-blog-encrypt</span></span><br></pre></td></tr></table></figure>

<h4 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h4><ol>
<li><p>首先, 确保文章中含有内容（不能为空，或者只包含空格）</p>
</li>
<li><p>然后在 <code>_config.yml</code> 中启用该插件:<br>2.1 文章设置的 <code>password</code> 优先级最高，其次是设置标签加密，文章多标签加密密码优先级跟文章标签先后顺序有关</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="comment"># hexo-blog-encrypt</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tags:</span>  <span class="comment"># 配置标签加密</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;name:</span> <span class="string">test,</span> <span class="attr">password:</span> <span class="string">test&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;name:</span> <span class="string">diary,</span> <span class="attr">password:</span> <span class="string">diary&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在你的文章的头部添加上对应的字段，如 password, abstract, message</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line">password: mikemessi</span><br><span class="line">abstract: Something was encrypted, please enter password to read.</span><br><span class="line">message: Welcome to my blog, please enter password to read.</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p> 3.1 （可选）如果你想对 TOC 也进行加密，则在 article.ejs 中将 TOC 的生成代码修改成如下：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if(post.toc == true)&#123; %&gt;</span><br><span class="line">  &lt;div id=&quot;toc-div&quot; class=&quot;toc-article&quot; &lt;% if (post.encrypt == true) &#123; %&gt;style=&quot;display:none&quot; &lt;% &#125; %&gt;&gt;</span><br><span class="line">    &lt;strong class=&quot;toc-title&quot;&gt;Index&lt;/strong&gt;</span><br><span class="line">      &lt;% if (post.encrypt == true) &#123; %&gt;</span><br><span class="line">        &lt;%- toc(post.origin) %&gt;</span><br><span class="line">      &lt;% &#125; else &#123; %&gt;</span><br><span class="line">        &lt;%- toc(post.content) %&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;%- post.content %&gt;</span><br></pre></td></tr></table></figure>





</li>
</ol>
<hr>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li><p><code>hexo</code>根目录下的<code>source</code>文件夹将被编译到<code>public</code>文件夹，最终以<code>public</code>为工作区部署到配置的远程仓库上，<code>source</code>目录因为为远程仓库的原始根目录；</p>
<br>
</li>
<li><p>可以在 _post 目录下新建文件夹分隔不同的 .md 文件；</p>
</li>
</ol>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>utterances</tag>
        <tag>Hexo-Blog-Encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>键盘操作Chrome神器——Vimium的使用技巧</title>
    <url>/2019/07/29/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9CChrome%E7%A5%9E%E5%99%A8%E2%80%94%E2%80%94Vimium%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>你是不是实名羡慕过黑客的操作？是不是因为浏览网页需要频繁切换到鼠标操作而苦恼过？<br>现在只要学会了这款插件的使用，你就可以立即摆脱上面的苦恼了。话不多说，这款插件就是<strong>Vimium</strong>。</p>
<h3 id="Vimium简介"><a href="#Vimium简介" class="headerlink" title="Vimium简介"></a>Vimium简介</h3><blockquote>
<p>Vimium是一款谷歌浏览器的扩展程序，在vim编辑器的基础上实现了基于键盘的网页浏览与控制，也就是说可以用这款插件实现在不用鼠标的前提下，仅通过键盘就能够自由浏览网页的各项内容。<br>目前这款扩展程序已经在github上开源，即<a href="https://github.com/philc/vimium" target="_blank" rel="noopener">philc/vimium</a></p>
</blockquote>
<h3 id="快键键操作"><a href="#快键键操作" class="headerlink" title="快键键操作"></a>快键键操作</h3><h4 id="官方快捷键"><a href="#官方快捷键" class="headerlink" title="官方快捷键"></a>官方快捷键</h4><p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/Vimium-1.png" alt><br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/Vimium-2.png" alt></p>
<p><strong>详细说明如下：</strong></p>
<table>
    <tr>
        <th>快捷键</th>
        <th>按键功能</th>
    </tr>
    <tr>
        <th colspan="2" style="text-align:center">页面导航部分</th>        
    </tr>
    <tr>
        <td>j或ctrl+e</td>
        <td>向下滑动</td>
    </tr>
    <tr>
        <td>k或ctrl+y</td>
        <td>向上滑动</td>
    </tr>
    <tr>
        <td>gg</td>
        <td>滑动到页面的顶部</td>
    </tr>
    <tr>
        <td>G</td>
        <td>滑动到页面的底部</td>
    </tr>
    <tr>
        <td>d</td>
        <td>向下滑动半页</td>
    </tr>
    <tr>
        <td>u</td>
        <td>向上滑动半页</td>
    </tr>
    <tr>
        <td>h</td>
        <td>向左滑动</td>
    </tr>
    <tr>
        <td>l</td>
        <td>向右滑动</td>
    </tr>
    <tr>
        <td>r</td>
        <td>刷新页面</td>
    </tr>
    <tr>
        <td>yy</td>
        <td>复制当前链接到剪贴板</td>
    </tr>
    <tr>
        <td>p(小写)</td>
        <td>在当前标签页中打开剪贴板里的链接</td>
    </tr>
    <tr>
        <td>P(大写)</td>
        <td>在新标签页中打开剪贴板里的链接</td>
    </tr>
    <tr>
        <td>i</td>
        <td>进入插入模式</td>
    </tr>
    <tr>
        <td>v</td>
        <td>进入视图模式(可通过移动选中文字)</td>
    </tr>
    <tr>
        <td>gi</td>
        <td>将鼠标聚焦到页面第一处文字输入地方(通常为页面搜索框)</td>
    </tr>
    <tr>
        <td>f</td>
        <td>显示页面中链接对应按键，并在当前标签页中打开</td>
    </tr>
    <tr>
        <td>F</td>
        <td>显示页面中链接对应按键，并在新标签页中打开</td>
    </tr>
    <tr>
        <td>gf</td>
        <td>选择页面上的下一个窗口</td>
    </tr>
    <tr>
        <td>gF</td>
        <td>选择页面的主/最上层窗口</td>
    </tr>
    <th colspan="2" style="text-align:center">使用vomnibar</th>
    <tr>
        <td>o(小写)</td>
        <td>出现搜索框，输入内容，打开选中的链接、书签或者历史记录</td>
    </tr>
    <tr>
        <td>O(大写)</td>
        <td>出现搜索框，输入内容，在新标签页下打开选中的链接、书签或者历史记录</td>
    </tr>
    <tr>
        <td>b</td>
        <td>出现搜索框，输入内容，打开选中的书签</td>
    </tr>
    <tr>
        <td>B</td>
        <td>出现搜索框，输入内容，在新标签页下打开选中的书签</td>
    </tr>
    <tr>
        <td>T</td>
        <td>出现搜索框，输入内容，进入对应的标签页</td>
    </tr>
    <tr>
        <th colspan="2" style="text-align:center">使用查找</th>
    </tr>
    <tr>
        <td>/</td>
        <td>进入查找模式</td>
    </tr>
    <tr>
        <td>n</td>
        <td>循环向下寻找匹配的内容</td>
    </tr>
    <tr>
        <td>N</td>
        <td>循环向上寻找匹配的内容</td>
    </tr>
    <tr>
        <th colspan="2" style="text-align:center">历史导航</th>
    </tr>
    <tr>
        <td>H</td>
        <td>回到当前页面的上一历史页面，等同于点击页面顶部的“<-”< td>
    </-”<></td></tr>
    <tr>
        <td>L</td>
        <td>前进到当前页面的下一历史页面，等同于点击页面顶部的“->”</td>
    </tr>
    <tr>
        <th colspan="2" style="text-align:center">操作标签页</th>
    </tr>
    <tr>
        <td>t</td>
        <td>创建新标签页</td>
    </tr>
    <tr>
        <td>J(大写)或gT</td>
        <td>切换到当前标签页的左边一个标签页</td>
    </tr>
    <tr>
        <td>K</td>
        <td>切换到当前标签页的右边一个标签页</td>
    </tr>
    <tr>
        <td>^</td>
        <td>切换到上一次所在的标签页</td>
    </tr>
    <tr>
        <td>g0</td>
        <td>切换到第一个标签页</td>
    </tr>
    <tr>
        <td>g$</td>
        <td>切换到最后一个标签页</td>
    </tr>
    <tr>
        <td>yt</td>
        <td>复制当前标签页,即再打开一个与当前标签页相同的页面</td>
    </tr>
    <tr>
        <td>alt+p</td>
        <td>锁定或解锁当前标签页</td>
    </tr>
    <tr>
        <td>alt+m</td>
        <td>静音或取消静音当前标签页</td>
    </tr>
    <tr>
        <td>x(小写)</td>
        <td>关闭当前标签页</td>
    </tr>
    <tr>
        <td>X(大写)</td>
        <td>恢复关闭的标签页</td>
    </tr>
    <tr>
        <th colspan="2" style="text-align:center">其他</th>
    </tr>
    <tr>
        <td>?(英文)</td>
        <td>显示插件快捷键，即表格上方图片</td>
    </tr>
</table>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>Vimium</tag>
      </tags>
  </entry>
  <entry>
    <title>第2章| Java并发机制的底层实现原理</title>
    <url>/2019/07/29/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC2%E7%AB%A0-Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>Java具有“一次编译，到处运行”的特性，而这与<strong>JVM</strong>(Java Virtual Machine, Java虚拟机)密不可分。因为.java后缀的代码到最后运行，需要先经过编译器编译为.class后缀的<strong>字节码</strong>，接着字节码被类加载器加载到JVM中，最后转变为0-1的汇编指令才能被CPU执行等这一系列过程。本章的宗旨为深入底层了解Java并发机制的实现原理。</p>
</blockquote>
<h3 id="volatile的应用"><a href="#volatile的应用" class="headerlink" title="volatile的应用"></a>volatile的应用</h3><ol>
<li><p>volatile的定义<br>Java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致地更新，线程应该确保通过排他锁单独获取这个变量。</p>
</li>
<li><p>volatile作用<br>volatile是轻量级的synchronized，在多处理器开发中保证了共享变量的“可见性”（即一个线程修改一个共享变量时，另外一个线程能读到这个修改的值）。由于使用volatile不会引起线程切换上下文和调度，所以某种程度上使用volatile会比用synchronized的成本低。</p>
</li>
<li><p>volatile实现原则<br>（1）<strong>Lock前缀指令会引起处理器缓存回写到内存</strong><br>（2）<strong>一个处理器的缓存回写到内存会导致其他处理器的缓存失效</strong></p>
</li>
<li><p>优化volatie方法———<strong>追加字节优化</strong><br>因为大多数处理器的L1、L2、L3缓存的高速缓存行是64字节，不支持部分填充缓存行。所以处理器会把不满足64字节的节点读入到一个高速缓存行，这样会导致当一个处理器要修改时，64字节的高速缓存行都会被锁定。又由于缓存的一致性协议，会导致此时其他所有处理器的缓存行失效，从而无法进行操作，所以这将及其影响性能。<br>但并不是盲目地每次都通过追加字节来优化volatie的使用，以下两种情况就不适用：<br>（1）<strong>少部分缓存行不是64字节宽度的处理器</strong>；<br>（2）<strong>不频繁地写共享变量</strong>：共享变量不被频繁写，意味着同时竞争的概率小，用锁的概率也就小。</p>
</li>
<li><p>扩展<br>（1）CPU的术语定义</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>术语</th>
<th>对应英文名</th>
<th>术语解释</th>
</tr>
</thead>
<tbody><tr>
<td>内存屏障</td>
<td>memory barriers</td>
<td>是一组处理器指令，用于实现对内存操作的顺序限制</td>
</tr>
<tr>
<td>缓冲行</td>
<td>cache line</td>
<td>CPU告诉缓存中可以分配的最小存储单位。处理器填写缓存行时会加载整个缓存行，现代CPU需要执行几百次CPU指令</td>
</tr>
<tr>
<td>原子操作</td>
<td>atomic operation</td>
<td>不可中断的一个或一系列操作</td>
</tr>
<tr>
<td>缓存行填充</td>
<td>cache line fill</td>
<td>当处理器识别到从内存中读取操作数是可缓存的，处理器读取整个高速缓存行到适当的缓存（L1, L2, L3的或所有）</td>
</tr>
<tr>
<td>缓存命中</td>
<td>cache hit</td>
<td>如果进行高速缓存行填充操作的内存位置仍然是下次处理器访问的地址时，处理器从缓存中读取操作数，而不是从内存中读取</td>
</tr>
<tr>
<td>写命中</td>
<td>write hit</td>
<td>当处理器将操作数写回到一个内存缓存的区域时，它会首先检查这个缓存的内存地址是否在缓存行中，如果存在一个有效的缓存行，则处理器将这个操作数协会到缓存，而不是写到内存</td>
</tr>
</tbody></table>
<p>&nbsp;&nbsp;&nbsp;&nbsp;（2）cpu、缓存、内存、硬盘的关系<br>逻辑上将内存+缓存称为“内存储空间”，将硬盘称为“外存储空间”。由于cpu无法直接读写硬盘存储的数据，所以需要内存作为二者之间的桥梁，而又由于内存的读写速度与cpu处理速度相差较大，因此引入了缓存的概念，来匹配cpu与内存之间速度的差异，相应地存在一级、二级、三级缓存。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;（3）缓存一致性协议<br>每个处理器通过<strong>嗅探</strong>（一般指嗅探器，可以窃听网络上流经的数据包）在总线上传播的数据来检查自己缓存的值是否过期，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置为无效状态，当处理器对这个数据进行修改时，会重新从系统内存中读取数据到处理器缓存。</p>
<h3 id="synchronized的实现原理与应用"><a href="#synchronized的实现原理与应用" class="headerlink" title="synchronized的实现原理与应用"></a>synchronized的实现原理与应用</h3><blockquote>
<p>Java SE 1.6前synchronized被称为重量级锁，1.6版本后对某些情况进行了优化。该节主要介绍1.6版本后引入的<strong>偏向锁</strong>和<strong>轻量级锁</strong>，以及<strong>锁的存储结构和升级过程</strong>。</p>
</blockquote>
<p><strong>Java中锁存在的三种形式：</strong></p>
<ol>
<li>对于普通同步方法，锁是当前实例对象</li>
<li>对于静态同步方法，锁是当前类的Class对象</li>
<li>对于同步方法块，锁是Synchronized括号里配置的对象</li>
</ol>
<p><strong>JVM中Synchronized实现原理</strong><br>JVM基于进入和退出Monitor对象来实现方法同步和代码块同步，代码块同步用monitorenter和monitorexit实现，尽管方法同步的实现用的是另一种方式，但也可以用这两条指令实现。</p>
<p><strong>monitorenter和monitorexit</strong><br>monitorenter指令是在编译后插入到同步代码块开始的地方，monitorexit则是插入到方法结束处和异常处。JVM中一个monitorenter必与一个monitorexit相对应，而且每个对象都有一个monitor。运行到monitorenter指令时，会尝试获取当前对象对应的monitor所有权，即尝试获得对象的锁。</p>
<h4 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h4><p>Java对象头里存储了synchronized用的锁，32位虚拟机中Java对象头的长度如下表所示：</p>
<table>
<thead>
<tr>
<th>长度</th>
<th>内容</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>32/64bit</td>
<td>Mark Word</td>
<td>存储对象的hashCode或锁信息等</td>
</tr>
<tr>
<td>32/64bit</td>
<td>Class Metadata Address</td>
<td>存储到对象类型数据的指针</td>
</tr>
<tr>
<td>32/32bit</td>
<td>Array length</td>
<td>数组的长度（如果当前对象是数据）</td>
</tr>
</tbody></table>
<h4 id="锁的升级与对比"><a href="#锁的升级与对比" class="headerlink" title="锁的升级与对比"></a>锁的升级与对比</h4><p>Java SE 1.6后锁有四种状态：</p>
<ul>
<li>无锁状态</li>
<li>偏向锁状态</li>
<li>轻量级锁状态</li>
<li>重量级锁状态</li>
</ul>
<p>锁的状态会随着竞争情况依次由上到下升级，同时锁可以升级但不能降级，这种策略保证了获得锁和释放锁的效率。</p>
<h5 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h5><p>研究发现大多数的锁总是由同一线程多次获得，所以为了降低线程获取锁的代价引入了偏向锁。</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E5%81%8F%E5%90%91%E9%94%81%E8%8E%B7%E5%BE%97%E5%92%8C%E6%92%A4%E9%94%80%E6%B5%81%E7%A8%8B.png" alt="偏向锁初始化流程"></p>
<p><strong>关闭偏向锁</strong><br>Java6/7中偏向锁默认是开启的，它在应用程序启动几秒后才激活，可通过JVM参数<code>-XX:BiasedLockingStartupDelay=0</code>来关闭延迟。如果可以确认所有的锁通常情况下处于竞争状态，就可以通过JVM参数关闭偏向锁:<code>-XX:-UseBiasedLocking=false</code></p>
<h5 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h5><p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81%E5%8F%8A%E8%86%A8%E8%83%80%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="轻量级锁及膨胀流程图"></p>
<p><strong>锁的优缺点对比</strong></p>
<table>
<thead>
<tr>
<th>锁</th>
<th>优点</th>
<th>缺点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>偏向锁</td>
<td>加锁和解锁不需要额外的消耗，和执行非同步方法相比仅存在纳秒级的差距</td>
<td>如果线程间存在锁竞争，会带来额外的锁撤销消耗</td>
<td>适用于只有一个线程访问同步块场景</td>
</tr>
<tr>
<td>轻量级锁</td>
<td>竞争的线程不会阻塞，提高了程序的响应速度</td>
<td>如果始终得不到锁竞争的线程，使用自旋会消耗CPU</td>
<td>追求响应时间，同步块执行速度非常快</td>
</tr>
<tr>
<td>重量级锁</td>
<td>线程竞争不适用自旋</td>
<td>线程阻塞，响应时间缓慢</td>
<td>追求吞吐量，同步块执行速度较快</td>
</tr>
<tr>
<td>### 原子操作的实现原理</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>#### 术语定义</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong><center>CPU术语定义</center></strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>术语名称</td>
<td>英文</td>
<td>解释</td>
<td></td>
</tr>
<tr>
<td>—</td>
<td>—</td>
<td>—</td>
<td></td>
</tr>
<tr>
<td>缓存行</td>
<td>Cache line</td>
<td>缓存的最小操作单位</td>
<td></td>
</tr>
<tr>
<td>比较并交换</td>
<td>Compare and Swap</td>
<td>CAS操作需要输入两个数值，一个旧值（期望操作前的指）和一个新值，在操作期间先比较旧值有没有发生变化，如果没有发生变化，才交换新值，发生了变化则不交换</td>
<td></td>
</tr>
<tr>
<td>CPU流水线</td>
<td>CPU pipeline</td>
<td>CPU流水线的工作方式就像工业生产上的装配流水线，在CPU中由5～6不同功能的电路单元组成一条指令处理流水线，然后将一条X86指令分成5~6步后再由这些电路单元分别执行，这样就能实现在一个CPU时钟周期完成一条指令，以此提高CPU的执行速度</td>
<td></td>
</tr>
<tr>
<td>内存顺序冲突</td>
<td>Memory order violation</td>
<td>内存顺序冲突一般由假共享引起，假共享指多个CPU同时修改同一缓存行的不同部分而引起其中一个CPU的操作无效，当出现这个内存顺序冲突时，CPU必须清空流水线</td>
<td></td>
</tr>
</tbody></table>
<h4 id="处理器实现原子操作的两个机制"><a href="#处理器实现原子操作的两个机制" class="headerlink" title="处理器实现原子操作的两个机制"></a>处理器实现原子操作的两个机制</h4><ol>
<li>通过总线锁保证原子性<br>总线锁：使用处理器提供的一个LOCK #信号，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住，那么该处理器可以单独共享内存。<br>总线锁开销较大，目前处理器在某些场合使用缓存锁定代替总线锁定来优化。<br></li>
<li>通过缓存锁定保证原子性<br>缓存锁定：内存区域如果被缓存在处理器的缓存行中，并且在Lock操作期间被锁定，那么它执行锁操作回写到内存时，处理器不在总线上声言LOCK #信号，而是修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性。</li>
</ol>
<p><strong>两种不使用缓存锁定的情况</strong></p>
<ul>
<li>当操作的数据不能被缓存在处理器内部，或操作的数据跨多个缓存行(cache line)时，处理器会调用总线锁定；</li>
<li>处理器不支持缓存锁定</li>
</ul>
<h4 id="Java实现原子操作"><a href="#Java实现原子操作" class="headerlink" title="Java实现原子操作"></a>Java实现原子操作</h4><p>可通过锁和循环CAS方式实现原子操作，<strong>自旋CAS</strong>实现的基本思路就是循环进行CAS操作直到成功为止。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  基于CAS线程安全的计数器方法safeCount和一个非线程安全的计数器count</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger atomicI = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Counter cas = <span class="keyword">new</span> Counter();</span><br><span class="line">        List&lt;Thread&gt; ts = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">600</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                    cas.count();</span><br><span class="line">                    cas.safeCount();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            ts.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : ts) &#123;</span><br><span class="line">            t.start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 等待所有线程执行完成</span></span><br><span class="line">        <span class="keyword">for</span> (Thread t : ts) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(cas.i);</span><br><span class="line">        System.out.println(cas.atomicI.get());</span><br><span class="line">        System.out.println(System.currentTimeMillis() - start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用CAS实现线程安全计数器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">safeCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = atomicI.get();</span><br><span class="line">            <span class="keyword">boolean</span> suc = atomicI.compareAndSet(i, ++i);</span><br><span class="line">            <span class="comment">// 循环执行CAS操作，直到成功为止</span></span><br><span class="line">            <span class="keyword">if</span> (suc) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非线程安全计数器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果：</span><br><span class="line">999963</span><br><span class="line">1000000</span><br><span class="line">519</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line">---------------------------------</span><br><span class="line">可以看出线程安全的计数器最终得出的结果正确，线程不安全的计数器得到的结果比真实结果要小，说明其中发生了读写操作不是原子的情况。</span><br><span class="line">Java1.5后提供了支持原子操作的类：AtomicBoolean、AtomicInteger、AtomicLong。</span><br></pre></td></tr></table></figure>

<p><strong>CAS实现原子操作的三大问题</strong></p>
<ol>
<li>ABA问题</li>
</ol>
<p><strong>问题定义</strong>：如果一个值由A变成B，再变成A，那么使用CAS进行检查时会认为它没有发生变化，但实际上有变化。<br><strong>解决思路</strong>：<br>①在变量前增加版本号，每次变量更新时就让版本号加1，上面的问题会从A-&gt;B-&gt;A，转变为1A-&gt;2B-&gt;3A，这样CAS在检查时就会发现变量值已经发生了改变。<br>②Java1.5后提供了AtomicStampedeReference类解决ABA问题，其compareAndSet方法先检查当前引用与预期引用是否相等，接着检查当前标志与预期标志是否相等，都相等的话，再用原子方式更新引用和标志值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AtomicStampedeReference类的compareAndSet方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    V   expectedReference, //预期引用</span></span></span><br><span class="line"><span class="function"><span class="params">    V   newReference,      //更新后的引用</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> expectedStamp,     //预期标志</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> newStamp           //更新后的标志</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure>

<br>

<ol start="2">
<li>循环时间长开销大</li>
</ol>
<p><strong>问题定义</strong>：在进行自旋CAS时，如果一直不成功则需要一直循环，这将带来极大的CPU开销。<br><strong>解决思路</strong>：<br>使用支持处理器pause指令的JVM，因为该指令能做到以下两点：<br>①延迟流水线执行指令，降低CPU消耗的执行资源；<br>②避免在退出循环时因内存顺序冲突而引起CPU流水线被清空，提高CPU执行效率。<br><br></p>
<ol start="3">
<li>只能保证一个共享变量的原子操作</li>
</ol>
<p><strong>问题定义</strong>：操作多个共享变量时，循环CAS无法保证操作的原子性<br><strong>解决思路</strong>:<br>①使用锁<br>②将多个共享变量合并成一个共享变量操作（比如两个共享变量i=2,j=a,合并为ij=2a）<br>③Java1.5后提供了AtomicReference类保证引用对象之间的原子性，可将多个变量放入一个对象进行CAS操作。</p>
<p><strong>JVM实现锁的方式都用了循环CAS</strong>，即但一个线程进入同步块时使用循环CAS方式获取锁，该线程退出同步块时使用循环CAS释放锁。</p>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>volatile</tag>
        <tag>synchronized</tag>
        <tag>原子操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04 Chrome和firefox浏览器中字体异常变粗？</title>
    <url>/2019/07/27/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/Ubuntu18-04-Chrome%E5%92%8Cfirefox%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E5%AD%97%E4%BD%93%E5%BC%82%E5%B8%B8%E5%8F%98%E7%B2%97%EF%BC%9F/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在安装好Ubuntu18.04 LTS后，正常使用谷歌浏览器和火狐浏览器，在浏览其他网页时并没有发现有异常的地方，直到在网页中使用Markdown语法的<strong>加粗</strong>显示时，才发现此时加粗文字与其他文字效果相同，并不能显示出强调效果。</p>
<p>由于是利用hexo搭建的博客，所以一度怀疑是不是Markdown的加粗效果未生效，此时进到简书博客内容界面，发现了以前用Markdown语法的加粗效果也未显示(参见下图)，而且像是整体都有了<strong>加粗</strong>效果。这下回过头发现<strong>知乎</strong>、<strong>腾讯新闻</strong>、<strong>网易新闻</strong>等常见页面字体都像是黑体，所以加粗效果才会没有比较，显示不出来。</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E7%AE%80%E4%B9%A6%E5%AD%97%E4%BD%93%E5%8F%98%E7%B2%97.png" alt="简书字体变粗"></p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>通过搜索关键字<code>Ubuntu18</code> <code>Chrome</code> <code>字体变粗</code>后发现了，参考了一篇知乎文章——<a href="https://www.zhihu.com/question/23117961" target="_blank" rel="noopener">如何解决Chrome字体变粗的问题？</a>，发现了页面中<code>font-family</code>属性。进而得知该属性规定元素的字体系列，可以把多个字体名称作为一个“回退”系统来保存。如果浏览器不支持第一个字体，则会尝试下一个。</p>
<p>由此开始查看简书博客中上图界面对应的<code>font-family</code>属性，情况如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E7%AE%80%E4%B9%A6font-family.png" alt="简书页面font-family属性"></p>
<p>再对应系统中已安装字体可以发现，<code>Microsoft YaHei</code>之前的字体都未安装，由<code>font-family</code>属性可知，这里直接采用微软雅黑作为了页面的字体展示样式，所以再用Markdown语法<code>** **</code>时，由于原本就是黑体，所以加粗了显示效果不明显或不显示。所以这里选择安装了<code>Airal</code>，<code>PingFang SC</code>等字体，</p>
<h4 id="Ubuntu18安装字体到-usr-share-fonts"><a href="#Ubuntu18安装字体到-usr-share-fonts" class="headerlink" title="Ubuntu18安装字体到/usr/share/fonts/"></a>Ubuntu18安装字体到/usr/share/fonts/</h4><ol>
<li><p>下载获取要安装的字体文件，如.ttf或.ttc等</p>
</li>
<li><p>在/usr/share/fonts/目录下新建一个自定义文件夹</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir /usr/share/fonts/custom</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将字体文件放入custom文件夹下，并修改custom文件夹权限</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mv *.ttf /usr/share/fonts/custom/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod 744 -R /usr/share/fonts/custom/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>让字体文件生效</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkfontscale  <span class="comment">#创建可缩放字体索引文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mkfontdir    <span class="comment">#在目录中给字体文件创建索引</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo <span class="built_in">fc</span>-cache -fv <span class="comment">#编译生成字体缓存文件</span></span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>重启浏览器后再打开页面发现Markdown的加粗语法已经生效，如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E7%AE%80%E4%B9%A6%E5%AD%97%E4%BD%93%E6%AD%A3%E5%B8%B8.png" alt="简书字体恢复正常"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>通过这次的问题，简单地了解了css中font-family属性的作用</p>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>font-family</tag>
      </tags>
  </entry>
  <entry>
    <title>第1章| 并发编程的挑战</title>
    <url>/2019/07/24/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E7%AC%AC1%E7%AB%A0-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E6%8C%91%E6%88%98/</url>
    <content><![CDATA[<blockquote>
<p>不是启动越多的线程，程序就能最大限度地并发执行。并发编程通常会受到上下文切换、死锁、硬件和软件资源等问题的影响。</p>
</blockquote>
<h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><ol>
<li>单核cpu通过为每个线程分配cpu时间片来实现多线程，时间片时长通常为几十毫秒。</li>
<li>上下文切换会影响到多线程的执行速度。</li>
</ol>
<p><strong>问题：</strong> 并发执行的代码是不是肯定比串行执行的快？<br><strong>回答：</strong> 不一定，因为多线程的创建和切换上下文也有开销，所以在循环次数较少时，耗时效果并不理想。通常需要<strong>百万级别</strong>以上，多线程的优势才能被体现出来。</p>
<p><strong>上下文切换的开销会影响到整体的耗时，所以因尽量减少上下文切换，可采取以下策略：</strong></p>
<ul>
<li>无锁并发编程：多线程中减少使用锁的次数，从而减少竞争锁时带来上下文切换的次数，如将数据的ID按照Hash算法取模分段，不同线程处理不同段的数据；</li>
<li>CAS算法：利用该算法更新数据，可不需加锁</li>
<li>使用最少线程：适量创建线程个数，减少不必要线程产生的等待时间</li>
<li>协程：在单线程中实现多任务的调度，并在单线程中维持多个任务见的切换，这样就没有多线程的切换。</li>
</ul>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ol>
<li><p>死锁的概念<br>当两个或两个以上的进程在执行过程中，双方都在等待对方停止运行，以获取系统资源，但是没有一方提前退出时，就称为死锁。</p>
<br>
</li>
<li><p>避免死锁的方法</p>
</li>
</ol>
<ul>
<li>避免一个线程同时获取多个锁</li>
<li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源</li>
<li>尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制</li>
<li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li>
</ul>
<h3 id="资源限制的挑战"><a href="#资源限制的挑战" class="headerlink" title="资源限制的挑战"></a>资源限制的挑战</h3><ol>
<li>资源限制概念<br>指在并发编程中，程序的执行速度受到计算机硬件或软件资源影响的情况。硬件资源限制有：带宽、硬盘读写、cpu处理速度等；软件资源限制有：数据库链接数和socket连接数等。<br></li>
<li>在资源限制情况下，原本将串行代码并发执行以此来加快执行时间，但这种情况下由于资源限制，导致代码仍只能串行执行，但是并发中加入了上下文切换和调度的时间，从而导致整体运行时间不减反增。<br></li>
<li>处理资源限制方法</li>
</ol>
<ul>
<li>硬件资源限制：由于是计算机资源受限，所以可以采用增加计算机个数的方法，如用集群并发执行程序。</li>
<li>软件资源限制：使用资源池复用资源，不使用资源池而频繁地创建销毁连接，会极大地浪费系统资源，增加响应耗时，影响系统性能。</li>
</ul>
<h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><ol>
<li><p>协程的概念？<br>协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。没有生命周期。</p>
<br>
</li>
<li><p>JDK提供了哪些并发容器和工具类可以用来解决并发问题？<br>java.util.concurrent及其子包，具体包含以下几个方面：</p>
</li>
</ol>
<ul>
<li>提供了几个非常有用的并发工具类，包括CountDownLatch、CyclicBarrier、Semaphore等，可以实现更加丰富的多线程操作。比如利用Semaphore作为资源控制器，限制同时进行工作的线程数量。</li>
<li>各种线程安全的容器，比如最常见的ConcurrentHashMap、有序的ConcurrentSkipListMap，或者通过类似快照机制，实现线程安全的动态数组CopyOnWriteArrayList等。</li>
<li>各种并发队列实现，如各种BlockingQueue实现，比较典型的ArrayBlockingQueue、SynchorousQueue或针对特定场景的PriorityBlockingQueue等。</li>
<li>强大的Executor框架，可以创建各种不同类型的线程池，调度任务运行等。绝大部分情况下，不再需要自己从头实现线程池和任务调度器。</li>
</ul>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ol>
<li><p><strong>join 是什么</strong><br>join()方法是Thread类中的一个方法，方法的定义为等待该线程终止，底层通过wait()方法实现。<br>更多内容可参考：<a href="https://stackoverflow.com/questions/15956231/what-does-this-thread-join-code-mean" target="_blank" rel="noopener">What does this thread join code mean?</a></p>
<br>
</li>
<li><p><strong>vmstat 怎么用，参数怎么用，输出内容都指的是什么</strong><br>vmstat: 检测系统CPU/内存/磁盘输入输出状态等。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vmstat [-a] [延迟 [总计检测次数]] &lt;==CPU/内存等信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vmstat [-fs]                   &lt;==内存相关</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vmstat [-S 单位]                &lt;==设置显示数据的单位</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vmstat [-d]                    &lt;==与磁盘相关</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vmstat [-p 分区]                &lt;==与磁盘相关</span></span><br><span class="line">参数：</span><br><span class="line">-a : 使用 inactive/active（活跃与否）替代 buffer/cache的内存输出信息；</span><br><span class="line">-f : 开机到目前为止系统复制（fork）的进程数；</span><br><span class="line">-s : 将一些事件(开机到目前为止)导致的内存变化情况列表说明</span><br><span class="line">-S : 后面可以接单位，让显示的数据有单位。例如 K/M 取代 bytes 的容量；</span><br><span class="line">-d : 列出磁盘的读写总量统计表</span><br><span class="line">-p : 后面列出分区，可显示该分区的读写总量统计表</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>示例： <code>vmstat 1 3</code>：统计目前主机CPU状态，每秒一次，共计三次！各字段说明如下：</p>
<ul>
<li><p>内存栏位 (procs) 的项目分别为：<br>r ：等待运行中的程序数量；<br>b：不可被唤醒的程序数量。这两个项目越多，代表系统越忙碌 (因为系统太忙，所以很多程序就无法被运行或一直在等待而无法被唤醒之故)。</p>
</li>
<li><p>内存栏位 (memory) 项目分别为：<br>swpd：虚拟内存被使用的容量；<br>free：未被使用的内存容量；<br>buff：用于缓冲内存；<br>cache：用于高速缓存。 这部份则与 free 是相同的。</p>
</li>
<li><p>内存置换空间 (swap) 的项目分别为：<br>si：由磁碟中将程序取出的量；<br>so：由于内存不足而将没用到的程序写入到磁碟的 swap 的容量。 如果 si/so 的数值太大，表示内存内的数据常常得在磁碟与主内存之间传来传去，系统效能会很差！</p>
</li>
<li><p>磁碟读写 (io) 的项目分别为：<br>bi：由磁碟写入的区块数量；<br>bo：写入到磁碟去的区块数量。如果这部份的值越高，代表系统的 I/O 非常忙碌！</p>
</li>
<li><p>系统 (system) 的项目分别为：<br>in：每秒被中断的程序次数；<br>cs：每秒钟进行的事件切换次数；这两个数值越大，代表系统与周边设备的沟通非常频繁！ 这些周边设备当然包括磁碟、网络卡、时间钟等。</p>
</li>
<li><p>CPU 的项目分别为：<br>us：非核心层的 CPU 使用状态；<br>sy：核心层所使用的 CPU 状态；<br>id：闲置的状态； wa：等待 I/O 所耗费的 CPU 状态；<br>st：被虚拟机器 (virtual machine) 所盗用的 CPU 使用状态 (2.6.11 以后才支持)。</p>
<br>
</li>
</ul>
<ol start="3">
<li><p><strong>cas 是什么</strong><br>CAS（比较与交换，Compare and swap） 是一种有名的无锁算法，维护三个变量值，一个是内存值V，一个是期望的旧的值A，一个是要更新的值B。更新一个变量的时候，只有当预期值A与内存V中的值相等的时候，才会执行更新操作，把内存V的值改为B。<br>当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。<br>从思想上来说，synchronized属于悲观锁，悲观地认为程序中的并发情况严重，所以只能在一个线程获取到锁后，其他线程被挂起等待；CAS属于乐观锁，乐观地认为程序中的并发情况不那么严重，所以让线程不断去重试更新。</p>
<br>
</li>
<li><p><strong>awk 是什么，怎么用</strong><br>awk 也是一个非常好用的数据处理工具，awk倾向于一行当中分成数个『栏位』来处理。而默认的『栏位的分隔符号为 “空白键” 或 “[tab]键” 』！awk 通常运行的模式是这样的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk '条件类型1&#123;动作1&#125; 条件类型2&#123;动作2&#125; ...' filename</span><br><span class="line">awk后面接两个单引号并加上大括号 &#123;&#125; 来配置想要对数据进行的处理动作。</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>示例:e.g. 输出poem中第2行至第6行的第2列与第4列内容以及第1列乘10结果，中间以#符分割（提示：NR为当前处理行的行号）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat poem</span></span><br><span class="line">******结果******</span><br><span class="line">1 --------------------------</span><br><span class="line">2 The Noon Balloon</span><br><span class="line">3 Will be leaving soon</span><br><span class="line">4 For the sun or the moon.</span><br><span class="line">5 And wherever it goes,</span><br><span class="line">6 It will get there too soon.</span><br><span class="line">7 --------------------------</span><br><span class="line"></span><br><span class="line">awk 'NR&gt;=2 &amp;&amp; NR&lt;=6 &#123;print $2"#"$4"#"$1*10&#125;' poem</span><br><span class="line">******结果******</span><br><span class="line"><span class="meta">The#</span><span class="bash">Balloon<span class="comment">#20</span></span></span><br><span class="line"><span class="meta">Will#</span><span class="bash">leaving<span class="comment">#30</span></span></span><br><span class="line"><span class="meta">For#</span><span class="bash">sun<span class="comment">#40</span></span></span><br><span class="line"><span class="meta">And#</span><span class="bash">it<span class="comment">#50</span></span></span><br><span class="line"><span class="meta">It#</span><span class="bash">get<span class="comment">#60</span></span></span><br></pre></td></tr></table></figure>

<p>更多内容参见：<a href="https://www.runoob.com/linux/linux-comm-awk.html" target="_blank" rel="noopener">Linux awk 命令</a><br><br></p>
<ol start="5">
<li><p><strong>linux 管道是什么鬼</strong><br>管道是Linux中很重要的一种通信方式,是把一个程序的输出直接连接到另一个程序的输入,常说的管道多是指无名管道,无名管道只能用于具有亲缘关系的进程之间，这是它与有名管道的最大区别。<br>有名管道叫named pipe或者FIFO(先进先出)，可以用函数mkfifo()创建。</p>
<br>
</li>
<li><p><strong>jstack 命令怎么用</strong><br>jstack用于打印出给定的java进程ID或core file或远程调试服务的Java堆栈信息，命令格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> jstack [ option ] pid</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jstack [ option ] executable core</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jstack [ option ] [server-id@]remote-hostname-or-IP</span></span><br><span class="line"></span><br><span class="line">参数说明:</span><br><span class="line">pid: java应用程序的进程号,一般可以通过jps来获得;</span><br><span class="line">executable:产生core dump的java可执行程序;</span><br><span class="line">core:打印出的core文件;</span><br><span class="line">remote-hostname-or-ip:远程debug服务器的名称或IP;</span><br><span class="line">server-id: 唯一id,假如一台主机上多个远程debug服务;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>官方文档参见：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstack.html" target="_blank" rel="noopener">jstack</a><br><br></p>
<ol start="7">
<li><strong>TIMED_WAITING 是什么意思</strong><br>一个线程在一个特定的等待时间内等待另一个线程完成一个动作会在这个状态<br></li>
</ol>
]]></content>
      <categories>
        <category>Java 并发编程的艺术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>上下文切换</tag>
        <tag>死锁</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL02| 从SQL更新语句看MySQL日志系统</title>
    <url>/2019/05/12/MySQL%E5%AD%A6%E4%B9%A0%E5%AE%9E%E5%BD%95/MySQL02-%E4%BB%8ESQL%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E7%9C%8BMySQL%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>MySQL 可以恢复到半个月内任意一秒的状态，这是为什么？</p>
</blockquote>
<p>MySQL的更新语句与查询语句大体相同，但多了两个日志模块即redo log（重做日志）和binlog（归档日志）</p>
<h2 id="一、redo-log和binlog"><a href="#一、redo-log和binlog" class="headerlink" title="一、redo log和binlog"></a>一、redo log和binlog</h2><h3 id="1、redo-log模块（存储引擎层日志）"><a href="#1、redo-log模块（存储引擎层日志）" class="headerlink" title="1、redo log模块（存储引擎层日志）"></a>1、redo log模块（存储引擎层日志）</h3><ul>
<li>WAL技术（Write-Ahead Logging）是InnoDB引擎先将“更新”写到redo log中并更新内存，这时候就算更新完毕了，等计算机“空闲”时再写入硬盘当中。</li>
<li>其中redo log是有固定大小的，等被写满时就不得不写入硬盘中了。也正因为有redo log的存在，所以在MySQL发生异常重启后，InnoDB就可以记录不丢失，该能力被称为crash-safe。<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/via%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-1.png" alt="via极客时间-1"></li>
</ul>
<h3 id="2、binlog日志模块（server层日志）"><a href="#2、binlog日志模块（server层日志）" class="headerlink" title="2、binlog日志模块（server层日志）"></a>2、binlog日志模块（server层日志）</h3><h3 id="3、两个日志模块联系与差异"><a href="#3、两个日志模块联系与差异" class="headerlink" title="3、两个日志模块联系与差异"></a>3、两个日志模块联系与差异</h3><blockquote>
<p>MySQL5.5.5以前默认使用自带的MyISAM引擎，该引擎没有crash-safe能力，只能依靠MyISAM进行归档；在 5.5.5 版本后使用InnoDB作为默认存储引擎。</p>
</blockquote>
<h4 id="差异处："><a href="#差异处：" class="headerlink" title="差异处："></a>差异处：</h4><ol>
<li>redo log是InnoDB特有的，而binlog位于server层，所有引擎都可以使用；</li>
<li>redo log是物理日志，记录了在实际物理位置进行的操作；binlog是逻辑日志，记录的是执行语句的原始逻辑；</li>
<li>redo log是循环写，固定大小会被写完；binlog是追加写，写到一定大小切换到下一个，不覆盖以往内容。</li>
</ol>
<h2 id="二、update语句执行流程"><a href="#二、update语句执行流程" class="headerlink" title="二、update语句执行流程"></a>二、update语句执行流程</h2><p><strong>注</strong>：下图中<em>浅色</em>在InnoDB中进行，<em>深色</em>在执行器中完成。<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/via%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-2.png" alt="via极客时间-2"></p>
<p>由上图可知，InnoDB中的操作被分成了两阶段提交，之所以要这样做，是因为只有一步的话，会导致一句日志回复的数据库状态与原数据库状态不同，这样在数据库发生崩溃和扩容时都带来巨大问题。这样做了可以保证redo log和binlog的逻辑一致。</p>
<p><strong>tips</strong>:可以将MySQL参数innodb_flush_log_at_trx_commit和sync_binlog这两个参数设为1，这样能保证数据库异常重启后物理日志和逻辑日志都不会丢失，因为已经被写到磁盘当中了。</p>
]]></content>
      <categories>
        <category>MySQL 学习实录</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL01| 从SQL语句执行过程看MySQL架构</title>
    <url>/2019/05/12/MySQL%E5%AD%A6%E4%B9%A0%E5%AE%9E%E5%BD%95/MySQL01-%E4%BB%8ESQL%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E7%9C%8BMySQL%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h3 id="MySQL的框架有几个组件-各是什么作用"><a href="#MySQL的框架有几个组件-各是什么作用" class="headerlink" title="MySQL的框架有几个组件, 各是什么作用?"></a>MySQL的框架有几个组件, 各是什么作用?</h3><p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/MySQL%E7%9A%84%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E5%9B%BE(via%20%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4).png" alt="MySQL的逻辑结构图(via 极客时间)"></p>
<ul>
<li>连接器：和客户端建立连接、获取权限、维持和管理连接</li>
<li>查询缓存：查看历史记录中是否存在本次查询结果，有的话直接返回结果，否则继续向下执行。由于查询失效频繁，所以不推荐使用查询缓存（<strong>MySQL8中已删除查询缓存模块</strong>）。</li>
<li>分析器：进行词法分析和语法分析，前者要将各个字符串对应到关键字、表、字段名等，后者将判断输入语句是否满足MySQL语法。</li>
<li>优化器：决定使用哪个索引，或决定在join语句中使用哪个表作为驱动表。</li>
<li>执行器：验证完权限后，执行SQL语句，使用表存储引擎提供的接口。</li>
</ul>
]]></content>
      <categories>
        <category>MySQL 学习实录</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL34| Join用法记录</title>
    <url>/2019/05/12/MySQL%E5%AD%A6%E4%B9%A0%E5%AE%9E%E5%BD%95/MySQL34-Join%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<ol>
<li>如果可以使用被驱动表的索引，join要优于单表查询  ；</li>
<li>不能使用被驱动表的索引，只能用Block Nested-Loop join算法，这样的SQL语句应当弃用；</li>
<li>在使用join时，应当让运行中数据量小的表作为驱动表。</li>
</ol>
]]></content>
      <categories>
        <category>MySQL 学习实录</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Join</tag>
      </tags>
  </entry>
  <entry>
    <title>翻译| Github: Authorizing OAuth Apps</title>
    <url>/2019/05/08/%E7%A0%81%E5%86%9C%E7%AC%94%E8%AE%B0/%E7%BF%BB%E8%AF%91-Github-Authorizing-OAuth-Apps/</url>
    <content><![CDATA[<blockquote>
<p>tips：本文为github-API关于授权账号登录其他网站开发文档的个人中文翻译，官网文档对应：<a href="[https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#authorizing-oauth-apps](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#authorizing-oauth-apps)">Authorizing OAuth Apps</a></p>
</blockquote>
<h1 id="授权OAuth应用程序"><a href="#授权OAuth应用程序" class="headerlink" title="授权OAuth应用程序"></a>授权OAuth应用程序</h1><p>你可以授权github账号登录其他网站     </p>
<p>Github的授权实现支持<a href="https://tools.ietf.org/html/rfc6749#section-4.1" target="_blank" rel="noopener">标准授权码授权类型</a>。你可以用下面描述的web应用流程去获取授权code，然后用code去交换获取token。（不支持<a href="https://tools.ietf.org/html/rfc6749#section-4.2" target="_blank" rel="noopener">隐式授权类型</a>）  </p>
<p>遇到问题可以参见下面的文章：</p>
<ul>
<li><a href="https://developer.github.com/apps/managing-oauth-apps/troubleshooting-authorization-request-errors" target="_blank" rel="noopener">认证请求错误汇总</a></li>
<li><a href="https://developer.github.com/apps/managing-oauth-apps/troubleshooting-oauth-app-access-token-request-errors" target="_blank" rel="noopener">OAuth应用获取token请求错误汇总</a></li>
</ul>
<h2 id="Web应用授权流程"><a href="#Web应用授权流程" class="headerlink" title="Web应用授权流程"></a>Web应用授权流程</h2><blockquote>
<p><strong>Note</strong>: 如果建立了一个Github应用，仍然可以使用OAuth web应用流程，不过二者在方案上还是有区别的。更多内容可见<a href="https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/" target="_blank" rel="noopener">关于Github应用认证和授权用户</a>  </p>
</blockquote>
<p>应用授权用户步骤如下：</p>
<ol>
<li>用户重定向去请求Github认证</li>
<li>用户从github重定向回到你的web</li>
<li>你的应用通过access token获取到了API</li>
</ol>
<hr>
<h3 id="1-请求Github认证"><a href="#1-请求Github认证" class="headerlink" title="1. 请求Github认证"></a>1. 请求Github认证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET https://github.com/login/oauth/authorize</span><br></pre></td></tr></table></figure>

<p>当你的Github应用指定了<code>login</code>参数，它会给用户一个特定的账户去登录和授权你的应用。</p>
<p><strong>参数</strong></p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Type</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">client_id</td>
<td align="center">string</td>
<td align="left"><strong>必需有</strong>。当你注册Github授权应用时产生的client ID</td>
</tr>
<tr>
<td align="center">redirect_uri</td>
<td align="center">string</td>
<td align="left">Github授权后返回你的应用地址。更多细节参考<a href="https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#redirect-urls" target="_blank" rel="noopener">redirect urls</a></td>
</tr>
<tr>
<td align="center">login</td>
<td align="center">string</td>
<td align="left">意味着一个用来登录和授权应用的特定账户</td>
</tr>
<tr>
<td align="center">scope</td>
<td align="center">string</td>
<td align="left">以空格分隔的scope列表。如果此处为空，<code>scope</code>默认对用户是一个空的列表，即没有对应用授权任何scope，在OAuth授权页面的scopes列表中也不会有该用户。对应地，这一步工作流程将会自动完成授权应用的用户scope集。例如，一个用户已经执行web授权流程两次，用<code>user</code>scope和<code>repo</code>scope各授权了一次，那么第三次web流程没有提供<code>scope</code>时也会受到前面<code>user</code>scope和<code>repo</code>scope得到的token。</td>
</tr>
<tr>
<td align="center">state</td>
<td align="center">string</td>
<td align="left">一个不可预计的随机字符串，被用作为保护伪造跨域请求攻击。</td>
</tr>
<tr>
<td align="center">allow_signup</td>
<td align="center">string</td>
<td align="left">无论用户是否认证，都将被提供一个选项在OAuth流程中是否要注册Github。默认是<code>true</code>，在政策禁止注册下可使用<code>false</code>。</td>
</tr>
</tbody></table>
<h3 id="2-用户从Github重定向回到你的网站"><a href="#2-用户从Github重定向回到你的网站" class="headerlink" title="2. 用户从Github重定向回到你的网站"></a>2. 用户从Github重定向回到你的网站</h3><p>如果接受了你的请求，Github会重定向回到你的网站，并携带一个临时的<code>code</code>在code参数中，还在state参数中携带了上一步你提供的<code>state</code>。临时的code将在10分钟后失效。如果states不匹配，那么第三方将会创建请求，并且你需要中断当前操作。  </p>
<p>用<code>code</code>取交换获取access token:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST https://github.com/login/oauth/access_token</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Type</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">client_id</td>
<td align="center">string</td>
<td><strong>必需有</strong>。当你注册Github授权应用时产生的client ID</td>
</tr>
<tr>
<td align="center">client_secret</td>
<td align="center">string</td>
<td><strong>必需有</strong>。当你注册Github授权应用时产生的client secret</td>
</tr>
<tr>
<td align="center">code</td>
<td align="center">string</td>
<td><strong>必需有</strong>。你收到的code是对应step1中的</td>
</tr>
<tr>
<td align="center">redirect_uri</td>
<td align="center">string</td>
<td>是你应用中的URL，这个地址用作用户授权返回地址</td>
</tr>
<tr>
<td align="center">state</td>
<td align="center">string</td>
<td>step1中你提供的随机字符串</td>
</tr>
</tbody></table>
<p><strong>响应</strong><br>通常，得到的响应一般为下面这种形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">access_token=e72e16c7e42f292c6912e7710c838347ae178b4a&amp;token_type=bearer</span><br></pre></td></tr></table></figure>

<p>你也有可能因为Accpt header形式的不同接收到不同的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Accept: application/json</span><br><span class="line">&#123;<span class="string">"access_token"</span>:<span class="string">"e72e16c7e42f292c6912e7710c838347ae178b4a"</span>, <span class="string">"scope"</span>:<span class="string">"repo,gist"</span>, <span class="string">"token_type"</span>:<span class="string">"bearer"</span>&#125;</span><br><span class="line"></span><br><span class="line">Accept: application/xml</span><br><span class="line">&lt;OAuth&gt;</span><br><span class="line">  &lt;token_type&gt;bearer&lt;/token_type&gt;</span><br><span class="line">  &lt;scope&gt;repo,gist&lt;/scope&gt;  </span><br><span class="line">  &lt;access_token&gt;e72e16c7e42f292c6912e7710c838347ae178b4a&lt;/access_token&gt;</span><br><span class="line">&lt;/OAuth&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-利用access-token去获取API"><a href="#3-利用access-token去获取API" class="headerlink" title="3. 利用access token去获取API"></a>3. 利用access token去获取API</h3><p>access token可以让你以用户的身份请求API</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Authorization: token OAUTH-TOKEN</span><br><span class="line">GET https://api.github.com/user</span><br></pre></td></tr></table></figure>

<p>例如，你可以像下面这样用curl设置header：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">"Authorization: token OAUTH-TOKEN"</span> https://api.github.com/user</span><br></pre></td></tr></table></figure>

<h2 id="非Web应用授权流程"><a href="#非Web应用授权流程" class="headerlink" title="非Web应用授权流程"></a>非Web应用授权流程</h2><p>基于<a href="https://developer.github.com/v3/auth#basic-authentication" target="_blank" rel="noopener">Basic Authentication</a>利用接口去创建OAuth2 token。通过这种方法，用户名和密码不需要被永久存储，而且用户可以在任何时候撤销access。  </p>
<blockquote>
<p>Note: 当使用非Web应用授权流程创建OAuth2 token时，如果你或你的用户是双重认证的话，应确保理解<a href="https://developer.github.com/v3/auth/#working-with-two-factor-authentication" target="_blank" rel="noopener">双重认证机制</a></p>
</blockquote>
<h2 id="Redirect-URLs"><a href="#Redirect-URLs" class="headerlink" title="Redirect URLs"></a>Redirect URLs</h2><p><code>redirect_uri</code>参数是可选的。如果省略，Github将重定向用户到callback URL，这一地址被配置在了OAuth Application settings部分。如果提供了，redirect URL的主机和端口必须准确匹配callback URL。redirect URL路径必须引用callback URL的子目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CALLBACK: http://example.com/path</span><br><span class="line"></span><br><span class="line">GOOD: http://example.com/path</span><br><span class="line">GOOD: http://example.com/path/subdir/other</span><br><span class="line">BAD:  http://example.com/bar</span><br><span class="line">BAD:  http://example.com/</span><br><span class="line">BAD:  http://example.com:8080/path</span><br><span class="line">BAD:  http://oauth.example.com:8080/path</span><br><span class="line">BAD:  http://example.org</span><br></pre></td></tr></table></figure>

<h2 id="为OAuth应用创建多个token"><a href="#为OAuth应用创建多个token" class="headerlink" title="为OAuth应用创建多个token"></a>为OAuth应用创建多个token</h2><p>你可以为user/application/scope组合创建多个token用作特定用途。  </p>
<p>如果你的OAuth应用支持使用Github登录，并且一个工作流只需要用户的基本信息，另一个工作流可能需要获取用户私有资料，这样创建多个token是可行的。使用多个token，你的OAuth应用就可以根据不同用途执行不同web工作流，只需要请求scope需要的。如果一个用户仅使用你的应用去登录，他们就不会去授权你的OAuth应用去获取他们的私有资料。</p>
<p>每次的user/application/scope组合发布的token数量有限定，如果你的应用对其中一个限定请求了足够多的token，那么位于同一scope的旧token就会停止工作。</p>
<blockquote>
<p>Warning: 撤销OAuth应用的所有许可会删除代表应用产生的表征用户的所有SSH keys，其中包括deploy keys。</p>
</blockquote>
<h2 id="重定向用户去检查他们的access"><a href="#重定向用户去检查他们的access" class="headerlink" title="重定向用户去检查他们的access"></a>重定向用户去检查他们的access</h2><p>你链接到OAuth应用的授权信息，用户就可以检查和取消他们的应用授权。  </p>
<p>为了建立这个链接，需要注册OAuth应用时从Github接收到的<code>client_id</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://github.com/settings/connections/applications/:client_id</span><br></pre></td></tr></table></figure>

<blockquote>
<p>tips: 了解更多关于OAuth应用访问用户详见”<a href="https://developer.github.com/v3/guides/discovering-resources-for-a-user/" target="_blank" rel="noopener">Discovering resources for a user</a>.”</p>
</blockquote>
]]></content>
      <categories>
        <category>码农笔记</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>文档翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>03| 计算机网络相关知识</title>
    <url>/2019/04/09/Java%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/03-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="知识点汇总"><a href="#知识点汇总" class="headerlink" title="知识点汇总"></a>知识点汇总</h3><p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB.png" alt="网络知识汇总"></p>
<h3 id="1-4-7层网络模型（-hearts-hearts-hearts-）-1"><a href="#1-4-7层网络模型（-hearts-hearts-hearts-）-1" class="headerlink" title="1. 4/7层网络模型（&hearts;&hearts;&hearts;）[^1]"></a>1. 4/7层网络模型（&hearts;&hearts;&hearts;）[^1]</h3><table>
<thead>
<tr>
<th align="center">OSI七层</th>
<th align="center">TCP/IP四层</th>
<th align="center">网络协议</th>
</tr>
</thead>
<tbody><tr>
<td align="center">应用层（Application）</td>
<td align="center">应用层</td>
<td align="center">HTTP、TFTP, FTP, NFS, WAIS、SMTP</td>
</tr>
<tr>
<td align="center">表示层（Presentation）</td>
<td align="center">应用层</td>
<td align="center">Telnet, Rlogin, SNMP, Gopher</td>
</tr>
<tr>
<td align="center">会话层（Session）</td>
<td align="center">应用层</td>
<td align="center">SMTP, DNS</td>
</tr>
<tr>
<td align="center">传输层（Transport）</td>
<td align="center">传输层</td>
<td align="center">TCP, UDP</td>
</tr>
<tr>
<td align="center">网络层（Network）</td>
<td align="center">网络层</td>
<td align="center">IP, ICMP, ARP, RARP, AKP, UUCP</td>
</tr>
<tr>
<td align="center">数据链路层（Data Link）</td>
<td align="center">数据链路层</td>
<td align="center">FDDI, Ethernet, Arpanet, PDN, SLIP, PPP</td>
</tr>
<tr>
<td align="center">物理层（Physical）</td>
<td align="center">数据链路层</td>
<td align="center">IEEE 802.1A, IEEE 802.2到IEEE 802.11</td>
</tr>
</tbody></table>
<h3 id="2-TCP协议"><a href="#2-TCP协议" class="headerlink" title="2. TCP协议"></a>2. TCP协议</h3><h5 id="2-1-三次握手建连"><a href="#2-1-三次握手建连" class="headerlink" title="2.1 三次握手建连"></a>2.1 三次握手建连</h5><h5 id="2-2-四次挥手断连"><a href="#2-2-四次挥手断连" class="headerlink" title="2.2 四次挥手断连"></a>2.2 四次挥手断连</h5><h5 id="2-3-报文状态标志与连接状态-2"><a href="#2-3-报文状态标志与连接状态-2" class="headerlink" title="2.3 报文状态标志与连接状态[^2]"></a>2.3 报文状态标志与连接状态[^2]</h5><p>LISTEN：侦听来自远方的TCP端口的连接请求</p>
<p>SYN-SENT：再发送连接请求后等待匹配的连接请求</p>
<p>SYN-RECEIVED：再收到和发送一个连接请求后等待对方对连接请求的确认</p>
<p>ESTABLISHED：代表一个打开的连接</p>
<p>FIN-WAIT-1：等待远程TCP连接中断请求，或先前的连接中断请求的确认</p>
<p>FIN-WAIT-2：从远程TCP等待连接中断请求</p>
<p>CLOSE-WAIT：等待从本地用户发来的连接中断请求</p>
<p>CLOSING：等待远程TCP对连接中断的确认</p>
<p>LAST-ACK：等待原来的发向远程TCP的连接中断请求的确认</p>
<p>TIME-WAIT：等待足够的时间以确保远程TCP接收到连接中断请求的确认</p>
<p>CLOSED：没有任何连接状态</p>
<h5 id="2-4-Nagel算法与ACK延迟"><a href="#2-4-Nagel算法与ACK延迟" class="headerlink" title="2.4 Nagel算法与ACK延迟"></a>2.4 Nagel算法与ACK延迟</h5><h5 id="2-5-Keepalive"><a href="#2-5-Keepalive" class="headerlink" title="2.5 Keepalive"></a>2.5 Keepalive</h5><h5 id="2-6-滑动窗口与流量控制"><a href="#2-6-滑动窗口与流量控制" class="headerlink" title="2.6 滑动窗口与流量控制"></a>2.6 滑动窗口与流量控制</h5><p>[^1]:<a href="https://home.cnblogs.com/u/Robin-YB/" target="_blank" rel="noopener">好就分享</a>. <a href="https://www.cnblogs.com/Robin-YB/p/6668762.html" target="_blank" rel="noopener">OSI七层协议模型、TCP/IP四层模型学习笔记</a><br>[^2]:<a href="https://me.csdn.net/mei922" target="_blank" rel="noopener">mei922</a>. <a href="https://blog.csdn.net/mei922/article/details/4801858" target="_blank" rel="noopener">TCP连接状态详解</a></p>
]]></content>
      <categories>
        <category>Java 知识点梳理</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2019/04/01/%E7%A0%81%E5%86%9C%E7%AC%94%E8%AE%B0/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<blockquote>
<p>此部分主要考察java从业者的线上问题排查能力，现基于CentOS release 6.5 (Final)简要介绍如下6个命令[^1]，期间用<strong>poem</strong>文件举例。推荐查询linux命令的两个网址<a href="http://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener"><strong>Linux 命令大全 | 菜鸟教程</strong></a><a href="http://man.linuxde.net/" title="Linux命令大全" target="_blank" rel="noopener"><strong>Linux命令大全(手册)</strong></a>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat poem</span><br><span class="line">******结果******</span><br><span class="line">1 --------------------------</span><br><span class="line">2 The Noon Balloon</span><br><span class="line">3 Will be leaving soon</span><br><span class="line">4 For the sun or the moon.</span><br><span class="line">5 And wherever it goes,</span><br><span class="line">6 It will get there too soon.</span><br><span class="line">7 --------------------------</span><br></pre></td></tr></table></figure>

<h3 id="awk命令（菜鸟教程）"><a href="#awk命令（菜鸟教程）" class="headerlink" title="awk命令（菜鸟教程）"></a>awk命令（<a href="http://www.runoob.com/linux/linux-comm-awk.html" target="_blank" rel="noopener">菜鸟教程</a>）</h3><p>功能：数据处理工具（默认分隔符：空格或tab）<br><code>sed常用作一整行的处理，awk则倾向于将一行分成数个“字段”处理，适合小型数据处理。</code><br><strong>语法</strong>：awk ‘条件类型1 {动作1} 条件类型2 {动作2}…’ filename<br><strong>e.g.</strong> 输出poem中第2行至第6行的第2列与第4列内容以及第1列乘10结果，中间以#符分割（提示：NR为当前处理行的<strong>行号</strong>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &apos;NR&gt;=2 &amp;&amp; NR&lt;=6 &#123;print $2&quot;#&quot;$4&quot;#&quot;$1*10&#125;&apos; poem</span><br><span class="line">******结果******</span><br><span class="line">The#Balloon#20</span><br><span class="line">Will#leaving#30</span><br><span class="line">For#sun#40</span><br><span class="line">And#it#50</span><br><span class="line">It#get#60</span><br></pre></td></tr></table></figure>

<h3 id="top命令（菜鸟教程）"><a href="#top命令（菜鸟教程）" class="headerlink" title="top命令（菜鸟教程）"></a>top命令（<a href="http://www.runoob.com/linux/linux-comm-top.html" target="_blank" rel="noopener">菜鸟教程</a>）</h3><p>功能：动态查看进程变化，<br><strong>语法</strong>：top [-d 数字] | top [-bnp]<br>-d 页面刷新时间间隔描述，本次所用系统默认<strong>3秒</strong><br>-b 以批次的形式展现<br>-n 执行几次后停止<br>-p 查看进程号为p的进程动态</p>
<p>e.g. 每隔<strong>3秒批次</strong>查看进程号为<strong>1673</strong>的进程<strong>3次</strong>，然后结束。<br><code>top -d 3 -b -n 3 -p 1673</code><br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/top%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.webp" alt="top命令执行结果"></p>
<h3 id="netstat（菜鸟教程）"><a href="#netstat（菜鸟教程）" class="headerlink" title="netstat（菜鸟教程）"></a>netstat（<a href="http://www.runoob.com/linux/linux-comm-netstat.html" target="_blank" rel="noopener">菜鸟教程</a>）</h3><p>功能：跟踪网络<br><strong>语法</strong>：netstat -[atunlp]<br>-a 显示系统所有连接、监听、Socket<br>-t 列出tcp网络数据包的数据<br>-u 列出udp网络数据包的数据<br>-n 不列出进程的服务名称，以端口号显示<br>-l 列出正在监听的服务<br>-p 列出进程号为PID的进程<br>e.g. 累出目前系统已经新建的网络连接与Unix Socket状态<br><code>netstat</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Active Internet connections (w/o servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State      </span><br><span class="line">tcp        0      1 node4:42278                 node1:intu-ec-svcdisc       SYN_SENT    </span><br><span class="line">tcp        0      1 node4:59492                 node2:intu-ec-svcdisc       SYN_SENT    </span><br><span class="line">tcp        0      0 node4:ssh                   192.168.226.1:56589         ESTABLISHED </span><br><span class="line">tcp        0    132 node4:ssh                   192.168.226.1:53859         ESTABLISHED </span><br><span class="line">tcp        0      0 node4:8031                  node4:32834                 ESTABLISHED </span><br><span class="line">tcp        0      1 node4:44307                 node1:eforward              SYN_SENT    </span><br><span class="line">tcp        0      0 node4:32834                 node4:8031                  ESTABLISHED </span><br><span class="line">Active UNIX domain sockets (w/o servers)</span><br><span class="line">Proto RefCnt Flags       Type       State         I-Node Path</span><br><span class="line">unix  14     [ ]         DGRAM                    11626  /dev/log</span><br><span class="line">unix  2      [ ]         DGRAM                    9228   @/org/kernel/udev/udevd</span><br><span class="line">unix  2      [ ]         DGRAM                    12430  @/org/freedesktop/hal/udev_event</span><br><span class="line">…（省略）…</span><br></pre></td></tr></table></figure>

<h3 id="grep（菜鸟教程）"><a href="#grep（菜鸟教程）" class="headerlink" title="grep（菜鸟教程）"></a>grep（<a href="http://www.runoob.com/linux/linux-comm-grep.html" target="_blank" rel="noopener">菜鸟教程</a>）</h3><p>功能：分析一行数据，后边常跟正则表达式<br><strong>语法</strong>：grep [-acinv] [–color=auto] ‘查找字符串’ filename<br>-a 将binary文件以text文件方式查找数据<br>-c 计算找到’查找字符串’的次数<br>-i 忽略大小写的不同<br>-n 输出行号<br>-v 输出没有’查找字符串’的那一行<br>e.g. 输出poem包含’l’字符的几行，顺带输出行号<br><code>grep -n &#39;l&#39; poem</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2:2 The Noon Balloon</span><br><span class="line">3:3 Will be leaving soon</span><br><span class="line">6:6 It will get there too soon.</span><br></pre></td></tr></table></figure>

<h3 id="less（菜鸟教程）"><a href="#less（菜鸟教程）" class="headerlink" title="less（菜鸟教程）"></a>less（<a href="http://www.runoob.com/linux/linux-comm-less.html" target="_blank" rel="noopener">菜鸟教程</a>）</h3><p>功能：一页一页翻动（往前往后翻）<br><code>由于poem文件长度较短，不便演示</code></p>
<h3 id="tail（菜鸟教程）"><a href="#tail（菜鸟教程）" class="headerlink" title="tail（菜鸟教程）"></a>tail（<a href="http://www.runoob.com/linux/linux-comm-tail.html" target="_blank" rel="noopener">菜鸟教程</a>）</h3><p>功能：取出后面几行<br><strong>语法</strong>：tail -n<br>e.g. 显示poem后两行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -n 2 poem</span><br><span class="line">******结果******</span><br><span class="line">6 It will get there too soon.</span><br><span class="line">7 --------------------------</span><br></pre></td></tr></table></figure>

<h3 id="添加新用户，并赋予root权限"><a href="#添加新用户，并赋予root权限" class="headerlink" title="添加新用户，并赋予root权限"></a>添加新用户，并赋予root权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd newuser</span><br><span class="line">passwd newuser</span><br><span class="line">-- 输入密码</span><br><span class="line">usermod -aG wheel newuser</span><br></pre></td></tr></table></figure>

<h3 id="远程服务器免密登录设置"><a href="#远程服务器免密登录设置" class="headerlink" title="远程服务器免密登录设置"></a>远程服务器免密登录设置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1. 本地生成ssh公私钥</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="meta">#</span><span class="bash">2. 复制当前用户目录下.ssh/id_rsa.pub文件内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3. 将文件内容复制到远程服务器的.ssh/authorized_keys文件中</span></span><br><span class="line"><span class="meta">#</span><span class="bash">4. 设置远程服务器上文件访问权限</span></span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<h3 id="sudo和man的tab自动补全"><a href="#sudo和man的tab自动补全" class="headerlink" title="sudo和man的tab自动补全"></a>sudo和man的tab自动补全</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在~/.bashrc中加入</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Enabling tab-completion</span></span><br><span class="line">complete -cf sudo</span><br><span class="line">complete -cf man</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新配置文件</span></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>[^1]:鸟哥. 鸟哥的Linux私房菜[M]. 北京: 人民邮电出版社, 2016.</p>
]]></content>
      <categories>
        <category>码农笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>继承Thread类和实现Runnable接口法的异同</title>
    <url>/2019/03/31/%E7%A0%81%E5%86%9C%E7%AC%94%E8%AE%B0/%E7%BB%A7%E6%89%BFThread%E7%B1%BB%E5%92%8C%E5%AE%9E%E7%8E%B0Runnable%E6%8E%A5%E5%8F%A3%E6%B3%95%E7%9A%84%E5%BC%82%E5%90%8C/</url>
    <content><![CDATA[<blockquote>
<p>导语：在java中实现多线程的方法有两种：继承<strong>Thread类</strong>和实现<strong>Runnable接口</strong>。在使用这两种方法创建多线程类时有什么不同呢？下面作简要分析。</p>
</blockquote>
<h3 id="一、继承Thread类法"><a href="#一、继承Thread类法" class="headerlink" title="一、继承Thread类法"></a>一、继承Thread类法</h3><p>1.1. 这里先给出一个小demo，实现代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MyThread extends Thread &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public MyThread(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 10; i++)</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;+&quot; + name + &quot;+运行了+&quot; + (i + 1) + &quot;次&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ThreadDemo1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyThread mt_A = new MyThread(&quot;线程A&quot;);</span><br><span class="line">        MyThread mt_B = new MyThread(&quot;线程B&quot;);</span><br><span class="line">        System.out.println(&quot;当前线程为：&quot; + Thread.currentThread().getName());</span><br><span class="line">        mt_A.start();</span><br><span class="line">        mt_B.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果（某次）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前线程为：main</span><br><span class="line">Thread-1+线程B+运行了+1次</span><br><span class="line">Thread-0+线程A+运行了+1次</span><br><span class="line">Thread-1+线程B+运行了+2次</span><br><span class="line">Thread-0+线程A+运行了+2次</span><br><span class="line">Thread-1+线程B+运行了+3次</span><br><span class="line">Thread-0+线程A+运行了+3次</span><br><span class="line">Thread-1+线程B+运行了+4次</span><br><span class="line">Thread-0+线程A+运行了+4次</span><br><span class="line">Thread-1+线程B+运行了+5次</span><br><span class="line">Thread-0+线程A+运行了+5次</span><br><span class="line">Thread-1+线程B+运行了+6次</span><br><span class="line">Thread-0+线程A+运行了+6次</span><br><span class="line">Thread-1+线程B+运行了+7次</span><br><span class="line">Thread-0+线程A+运行了+7次</span><br><span class="line">Thread-1+线程B+运行了+8次</span><br><span class="line">Thread-0+线程A+运行了+8次</span><br><span class="line">Thread-1+线程B+运行了+9次</span><br><span class="line">Thread-0+线程A+运行了+9次</span><br><span class="line">Thread-1+线程B+运行了+10次</span><br><span class="line">Thread-0+线程A+运行了+10次</span><br></pre></td></tr></table></figure>

<p>从运行结果可以看出，开启了两个新线程Thread-0和Thread-1，两个线程互相抢占资源完成了打印操作，实现了多线程操作！</p>
<hr>
<p>1.2. 为什么用start()启动线程而不是用run()方法？</p>
<p>因为<strong>线程的运行需要本地操作系统的支持</strong>，先分别来看看start()和run()方法的源码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*start()方法源码*/</span><br><span class="line">  public synchronized void start() &#123;       </span><br><span class="line">        if (threadStatus != 0) //如果当前线程不处于就绪状态，启动时就报错</span><br><span class="line">            throw new IllegalThreadStateException();</span><br><span class="line">        group.add(this);</span><br><span class="line">        boolean started = false;</span><br><span class="line">        try &#123;</span><br><span class="line">            start0();</span><br><span class="line">            started = true;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (!started) &#123;</span><br><span class="line">                    group.threadStartFailed(this);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private native void start0();</span><br></pre></td></tr></table></figure>

<p>在上面代码中出现了关键字<strong>native</strong>，表明了<strong>start0()</strong>是一个<strong>本地方法</strong>，说明start0()方法的运行需要本地操作系统的支持。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*run()方法源码*/</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        if (target != null) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>（1）从上面两处代码可以看出：</p>
<ul>
<li>start()方法最后是由<strong>start0()</strong>方法完成，它会新运行一个线程，新线程会调用<strong>run()</strong>方法，且start()方法不能被重复调用[1]，否则会抛出IllegalThreadStateException异常。</li>
<li>run()方法同一般成员方法一样，可以被重复调用。单独调用run()的时不会启动新线程，而是继续在当前线程中执行run()。为了验证run()方法不会启动新线程，可以将1.小demo中的<code>mt_A.start();mt_B.start();</code>改为<code>mt_A.run();mt_B.runt();</code><br>运行结果（每次相同）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前线程为：main</span><br><span class="line">main+线程A+运行了+1次</span><br><span class="line">main+线程A+运行了+2次</span><br><span class="line">main+线程A+运行了+3次</span><br><span class="line">main+线程A+运行了+4次</span><br><span class="line">main+线程A+运行了+5次</span><br><span class="line">main+线程A+运行了+6次</span><br><span class="line">main+线程A+运行了+7次</span><br><span class="line">main+线程A+运行了+8次</span><br><span class="line">main+线程A+运行了+9次</span><br><span class="line">main+线程A+运行了+10次</span><br><span class="line">main+线程B+运行了+1次</span><br><span class="line">main+线程B+运行了+2次</span><br><span class="line">main+线程B+运行了+3次</span><br><span class="line">main+线程B+运行了+4次</span><br><span class="line">main+线程B+运行了+5次</span><br><span class="line">main+线程B+运行了+6次</span><br><span class="line">main+线程B+运行了+7次</span><br><span class="line">main+线程B+运行了+8次</span><br><span class="line">main+线程B+运行了+9次</span><br><span class="line">main+线程B+运行了+10次</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>从执行结果可以看出，上述字符串的打印都是在主线程中完成的，未开启新线程，并且打印是按照先A后B的顺序执行的！</p>
<h3 id="二、实现Runnable接口法"><a href="#二、实现Runnable接口法" class="headerlink" title="二、实现Runnable接口法"></a>二、实现Runnable接口法</h3><p>2.1. 同样这里给出此方法实现的小demo，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MyRunnable implements Runnable &#123;</span><br><span class="line">    private int ticket = 10;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 50; i++) &#123;</span><br><span class="line">            if (ticket &gt; 0) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + &quot;+sell ticket:&quot; + ticket--);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ThreadDemo2 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyRunnable my = new MyRunnable();</span><br><span class="line">        new Thread(my).start();</span><br><span class="line">        new Thread(my).start();</span><br><span class="line">        new Thread(my).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread-1+sell ticket:10</span><br><span class="line">Thread-2+sell ticket:8</span><br><span class="line">Thread-0+sell ticket:9</span><br><span class="line">Thread-2+sell ticket:6</span><br><span class="line">Thread-1+sell ticket:7</span><br><span class="line">Thread-2+sell ticket:4</span><br><span class="line">Thread-2+sell ticket:2</span><br><span class="line">Thread-2+sell ticket:1</span><br><span class="line">Thread-0+sell ticket:5</span><br><span class="line">Thread-1+sell ticket:3</span><br></pre></td></tr></table></figure>

<p>由结果可知使用Runnable接口的方式，完成了买票的业务。即用3个线程一块进行卖票，每张票只卖了一次，符合实际情况。</p>
<p>2.2. 用继承Thread类的方法执行卖业务时，就会发现行不通，具体情况如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MyRunnable extends Thread &#123;</span><br><span class="line">    private int ticket = 10;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 50; i++) &#123;</span><br><span class="line">            if (ticket &gt; 0) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + &quot;+sell ticket:&quot; + ticket--);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ThreadDemo2 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new MyRunnable().start();</span><br><span class="line">        new MyRunnable().start();</span><br><span class="line">        new MyRunnable().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread-0+sell ticket:10</span><br><span class="line">Thread-1+sell ticket:10</span><br><span class="line">Thread-1+sell ticket:9</span><br><span class="line">Thread-0+sell ticket:9</span><br><span class="line">Thread-1+sell ticket:8</span><br><span class="line">Thread-2+sell ticket:10</span><br><span class="line">Thread-1+sell ticket:7</span><br><span class="line">Thread-0+sell ticket:8</span><br><span class="line">Thread-1+sell ticket:6</span><br><span class="line">Thread-2+sell ticket:9</span><br><span class="line">Thread-1+sell ticket:5</span><br><span class="line">Thread-0+sell ticket:7</span><br><span class="line">Thread-1+sell ticket:4</span><br><span class="line">Thread-1+sell ticket:3</span><br><span class="line">Thread-1+sell ticket:2</span><br><span class="line">Thread-1+sell ticket:1</span><br><span class="line">Thread-2+sell ticket:8</span><br><span class="line">Thread-0+sell ticket:6</span><br><span class="line">Thread-2+sell ticket:7</span><br><span class="line">Thread-0+sell ticket:5</span><br><span class="line">Thread-2+sell ticket:6</span><br><span class="line">Thread-0+sell ticket:4</span><br><span class="line">Thread-2+sell ticket:5</span><br><span class="line">Thread-0+sell ticket:3</span><br><span class="line">Thread-2+sell ticket:4</span><br><span class="line">Thread-0+sell ticket:2</span><br><span class="line">Thread-2+sell ticket:3</span><br><span class="line">Thread-0+sell ticket:1</span><br><span class="line">Thread-2+sell ticket:2</span><br><span class="line">Thread-2+sell ticket:1</span><br></pre></td></tr></table></figure>

<p>由运行结果可知，此处的三个线程各卖了10张票，与实际情况不符。</p>
<h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><blockquote>
<p>Thread类也实现了Runnable接口，应尽量使用实现Runnable的方式，因为实现Runnable接口的方式比继承Thread类方法多以下优势：<br>① 适合多个相同程序代码的线程去处理同一资源；<br>② 避免了Java单继承带来的局限性；<br>③ 增强了程序的健壮性，代码能被多个线程共享，代码与数据是独立的。</p>
</blockquote>
<p>[1]:<a href="https://www.cnblogs.com/skywang12345/" target="_blank" rel="noopener">skywang12345</a>. <a href="https://www.cnblogs.com/skywang12345/p/3479083.html" target="_blank" rel="noopener">Java多线程系列–“基础篇”03之 Thread中start()和run()的区别</a></p>
]]></content>
      <categories>
        <category>码农笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
        <tag>Tread</tag>
        <tag>Runnable</tag>
      </tags>
  </entry>
  <entry>
    <title>02| 操作系统相关知识</title>
    <url>/2019/03/29/Java%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/02-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="知识点汇总"><a href="#知识点汇总" class="headerlink" title="知识点汇总"></a>知识点汇总</h3><p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E5%9B%BE1-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB.png" alt="图1-操作系统知识点汇总"></p>
<p><code>操作系统部分知识有助于对服务问题进行排查定位，主要考察了解和应用，在面试中所占比较小。</code></p>
<h3 id="1-进程与线程（-hearts-hearts-hearts-）"><a href="#1-进程与线程（-hearts-hearts-hearts-）" class="headerlink" title="1. 进程与线程（&hearts;&hearts;&hearts;）"></a>1. 进程与线程（&hearts;&hearts;&hearts;）</h3><h5 id="1-1-进程与线程之间的区别与联系？"><a href="#1-1-进程与线程之间的区别与联系？" class="headerlink" title="1.1 进程与线程之间的区别与联系？"></a>1.1 进程与线程之间的区别与联系？</h5><ul>
<li><strong>进程</strong>，是<strong>系统资源</strong>分配的最小单位，使用<strong>独立的</strong>数据空间</li>
<li><strong>线程</strong>，是<strong>程序执行</strong>的最小单位，<strong>共享</strong>进程的数据空间</li>
</ul>
<h5 id="1-2-线程的状态"><a href="#1-2-线程的状态" class="headerlink" title="1.2 线程的状态"></a>1.2 线程的状态</h5><p>线程一般包含<strong>5</strong>种状态[^1]：<strong>创建、就绪、运行、阻塞和终止</strong>。有的会把线程状态分为<strong>6</strong>种[^2]：<strong>初始、运行、阻塞、等待、超时等待和终止</strong>，这种的将原来5种状态中的<strong>就绪</strong>和<strong>运行</strong>统称为<strong>运行</strong>，把原来<strong>阻塞</strong>细分为了<strong>阻塞、等待、超时</strong>等待三种。这样-1+2就相当于多增加了1种状态，这里还是采用经典的<strong>5</strong>种线程状态说法，可以用图1来表示5种线程状态之间的关系。</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E5%9B%BE2-%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.png" alt="图2-线程状态转换"></p>
<ul>
<li><p><strong>创建状态</strong><br>继承Thread类和实现Runnable接口都可创建一个线程，此时的线程处于<strong>创建状态</strong>。（这里扩展一点——<a href="https://www.jianshu.com/p/bc84a94f6770" target="_blank" rel="noopener">「多线程」继承Thread类和实现Runnable接口法的异同</a>）</p>
</li>
<li><p><strong>就绪状态</strong><br>当start()方法执行后，线程就进入了<strong>就绪状态</strong>。这时线程就处在了线程队列当中，等待CPU资源，代表其已经具备运行的资格。</p>
</li>
<li><p><strong>运行状态</strong><br>当处于就绪状态的线程获得CPU资源时，该线程就进入了<strong>运行状态</strong>，此时run()方法中定义的操作将被执行。</p>
</li>
<li><p><strong>阻塞状态</strong><br>运行状态的线程由于某些原因放弃了对CPU的使用权，这时候的线程就进入了<strong>阻塞状态</strong>，当引起阻塞的原因被解除时，线程才重新可以进入就绪状态。一般阻塞状态可以分为以下三种[^3]：<br>（1）<strong>等待阻塞</strong>：执行<strong>wait()</strong>方法，该线程会释放占用的所有资源，JVM会把该线程放入<strong>“等待池”</strong>中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒；<br>（2）<strong>同步阻塞</strong>：在获取对象的<strong>同步锁</strong>时，若该<strong>同步锁</strong>被别的线程占用，则JVM会把该线程放入“锁池”中，等待其他线程释放同步锁。<br>（3）<strong>其他阻塞</strong>：执行<strong>sleep()或join()</strong>方法，或者发出了耗时的<strong>输入/输出</strong>请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者输入/输出处理完毕时，线程重新转入就绪状态。</p>
</li>
<li><p><strong>终止状态</strong><br>线程的<strong>run()方法结束</strong>自然死亡或<strong>未捕获的异常</strong>导致run()方法终止，都会让该线程进入终止状态也就<strong>不具备</strong>继续运行能力了。判断线程是否终止，可用isAlive()方法。</p>
</li>
</ul>
<h5 id="1-3-线程调度（调度算法）-4"><a href="#1-3-线程调度（调度算法）-4" class="headerlink" title="1.3 线程调度（调度算法）[^4]"></a>1.3 线程调度（调度算法）[^4]</h5><p>在分析各种调度算法前，先简要了解一下<strong>分时系统</strong>与<strong>实时系统</strong>[^5]（典型的分时系统有UNIX和Linux，而对于windows，<code>严格上说它的本质应该是多种集合的操作系统，它在运行过程中，根据不同的进程会有实时响应和分时响应，部分功能中，它也可以实现分布式操作。</code>）。简单来说分时系统和实时系统都具备<strong>多路性</strong>（能为多个终端提供服务）和<strong>独立性</strong>（每个终端之间互不干扰），在<strong>及时性</strong>方面分时系统考虑的时间是在人可接受的范围内，而实时系统由于军事、工业、多媒体等特定业务的执行需要将时间控制在秒级、百毫秒级直至毫秒级甚至0.1毫秒；在<strong>交互性</strong>方面，分时系统具备该特性不必说，而实时信息处理系统具备的交互性也仅限于特定的服务程序；至于<strong>可靠性</strong>，实时系统此方面的要求要比分时系统高的多。</p>
<ul>
<li><p><strong>时间片轮转调度（Round Robin, RR）</strong><br>CPU为让每个线程看起来像在<strong>并行执行</strong>而分配出一个线程运行的时长，也就是<strong>时间片</strong>。每个<strong>就绪状态</strong>的线程在排队队列中将按时间片长<strong>依次循环</strong>执行，直至所有线程运行完毕。</p>
</li>
<li><p><strong>先来先服务调度（First Come First Serve, FCFS）</strong><br>该调度方法仅考虑就绪状态的线程在排队队列中的<strong>先后顺序</strong>，不考虑其他因素，按照从队首到队尾的顺序依次执行每个线程，只有当该线程运行完毕或因其他原因被阻塞时才运行下一个线程。这种调度简单易行，是一种非抢占式调度策略。<br><code>比较有利于长作业，而不利于短作业；有利于CPU繁忙的作业，而不利于I/O繁忙的作业。</code>[^6]</p>
</li>
<li><p><strong>优先级调度（Task Switching, TS）[^7][^8][^9]</strong><br>可以通过setPriority()方法来设定线程的优先级，优先级有<strong>10</strong>个梯度（1~10），即（<strong>MIN_PRIORITY【最低1级】</strong>—-&gt;……—-&gt;<strong>NORM_PRIORITY【普通5级】</strong>……—-&gt;<strong>MAX_PRIORITY【最高10级】</strong>）。处于就绪状态的两个线程，高优先级的线程比低优先级的线程具有<strong>更大的概率</strong>被CPU执行。至于为什么优先级高的线程不一定先执行，可参见[^10]。</p>
</li>
<li><p>多级反馈队列调度（Multilevel Feedback Queue Scheduling, MFQS）[^11]<br><code>UNIX操作系统采取的便是这种调度算法。</code></p>
<blockquote>
<p><strong>NOTE1：</strong>假设有三个待调度的队列Q1、Q2和Q3，优先级依次递减。进程在进入待调度的队列等待时，首先进入优先级最高的Q1等待。　　</p>
</blockquote>
</li>
</ul>
<p><strong>NOTE2：</strong>首先调度优先级高的队列中的进程。若高优先级中队列中已没有调度的进程，则调度次优先级队列中的进程。<br><strong>NOTE3：</strong>对于同一个队列中的各个进程，按照时间片轮转法调度。比如Q1队列的时间片为N，那么Q1中的作业在经历了N个时间片后若还没有完成，则进入Q2队列等待，若Q2的时间片用完后作业还不能完成，一直进入下一级队列Q3，直至完成。　　<br><strong>NOTE4：</strong>在低优先级的队列中的进程在运行时，又有新作业达到最高优先级队列，那么在运行完这个时间片后，CPU马上分配给新到达的作业（抢占式）。　　</p>
<ul>
<li><strong>高响应比优先调度（Highest Response Ratio Next， HRRN）</strong><br>该调度策略既考虑作业的<strong>执行时间</strong>也考虑作业的<strong>等待时间</strong>，综合了<strong>先来先服务</strong>和<strong>最短作业优先</strong>两种算法的特点。但每次调度之前都要计算响应比，这也增加了系统开销，响应比公式定义如下：</li>
</ul>
<p><strong>响应比 =（等待时间+要求服务时间）/ 要求服务时间=1+等待时间/要求服务时间</strong>，可以看出响应比是大于1的。<br>由响应比公式可知：<br>(1) 如果线程的等待时间相同，则线程要求服务的时间愈短，其优先级愈高，因此该调度类似于短作业优先调度；<br>(2) 如果线程要求服务的时间相同，则线程等待时间愈短，其优先级愈高，因此该调度类似于先来先服务调度；<br>(3) 对于要求服务时间长的进程，进程的优先级可以随等待时间的增加而提高，因此也能随着优先级的提高得到服务。</p>
<h5 id="1-4-线程切换步骤-12"><a href="#1-4-线程切换步骤-12" class="headerlink" title="1.4 线程切换步骤[^12]"></a>1.4 线程切换步骤[^12]</h5><blockquote>
<p><strong>多线程不一定就比单线程程序跑的快</strong>，因为多线程应用程序会带来额外的开销和竞争问题，可能会拖慢系统的执行速度。这些因素包括：对IO设备的竞争，对锁的竞争，以及CPU对线程执行上下文的频繁切换等。</p>
</blockquote>
<ul>
<li><p>线程的上下文一般指<strong>包括cpu的寄存器和程序计数器在某一时间点的内容等</strong></p>
</li>
<li><p>线程的上下文切换与切换代价<br><code>当 CPU 从执行一个线程切换到执行另外一个线程的时候，它需要先存储当前线程的本地的数据，程序指针等，然后载入另一个线程的本地数据，程序指针等，最后才开始执行。这种切换称为“上下文切换”(“context switch”)。CPU 会在一个上下文中执行一个线程，然后切换到另外一个上下文中执行另外一个线程。
线程在运行的时候除了需要从计算机里面获得【CPU资源】，还需要一些【内存】来维持它本地的【堆栈】，还需要占用操作系统中一些资源来【管理线程】。</code></p>
</li>
</ul>
<h5 id="1-4-Linux下的进程间通信（InterProcess-Communication-IPC）"><a href="#1-4-Linux下的进程间通信（InterProcess-Communication-IPC）" class="headerlink" title="1.4 Linux下的进程间通信（InterProcess Communication, IPC）"></a>1.4 Linux下的进程间通信（InterProcess Communication, IPC）</h5><p><code>面试中间件研发时常考察</code>，了解以下6种进程间通信的相关原理[^13]</p>
<ul>
<li>共享内存（适用于<strong>进程间数据共享场景</strong>）</li>
<li>UnixSocket（适用于<strong>进程间数据交换场景</strong>）</li>
<li>MessageQueue消息队列（适用于<strong>进程间数据交换场景</strong>）</li>
<li>Pipe管道</li>
<li>Signal</li>
<li>Semaphone信号量</li>
</ul>
<h5 id="1-5-协程"><a href="#1-5-协程" class="headerlink" title="1.5 协程"></a>1.5 协程</h5><blockquote>
<p>（1）协程又称为“微线程”，是一种<strong>用户态</strong>的轻量级线程（协程的调度<strong>完全由用户控制</strong>）。协程拥有自己的寄存器上下文和栈，调度切换时直接操作栈而基本没有内核切换的开销，所以其切换的代价要比线程上下文切换<strong>小很多</strong>，另外它可以不加锁的访问全局变量。<br>（2）java的第三方协程框架，如<strong>Kilim</strong>和<strong>quasar</strong>。</p>
</blockquote>
<h3 id="2-Linux常用命令"><a href="#2-Linux常用命令" class="headerlink" title="2. Linux常用命令"></a><a href="https://www.jianshu.com/p/467f7608b070" target="_blank" rel="noopener">2. Linux常用命令</a></h3><h3 id="3-死锁"><a href="#3-死锁" class="headerlink" title="3. 死锁"></a>3. 死锁</h3><blockquote>
<p>两个线程都在等待对方先完成，造成了程序的停滞，一般程序的死锁都是在程序运行时出现的。</p>
</blockquote>
<h3 id="4-内存分页管理与Swap"><a href="#4-内存分页管理与Swap" class="headerlink" title="4. 内存分页管理与Swap"></a>4. 内存分页管理与Swap</h3><p><a href="https://blog.csdn.net/xifeijian/article/details/8209750" target="_blank" rel="noopener">Linux中关于swap、虚拟内存和page的区别</a></p>
<h3 id="5-任务队列与CPU-Load"><a href="#5-任务队列与CPU-Load" class="headerlink" title="5. 任务队列与CPU Load"></a>5. 任务队列与CPU Load</h3><p><a href="https://blog.csdn.net/qq_41790443/article/details/80542718" target="_blank" rel="noopener">任务队列，消息队列和rpc的区别是什么？</a><br><a href="https://www.cnblogs.com/muahao/p/6492665.html" target="_blank" rel="noopener">CPU负载和 CPU使用率</a></p>
<h3 id="6-知识点扩展（了解）"><a href="#6-知识点扩展（了解）" class="headerlink" title="6. 知识点扩展（了解）"></a>6. 知识点扩展（了解）</h3><h5 id="6-1-内存屏障"><a href="#6-1-内存屏障" class="headerlink" title="6.1 内存屏障"></a>6.1 内存屏障</h5><blockquote>
<p>内存屏障，也称内存栅栏，内存栅障，屏障指令等， 是一类同步屏障指令，是CPU或编译器在对内存随机访问的操作中的一个同步点，使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作。</p>
</blockquote>
<h5 id="6-2-指令乱序"><a href="#6-2-指令乱序" class="headerlink" title="6.2 指令乱序"></a>6.2 指令乱序</h5><p><a href="https://blog.csdn.net/gjq_1988/article/details/39520729" target="_blank" rel="noopener">（转）CPU乱序执行原理</a></p>
<h5 id="6-3-CPU亲和性（affinity）"><a href="#6-3-CPU亲和性（affinity）" class="headerlink" title="6.3 CPU亲和性（affinity）"></a>6.3 CPU亲和性（affinity）</h5><p><a href="https://www.cnblogs.com/LubinLew/p/cpu_affinity.html" target="_blank" rel="noopener">Linux中CPU亲和性(affinity)</a></p>
<h5 id="6-4-Netfilter和iptables"><a href="#6-4-Netfilter和iptables" class="headerlink" title="6.4 Netfilter和iptables"></a>6.4 Netfilter和iptables</h5><p><a href="https://www.ibm.com/developerworks/cn/linux/network/s-netip/index.html" target="_blank" rel="noopener">netfilter/iptables 简介</a></p>
<p>[^1]:李兴华. Java开发实战经典[M]. 北京: 清华大学出版社, 2009, 281-282.</p>
<p>[^2]:<a href="https://me.csdn.net/pange1991" target="_blank" rel="noopener">潘建南</a>. <a href="https://blog.csdn.net/pange1991/article/details/53860651" target="_blank" rel="noopener">Java线程的6种状态及切换(透彻讲解)</a> </p>
<p>[^3]:<a href="https://home.cnblogs.com/u/jijijiefang/" target="_blank" rel="noopener">积极解放</a>. <a href="https://www.cnblogs.com/happy-coder/p/6587092.html" target="_blank" rel="noopener">JAVA 线程状态及转化</a></p>
<p>[^4]:<a href="https://me.csdn.net/sscsgss" target="_blank" rel="noopener">超人</a>. <a href="https://blog.csdn.net/sscsgss/article/details/574510" target="_blank" rel="noopener">线程调度算法分析</a> </p>
<p>[^5]:<a href="https://me.csdn.net/qq_37653144" target="_blank" rel="noopener">___Blue_H</a>. <a href="https://blog.csdn.net/qq_37653144/article/details/77857376" target="_blank" rel="noopener">分时操作系统与实时操作系统</a></p>
<p>[^6]:<a href="https://me.csdn.net/qilixiang012" target="_blank" rel="noopener">Coding-lover</a>. <a href="https://blog.csdn.net/coslay/article/details/44559411" target="_blank" rel="noopener">进程和线程调度算法</a></p>
<p>[^7]:<a href="https://me.csdn.net/A_Runner" target="_blank" rel="noopener">诺贝尔爱情奖</a>. <a href="https://blog.csdn.net/a_runner/article/details/80374317" target="_blank" rel="noopener">Java线程的优先级</a></p>
<p>[^8]:<a href="https://me.csdn.net/margin_0px" target="_blank" rel="noopener">潜行的Q</a>. <a href="https://blog.csdn.net/margin_0px/article/details/81736360" target="_blank" rel="noopener">java的线程优先级和守护线程</a></p>
<p>[^9]:<a href="https://home.cnblogs.com/u/meet/" target="_blank" rel="noopener">FangZheng</a>. <a href="https://www.cnblogs.com/meet/p/5290938.html" target="_blank" rel="noopener">线程的优先级</a></p>
<p>[^10]:<a href="https://me.csdn.net/qpzkobe" target="_blank" rel="noopener">强迫症Kobe</a>. <a href="https://blog.csdn.net/qpzkobe/article/details/79273975?utm_source=blogxgwz5" target="_blank" rel="noopener">为什么优先级高的线程并不一定先执行</a></p>
<p>[^11]:<a href="https://me.csdn.net/yangquanhui1991" target="_blank" rel="noopener">taxue505</a>. <a href="https://blog.csdn.net/yangquanhui1991/article/details/47446151" target="_blank" rel="noopener">多级反馈队列调度算法</a></p>
<p>[^12]:<a href="https://home.cnblogs.com/u/ktgu/" target="_blank" rel="noopener">比特流</a>. <a href="https://www.cnblogs.com/ktgu/p/3529144.html" target="_blank" rel="noopener">多线程的代价及上下文切换</a></p>
<p>[^13]:<a href="https://www.jianshu.com/u/fa8a094b73f5" target="_blank" rel="noopener">易霂</a>. <a href="https://www.jianshu.com/p/552fff0c56fa" target="_blank" rel="noopener">6种Linux进程间的通信方式</a></p>
]]></content>
      <categories>
        <category>Java 知识点梳理</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>01| 职业未来发展</title>
    <url>/2019/03/28/Java%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/01-%E8%81%8C%E4%B8%9A%E6%9C%AA%E6%9D%A5%E5%8F%91%E5%B1%95/</url>
    <content><![CDATA[<h3 id="1-职业晋升通道"><a href="#1-职业晋升通道" class="headerlink" title="1. 职业晋升通道"></a>1. 职业晋升通道</h3><p>这里用图1表示JAVA从业者的职位晋升过程。</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E5%9B%BE1-%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%91%98%E6%99%8B%E5%8D%87%E9%80%9A%E9%81%93.png" alt="图1-技术人员晋升通道"></p>
<p>从图1可以看出在经历1~3年从工程师晋升到高级工程师后，有两个方向可以选择；一个是走技术方向，另一个是走管理方向，先分别讨论如下。</p>
<p>1.1 技术方向</p>
<blockquote>
<p>重点培养自己以下3种能力：<br>(1) <strong>技术攻坚能力</strong><br>(2) <strong>架构设计</strong><br>(3) <strong>专业知识</strong><br><code>需要做到疑难问题的排查、大型项目的功能拆分、技术品牌的塑造等；具体工作有原理实现、注重框架能力的培养；更深一层的还有大规模高并发场景，高可用可扩展措施和方案，业务的抽象和架构能力，分布式服务设计原则的理解等。</code></p>
</blockquote>
<p>1.2 管理方向</p>
<blockquote>
<p>重点培养自己以下3种能力：<br>(1) <strong>团队管理</strong><br>(2) <strong>项目管理</strong><br>(3) <strong>沟通协作</strong><br><code>偏重于团队把控，需要让团队形成技术战斗力，利用一切资源推进项目，让团队完成作战目标。另外做好团 队内和跨团队的沟通协作也是很重要的一块</code></p>
</blockquote>
<p><strong>* 需要重点说明一下，这两个方向没有明显边界，也就是说做管理的不会远离架构设计，做技术专家也需要带队，二者的区分在于侧重点不同，前者更偏向于技术架构而后者更偏向于管理项目推进。</strong></p>
<p>PS：在面试被问及相关问题时，可参考如下例子：</p>
<blockquote>
<p>答：从过往的经验来看，我对项目的整体规划、管理推进，在任务推进协调沟通方面有过突出的表现，所以我的职业规划是成为一名优秀的技术经理，并以管理方向为发展目标。<br>（<em>这样答，面试官可能会对你的相关经历产生兴趣。</em>）</p>
</blockquote>
<h3 id="2-常见技术级别划分"><a href="#2-常见技术级别划分" class="headerlink" title="2. 常见技术级别划分"></a>2. 常见技术级别划分</h3><table>
<thead>
<tr>
<th align="center">职级</th>
<th align="center">工作年限</th>
<th align="center">B（百度）</th>
<th align="center">A（阿里）</th>
<th align="center">T（腾讯）</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">工程师</td>
<td align="center">1~3年</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">多为校招内部晋升，较少为社招</td>
</tr>
<tr>
<td align="center">高级工程师</td>
<td align="center">2~5年</td>
<td align="center">T4</td>
<td align="center">P5</td>
<td align="center">T2-2</td>
<td align="center">技术主力，公司看重此级别人才的培养与成长</td>
</tr>
<tr>
<td align="center">资深工程师</td>
<td align="center">3~6年</td>
<td align="center">T5</td>
<td align="center">P6</td>
<td align="center">T2-3</td>
<td align="center">技术主力，公司看重此级别人才的培养与成长</td>
</tr>
<tr>
<td align="center">技术专家</td>
<td align="center">4~8年</td>
<td align="center">T6</td>
<td align="center">P7</td>
<td align="center">T3-1</td>
<td align="center">一般需要5年从业经验以上</td>
</tr>
<tr>
<td align="center">高级技术专家</td>
<td align="center">5~10年</td>
<td align="center">T7</td>
<td align="center">P8</td>
<td align="center">T3-3</td>
<td align="center">一般需要5年从业经验以上</td>
</tr>
</tbody></table>
<h3 id="3-如何选择公司和岗位"><a href="#3-如何选择公司和岗位" class="headerlink" title="3.如何选择公司和岗位"></a>3.如何选择公司和岗位</h3><blockquote>
<p>在换工作时，应聘公司有多个技术岗位，需要都投吗？手里有多个offer，如何进行决策？应当选钱多的还是大平台、福利待遇好的？</p>
</blockquote>
<p>一般来说可从以下几个维度进行考虑<br>(1) 公司规模大小</p>
<ul>
<li>大厂适合镀金，提高身价</li>
</ul>
<p>(2) 业务线或团队的重要程度</p>
<ul>
<li>核心业务适合长期稳定的发展，在核心团队对自身能力和经验提升得较快；</li>
<li>边缘业务有因公司战略调整而被裁掉的风险。<br><code>综合这两点来说，大公司核心业务竞争压力大，小公司边缘业务应尽量避免；对于工作1~3年的推荐去小公司核心业务，因为职业生涯前期需要更多的基础知识历练场景。</code></li>
</ul>
<p>(3) 个人条件的匹配程度</p>
<ul>
<li>首先需要对自身条件进行评估，评估因素应包含岗位要求、业务方向、自身能力兴趣经验，匹配度与面试成功率成正比，匹配度越高将越利于以后个人的职业发展。</li>
<li>总结就是：优先选择核心业务和与自己条件匹配度高的岗位。</li>
</ul>
<h3 id="4-面试流程"><a href="#4-面试流程" class="headerlink" title="4.面试流程"></a>4.面试流程</h3><p>具体面试流程参见图2。</p>
<p><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E5%9B%BE2-%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%91%98%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="图2-技术人员面试流程图"></p>
<ul>
<li><strong>前置面试</strong>需要确定是否有笔试、电话面试、上机编程等，同时需要沟通好相关细节，如电话面试时间，上机编程是否需要自带电脑等等（现多为邮件发送笔试地址，用浏览器即可）;</li>
<li><strong>技术一面</strong>为正式面试的开始，有1~2位面试官，以考察基础知识与实际应用能力为主，时长一小时左右；可能要求手写小算法，如排序、字符串处理等；</li>
<li><strong>技术二面</strong>仍以技术为主，侧重于考察技术深度，比如项目经历、架构能力、算法等。面试时长一小时左右，可能要求画出项目的架构图或交互流程图等，并对项目存在的问题和改进方案进行询问；（规模较小的公司到二面就结束了）</li>
<li><strong>技术三面</strong>注重考察项目经历和架构设计，还会设计到职业规划、职业兴趣，技术视野等方面的问题，以架构能力、技术敏感度和发展潜力为主；（少部分公司存在技术四面，如Tencent在较高岗位的面试中，存在跨部门的交叉面试，面试内容与技术三面内容基本相同）</li>
<li><strong>人事面</strong>一般考察个人发展规划，上家公司离职原因，价值观，薪资待遇等，如果特别期望进入该公司，不可因为1~2k导致因小失大，因为工作前期以积累为主，三年后谈待遇也不迟。</li>
<li><strong>上级领导面</strong>为公司级高管面试，这种非技术面视情况而定，一般为1~2面。可能简单询问工作经历，对公司的看法，对行业的看法，未来规划等，一般无原则性错误均可顺利通过。<br><code>总结：（1）面试前询问时候有电话面试、笔试、上机等前置面试等；（2）技术一面二面偏重实际工作能力，技术二面三面偏重架构能力和发展能力；（3）二面与三面通常决定入职后的职位级别，也就直接对应着与HR谈薪资的底气了，应当好好表现。</code></li>
</ul>
<blockquote>
<p>面试前的准备工作对面试能否成功起着关键作用，面试成功的三个重要因素：<strong>能力</strong>、<strong>心态</strong>、<strong>沟通</strong>。所以面试前应该做好哪些准备工作？</p>
<blockquote>
<p><strong>能力</strong><br>（1）了解应聘公司及岗位信息<br>（2）系统复习基础知识<br>（3）对负责过的项目进行提炼，从架构方面重新梳理总结项目经历<br>（4）对经典框架原理、使用场景和实现方式进行学习<br>（5）对常考考点进行专项突击，阅读常考考点源码<br>（6）对业务方面进行有针对性的加分准备，比如面试中间件方向岗位，可以突出自己有存储中间件的开发经历，有过链路协议设计经历等。<br><strong>心态</strong><br>（1）面试前多渠道搜集面试公司岗位所属团队平均福利等资料信息，增加信心；<br>（2）当面临压力面试时，需要多给予自己心里暗示，控制情绪；<br><strong>沟通</strong><br>（1）提前准备一个简单有特色的自我介绍，主要描述自己的技术特长和职业优势，禁忌谈及兴趣爱好星座等不重要内容；<br>（2）关于不会的问题，应主动坦白并提出自己的解题思路，不然容易造成冷场；另外也可以选择询问面试官能够换个问题；<br>（3）当没有听明白面试官的问题时，不要着急作答，应及时沟通确认问题；<br>（4）注意面试细节，如面试微表情，面试过程中应尽量不要皱眉、控制坐姿和手势、注意语速、表达逻辑清晰观点明确，不要随意打断面试官，表现出谦虚有礼的面试态度等。另外可以观察面试官的反应，如果TA在简历上奋笔疾书，说明你提供的信息有用；如果停下来很长时间不写了，应提醒自己是否跑题；若面试官表现出不耐烦或深呼吸，应注意自己是否领会了面试官的考察意图，可以再次询问。</p>
</blockquote>
</blockquote>
<p><strong>面试考察点</strong>一般分为<strong>硬技能</strong>和<strong>软实力</strong><br>（1）硬技能：基础知识的掌握、过往的项目经验、系统架构的设计能力、对不同框架工具的综合应用能力；<br>（2）软实力：逻辑思维的灵活与否、沟通表达协作能力、项目管理推进能力、新技术学习思考能力、培养潜力；</p>
<p><strong>不同职级面试考察的区别</strong><br>（1）初/中级工程师<br>       首先是能完成分配的研发任务，面试官就偏重于<strong>基础知识</strong>掌握、<strong>逻辑思维</strong>的灵活性、有无<strong>培养潜力</strong>；其次是过往<strong>项目经历</strong>与<strong>学习思考能力</strong>；出于对工作年限的考虑，对架构能力、管理推进、沟通协作能力不作过高要求；<br>（2）高级工程师<br>一般需要独立完成功能模块或是子项目的设计与开发，比初/中级工程师对<strong>项目经验</strong>、<strong>学习思考</strong>、<strong>架构能力</strong>、<strong>管理推进</strong>、<strong>沟通协作能力</strong>有更高要求，特别是<strong>项目经验</strong>与<strong>学习思考能力</strong>；<br>（3）技术专家<br>在高级工程师的要求上，对项目架构、项目经验、管理推进、协作沟通能力有相当高要求，能够独立负责一个项目，做好项目架构，完成功能模块的拆解和任务分配，推进团队内外部的事务，协调资源管理进度，带领团队完成任务目标。<br><code>提示：软实力突出会对技术工程师的职业生涯大大加分！</code></p>
<p><strong>硬技能学习的四大部分</strong><br>详情参见图3<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E5%9B%BE3-%E7%A1%AC%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E5%9B%BE.png" alt="图3-硬技能学习图"></p>
]]></content>
      <categories>
        <category>Java 知识点梳理</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>00| 前言：构建能力框架</title>
    <url>/2019/03/27/Java%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/00-%E6%9E%84%E5%BB%BA%E8%83%BD%E5%8A%9B%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<blockquote>
<p>Java技术目前应用广泛，工作求职者众多，取得高薪报酬是码农自身水平的直接体现，这里将Java求职中需要掌握的内容分为以下3个部分。</p>
</blockquote>
<h3 id="1-基础部分"><a href="#1-基础部分" class="headerlink" title="1. 基础部分"></a>1. 基础部分</h3><ul>
<li>技术岗位与面试流程</li>
<li>计算机基础</li>
<li>JVM原理</li>
<li>多线程</li>
<li>设计模式</li>
<li>数据结构与算法</li>
</ul>
<h3 id="2-应用部分"><a href="#2-应用部分" class="headerlink" title="2. 应用部分"></a>2. 应用部分</h3><ul>
<li>常用工具集</li>
<li>常用框架</li>
<li>缓存</li>
<li>队列</li>
<li>数据库</li>
</ul>
<h3 id="3-综合部分"><a href="#3-综合部分" class="headerlink" title="3. 综合部分"></a>3. 综合部分</h3><ul>
<li>系统架构设计</li>
<li>微服务架构</li>
<li>容器化</li>
</ul>
<hr>
<h3 id="找工作面对的3个问题"><a href="#找工作面对的3个问题" class="headerlink" title="找工作面对的3个问题"></a>找工作面对的3个问题</h3><ol>
<li><p>如何准备简历？</p>
<blockquote>
<p>简历直接决定着求职者能否获得面试机会，所以简历的重要性不言而喻！有数据显示80%的简历通不过初步筛查，原因有：</p>
</blockquote>
<p> (1) 工作或项目经验描述不到位<br> (2) 不懂得如何包装技术特长<br> (3) 不占优的学历放在了最重要的位置<br> (4) 排版较乱，语言不精练</p>
</li>
</ol>
<p><strong>补充</strong>：不可进行不看岗位的盲目海投，要根据岗位要求及时调整简历；简历中工作年限，对口经验、学历、简历美观度都需要留意。<br><br></p>
<ol start="2">
<li><p>面试官会考什么问题？</p>
<blockquote>
<p>公司所属行业和工作年限要求都对求职者有着不同的侧重点，现举例分析如下：</p>
</blockquote>
<p> (1) 从公司所属行业来看<br> ① 社交门户类，多考察大规模<strong>高并发</strong>场景的应用与<strong>架构能力</strong>；<br> ② O2O类，多考察<strong>综合能力</strong>；<br> ③ 互联网金融类，多考察<strong>逻辑能力</strong>与<strong>高可用</strong>、<strong>安全领域</strong>的经验。<br><br> (2) 从工作年限上来看<br> ① 校招，考察基础知识和逻辑思维，以及培养潜力；<br> ② 初中级工程师，考察知识的广度和基础知识的应用；<br> ③ 高级或资深工程师，考察综合能力，如对基本原理的深入理解和对各种知识的灵活运用。<br><br> <strong>补充</strong>：针对面试官抛出的问题，回答时需要尽量发散扩展；建议在面试前对公司业务和岗位职责作针对性的准备，以提高面试成功率。</p>
<ol start="3">
<li>如何提升晋级？<blockquote>
<p>技术的更新迭代速度快，学习要系统，需要先建立一套知识体系或思维框架，然后再丰富完善其中细节。</p>
</blockquote>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 知识点梳理</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>职业发展</tag>
      </tags>
  </entry>
  <entry>
    <title>用一张GIF理解“Java子类实例化总是默认调用父类的无参构造方法”</title>
    <url>/2019/03/25/%E7%A0%81%E5%86%9C%E7%AC%94%E8%AE%B0/%E7%94%A8%E4%B8%80%E5%BC%A0GIF%E7%90%86%E8%A7%A3%E2%80%9CJava%E5%AD%90%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%80%BB%E6%98%AF%E9%BB%98%E8%AE%A4%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E7%9A%84%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E2%80%9D/</url>
    <content><![CDATA[<blockquote>
<p>之前学基础的时候记得继承类继承父类所有非private的变量和方法，另外Java子类实例总是默认调用父类的无参构造方法，但认识不深刻，所以这次直接自己写一个父类和子类，直接单步调试一下。</p>
</blockquote>
<h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 姓氏</span></span><br><span class="line">    <span class="keyword">private</span> String lastName = <span class="string">"张"</span>;</span><br><span class="line">    <span class="comment">// 门牌号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> roomNumber = <span class="number">405</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 共有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getRoomNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roomNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类 无参构造函数 父类的姓氏："</span> + lastName + <span class="string">"，门牌号："</span> + roomNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">(String lastName, <span class="keyword">int</span> roomNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        <span class="keyword">this</span>.roomNumber = roomNumber;</span><br><span class="line">        System.out.println(<span class="string">"父类 2个参数的参构造函数 父类的姓氏："</span> + lastName + <span class="string">"，门牌号："</span> + roomNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 兴趣爱好</span></span><br><span class="line">    <span class="keyword">private</span> String hobbies;</span><br><span class="line">    <span class="comment">// 从事工作</span></span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHobbies</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类 无参数的构造函数 儿子兴趣爱好:"</span> + hobbies + <span class="string">"，从事工作："</span> + job);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">(String hobbies, String job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbies = hobbies;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">        System.out.println(<span class="string">"子类 2个参数的构造函数 儿子兴趣爱好:"</span> + hobbies + <span class="string">"，从事工作："</span> + job);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">(String lastName, <span class="keyword">int</span> roomNumber, String hobbies, String job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(lastName, roomNumber);</span><br><span class="line">        <span class="keyword">this</span>.hobbies = hobbies;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">        System.out.println(<span class="string">"子类 使用super()带4个参数的构造函数 儿子兴趣爱好:"</span> + hobbies + <span class="string">"，从事工作："</span> + job);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大儿子:"</span>);</span><br><span class="line">        Child bigSon = <span class="keyword">new</span> Child();</span><br><span class="line">        System.out.println(<span class="string">"大儿子姓氏:"</span> + bigSon.getLastName());</span><br><span class="line">        System.out.println(<span class="string">"---------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"二儿子:"</span>);</span><br><span class="line">        Child secondSon = <span class="keyword">new</span> Child(<span class="string">"桌球"</span>, <span class="string">"律师"</span>);</span><br><span class="line">        System.out.println(<span class="string">"二儿子姓氏："</span> + secondSon.getLastName() + <span class="string">"，爱好："</span>+secondSon.getHobbies()+<span class="string">"，工作："</span>+secondSon.getJob());</span><br><span class="line">        System.out.println(<span class="string">"---------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"小儿子:"</span>);</span><br><span class="line">        Child littleSon = <span class="keyword">new</span> Child(<span class="string">"李"</span>, <span class="number">306</span>, <span class="string">"足球"</span>, <span class="string">"医生"</span>);</span><br><span class="line">        System.out.println(<span class="string">"小儿子姓氏："</span> + littleSon.getLastName() + <span class="string">"，爱好："</span>+littleSon.getHobbies()+<span class="string">"，工作："</span>+littleSon.getJob());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大儿子:</span><br><span class="line">父类 无参构造函数 父类的姓氏：张，门牌号：405</span><br><span class="line">子类 无参数的构造函数 儿子兴趣爱好:null，从事工作：null</span><br><span class="line">大儿子姓氏:张</span><br><span class="line">---------------------------</span><br><span class="line">二儿子:</span><br><span class="line">父类 无参构造函数 父类的姓氏：张，门牌号：405</span><br><span class="line">子类 2个参数的构造函数 儿子兴趣爱好:桌球，从事工作：律师</span><br><span class="line">二儿子姓氏：张，爱好：桌球，工作：律师</span><br><span class="line">---------------------------</span><br><span class="line">小儿子:</span><br><span class="line">父类 2个参数的参构造函数 父类的姓氏：李，门牌号：306</span><br><span class="line">子类 使用super()带4个参数的构造函数 儿子兴趣爱好:足球，从事工作：医生</span><br><span class="line">小儿子姓氏：李，爱好：足球，工作：医生</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h3 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h3><p>调试断点加在：18行，22行，44行，=48行，54行，64行<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E7%BB%A7%E6%89%BF-%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.gif" alt="调试结果GIF"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>从运行结果可以看出，尽管子类并没有给<code>姓氏</code>赋值，但依然打印出了<code>姓氏：李</code>，说明子类可以调用到父类非private的方法。</li>
<li>从GIF中的调试结果可以看出，每次子类的实例在初始化时，不论子类实例化时是否带由参数都将进入父类无参构造函数。当且仅当子类构造方法使用super()方法时，会进入父类相应的有参构造函数。</li>
<li>最后还可以从GIF中发现，非static成员变量的执行顺序在构造函数之前。</li>
</ol>
]]></content>
      <categories>
        <category>码农笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title>新特性09| Base64</title>
    <url>/2019/03/25/Java8%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A709-Base64/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Base64 is a binary-to-text encoding scheme that represents binary data in a printable ASCII string format by translating it into a radix-64 representation. Each Base64 digit represents exactly 6 bits of binary data.</p>
</blockquote>
<blockquote>
<p>（译文）Base64是一个二进制转换为文本的编码方案，它将二进制数转为radix-64编码数，从而能用ASCII字符串表示二进制数，每一个Base64数刚好能表示6为二进制数。</p>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li><p>Base64用来防止信息系统传输的数据被改变，例如在email中，可能不是8位清洁的（可能会是8位乱码）。比如在邮件中添加了图片附件，然后希望图片到达后不会出现乱码等情况。邮件程序可以用Base64编码图片附件，然后将其以相应的文本形式插入到邮件信息中。</p>
</li>
<li><p>Java8目前内置了Base64的编码器和译码器，通过静态方法可以获取到下方3种编译码器：</p>
<ul>
<li><strong>基本</strong>：输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/；</li>
<li><strong>URL</strong>：输出被映射到一组字符A-Za-z0-9+_，输出是URL和文件；</li>
<li><strong>MIME</strong>（Multipurpose Internet Mail Extensions，多用途互联网邮件扩展类型）：输出被映射到MIME的友好格式。输出每行不超过76字符，并且使用回车符’\r’加换行符’\n’作为分割。编码输出最后没有行分割符。</li>
</ul>
</li>
</ol>
<p><strong>tip</strong>:回车符(carriage return, ‘\r’)使光标移到行首，换行符(line feed, ‘\n’)是使光标下移一行。</p>
<h4 id="Base64编码和译码"><a href="#Base64编码和译码" class="headerlink" title="Base64编码和译码"></a>Base64编码和译码</h4><p>Base64依靠一个简单的编码和译码算法。它使用一个含65个字符的US-ASCII字符集，其中前64个字符每个都按顺序映射为一个6位二进制数。下方为映射表：</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>Encoding</th>
<th>Value</th>
<th>Encoding</th>
<th>Value</th>
<th>Encoding</th>
<th>Value</th>
<th>Encoding</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>A</td>
<td>17</td>
<td>R</td>
<td>34</td>
<td>i</td>
<td>51</td>
<td>z</td>
</tr>
<tr>
<td>1</td>
<td>B</td>
<td>18</td>
<td>S</td>
<td>35</td>
<td>j</td>
<td>52</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>C</td>
<td>19</td>
<td>T</td>
<td>36</td>
<td>k</td>
<td>53</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>D</td>
<td>20</td>
<td>U</td>
<td>37</td>
<td>l</td>
<td>54</td>
<td>2</td>
</tr>
<tr>
<td>4</td>
<td>E</td>
<td>21</td>
<td>V</td>
<td>38</td>
<td>m</td>
<td>55</td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td>F</td>
<td>22</td>
<td>W</td>
<td>39</td>
<td>n</td>
<td>56</td>
<td>4</td>
</tr>
<tr>
<td>6</td>
<td>G</td>
<td>23</td>
<td>X</td>
<td>40</td>
<td>o</td>
<td>57</td>
<td>5</td>
</tr>
<tr>
<td>7</td>
<td>H</td>
<td>24</td>
<td>Y</td>
<td>41</td>
<td>p</td>
<td>58</td>
<td>6</td>
</tr>
<tr>
<td>8</td>
<td>I</td>
<td>25</td>
<td>Z</td>
<td>42</td>
<td>q</td>
<td>59</td>
<td>7</td>
</tr>
<tr>
<td>9</td>
<td>J</td>
<td>26</td>
<td>a</td>
<td>43</td>
<td>r</td>
<td>60</td>
<td>8</td>
</tr>
<tr>
<td>10</td>
<td>K</td>
<td>27</td>
<td>b</td>
<td>44</td>
<td>s</td>
<td>61</td>
<td>9</td>
</tr>
<tr>
<td>11</td>
<td>L</td>
<td>28</td>
<td>c</td>
<td>45</td>
<td>t</td>
<td>62</td>
<td>+</td>
</tr>
<tr>
<td>12</td>
<td>M</td>
<td>29</td>
<td>d</td>
<td>46</td>
<td>u</td>
<td>63</td>
<td>/</td>
</tr>
<tr>
<td>13</td>
<td>N</td>
<td>30</td>
<td>e</td>
<td>47</td>
<td>v</td>
<td></td>
<td></td>
</tr>
<tr>
<td>14</td>
<td>O</td>
<td>31</td>
<td>f</td>
<td>48</td>
<td>w</td>
<td>(pad)</td>
<td>=</td>
</tr>
<tr>
<td>15</td>
<td>P</td>
<td>32</td>
<td>g</td>
<td>49</td>
<td>x</td>
<td></td>
<td></td>
</tr>
<tr>
<td>16</td>
<td>Q</td>
<td>33</td>
<td>h</td>
<td>50</td>
<td>y</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>Note:</strong> 第65个字符（=）用于填补空白，比如用1个或2个’=’将字符串填充到适当长度。</p>
<h3 id="Base64实例"><a href="#Base64实例" class="headerlink" title="Base64实例"></a>Base64实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个字符串</span></span><br><span class="line">        String basicStr = <span class="string">"http://localhost:8080/search?id=1"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基本编码</span></span><br><span class="line">        String base64EncodedString = Base64.getEncoder().encodeToString(basicStr.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">"Base64 编码字符串 (基本) :"</span> + base64EncodedString);</span><br><span class="line">        <span class="comment">// 基本解码</span></span><br><span class="line">        <span class="keyword">byte</span>[] base64DecodedBytes = Base64.getDecoder().decode(base64EncodedString);</span><br><span class="line">        System.out.println(<span class="string">"原始字符串: "</span> + <span class="keyword">new</span> String(base64DecodedBytes, StandardCharsets.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------------------------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// URL编码</span></span><br><span class="line">        base64EncodedString = Base64.getUrlEncoder().encodeToString(basicStr.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">"Base64 编码字符串 (URL) :"</span> + base64EncodedString);</span><br><span class="line">        <span class="comment">// URL译码</span></span><br><span class="line">        <span class="keyword">byte</span>[] base64UrlDecodeBytes = Base64.getUrlDecoder().decode(base64EncodedString);</span><br><span class="line">        System.out.println(<span class="string">"原始字符串： "</span> + <span class="keyword">new</span> String(base64UrlDecodeBytes, StandardCharsets.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------------------------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建一个由10个UUID随机组成的字符串</span></span><br><span class="line">        <span class="comment">// UUID(Universally Unique Identifier, 通用唯一识别码)</span></span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            stringBuilder.append(UUID.randomUUID().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] mimeBytes = stringBuilder.toString().getBytes(StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MIME编码</span></span><br><span class="line">        String mimeEncodedString = Base64.getMimeEncoder().encodeToString(mimeBytes);</span><br><span class="line">        System.out.println(<span class="string">"Base64 编码字符串 (MIME) :"</span> + mimeEncodedString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MIME译码</span></span><br><span class="line">        <span class="keyword">byte</span>[] mimeDecodedBytes = Base64.getMimeDecoder().decode(mimeEncodedString);</span><br><span class="line">        System.out.println(<span class="string">"原始字符串： "</span> + <span class="keyword">new</span> String(mimeDecodedBytes, StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Base64 编码字符串 (基本) :aHR0cDovL2xvY2FsaG9zdDo4MDgwL3NlYXJjaD9pZD0x</span><br><span class="line">原始字符串: http://localhost:8080/search?id=1</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Base64 编码字符串 (URL) :aHR0cDovL2xvY2FsaG9zdDo4MDgwL3NlYXJjaD9pZD0x</span><br><span class="line">原始字符串： http://localhost:8080/search?id=1</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Base64 编码字符串 (MIME) :ZDM4MmEwNDgtNzZjMy00OWM4LTlhMzQtYmVlOWU2YTNhMDAyYzQxZTIwMjItMTRhOC00ZTc3LThk</span><br><span class="line">YTYtNzQ5NTJlZmI0ZGRmMDhmODA0NTYtMzRkZC00YzExLWE3YTgtNjg5YTU1NGI2NjVlOGFhYjk2</span><br><span class="line">MzUtZjVkOS00MjAzLWE1NzgtM2I3OWM2ZDFlYmM2MTZjZmQ5MDEtNWQ2ZC00ZjNkLWIzNTYtOWVl</span><br><span class="line">YWY3OTY2ZTU4ZGRiOTFlOGYtZWM4My00NzE4LThlZmMtZGZkZDY2YWE3ZTc1MjYyOWZiYWUtNjU4</span><br><span class="line">Ni00NGRhLTgzNDAtY2VlM2NjOWJjYjk1MjkzNzFmNzMtZGNkOS00NjljLWFlMDItZmQ5YTNjYzM4</span><br><span class="line">MjE5ZmJhM2Q0MzgtYmE1Zi00YzRhLTkxZWMtNTBiYjU3YTg1YzZjYzkyOWQyMTItOWNjOS00MDlh</span><br><span class="line">LTg4N2YtZGY4YjAzMjVlOWI1</span><br><span class="line">原始字符串： d382a048-76c3-49c8-9a34-bee9e6a3a002c41e2022-14a8-4e77-8da6-74952efb4ddf08f80456-34dd-4c11-a7a8-689a554b665e8aab9635-f5d9-4203-a578-3b79c6d1ebc616cfd901-5d6d-4f3d-b356-9eeaf7966e58ddb91e8f-ec83-4718-8efc-dfdd66aa7e752629fbae-6586-44da-8340-cee3cc9bcb9529371f73-dcd9-469c-ae02-fd9a3cc38219fba3d438-ba5f-4c4a-91ec-50bb57a85c6cc929d212-9cc9-409a-887f-df8b0325e9b5</span><br></pre></td></tr></table></figure>

<hr>
<p>更多详细内容参见<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html" target="_blank" rel="noopener"><em>官方文档</em></a></p>
]]></content>
      <categories>
        <category>Java8 新特性</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Base64</tag>
      </tags>
  </entry>
  <entry>
    <title>新特性08| 新日期时间API</title>
    <url>/2019/03/25/Java8%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A708-%E6%96%B0%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4API/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>New date-time API is introduced in Java 8 to overcome the following drawbacks of old date-time API :</p>
<ol>
<li><strong>Not thread safe :</strong> Unlike old java.util.Date which is not thread safe the new date-time API is immutable and doesn’t have setter methods.</li>
<li><strong>Less operations :</strong> In old API there are only few date operations but the new API provides us with many date operations. <br></li>
</ol>
</blockquote>
<blockquote>
<p>（译文）Java8中引入了新的date-time API来解决老版本API中存在的以下缺陷：</p>
<ol>
<li><strong>线程不安全：</strong> 和以往版本中线程不安全的java.util.Date不同，新的date-time API是线程安全的，并且没有setter方法。</li>
<li><strong>可操作性不强：</strong> 老版本API只有几个date操作函数，新版本中提供了大量的date操作函数。</li>
</ol>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Java8在<code>java.time</code>报下引入了新版本的date-time API，最重要的两个类如下：</p>
<ol>
<li><strong>Local：</strong> 简化了的date-time API，没有了复杂的时区处理；</li>
<li><strong>Zoned：</strong> 通过指定的时区处理日期时间。</li>
</ol>
<h3 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h3><ol>
<li><strong>LocalDate/LocatTime and LocalDateTime API :</strong> 当不需要处理时区时。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LocalDateTimeApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印当前日期</span></span><br><span class="line">        LocalDate date = LocalDate.now();</span><br><span class="line">        System.out.println(<span class="string">"当前日期: "</span> + date);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印当前时间</span></span><br><span class="line">        LocalTime time = LocalTime.now();</span><br><span class="line">        System.out.println(<span class="string">"当前时间: "</span> + time);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印当前日期T时间</span></span><br><span class="line">        LocalDateTime current = LocalDateTime.now();</span><br><span class="line">        System.out.println(<span class="string">"当前日期和时间 : "</span> + current);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以指定格式打印当前DateTime</span></span><br><span class="line">        DateTimeFormatter format = DateTimeFormatter.ofPattern(<span class="string">"dd-MM-yyyy HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">        String formatedDateTime = current.format(format);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"指定格式： "</span> + formatedDateTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印当前月、天和秒</span></span><br><span class="line">        Month month = current.getMonth();</span><br><span class="line">        <span class="keyword">int</span> day = current.getDayOfMonth();</span><br><span class="line">        <span class="keyword">int</span> seconds = current.getSecond();</span><br><span class="line">        System.out.println(<span class="string">"月 : "</span> + month + <span class="string">" 天 : "</span> + day + <span class="string">" 秒 : "</span> + seconds);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印指定日期</span></span><br><span class="line">        LocalDate date2 = LocalDate.of(<span class="number">1899</span>, <span class="number">11</span>, <span class="number">29</span>);</span><br><span class="line">        System.out.println(<span class="string">"FCB创立时间 :"</span> + date2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用当前时间补充打印日期</span></span><br><span class="line">        LocalDateTime specificDate = current.withYear(<span class="number">2012</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"以当前时间指定日期 : "</span> + specificDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDateTimeApi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>输出：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前日期: 2019-08-25</span><br><span class="line">当前时间: 08:28:17.584</span><br><span class="line">当前日期和时间 : 2019-08-25T08:28:17.585</span><br><span class="line">指定格式： 25-08-2019 08:28:17</span><br><span class="line">月 : AUGUST 天 : 25 秒 : 17</span><br><span class="line">巴萨创立时间 :1899-11-29</span><br><span class="line">以当前时间指定日期 : 2012-08-25T08:28:17.585</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>Zoned date-time API :</strong> 当需要考虑时区时<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZoneTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取带时区的日期和时间</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ZonedTimeAndDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDateTime date = LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 指定格式</span></span><br><span class="line">        DateTimeFormatter format = DateTimeFormatter.ofPattern(<span class="string">"dd-MM-yyyy HH:mm:ss"</span>);</span><br><span class="line">        String formattedCurrentDate = date.format(format);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"格式化后的日期和时间 : "</span> + formattedCurrentDate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前时区</span></span><br><span class="line">        ZonedDateTime currentZone = ZonedDateTime.now();</span><br><span class="line">        System.out.println(<span class="string">"当前时区： "</span> + currentZone.getZone());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定地方时区的时间</span></span><br><span class="line">        ZoneId tokyo = ZoneId.of(<span class="string">"Asia/Tokyo"</span>);</span><br><span class="line">        ZonedDateTime tokyoZone = currentZone.withZoneSameInstant(tokyo);</span><br><span class="line">        System.out.println(<span class="string">"东京时间： "</span> + tokyoZone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//格式化日期和时间</span></span><br><span class="line">        String formatedDateTime = tokyoZone.format(format);</span><br><span class="line">        System.out.println(<span class="string">"格式化后的东京时间： "</span> + formatedDateTime);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ZonedTimeAndDate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>输出：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式化后的日期和时间 : 25-08-2019 08:43:25</span><br><span class="line">当前时区： Asia/Shanghai</span><br><span class="line">东京时间： 2019-08-25T09:43:25.474+09:00[Asia/Tokyo]</span><br><span class="line">格式化后的东京时间： 25-08-2019 09:43:25</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>Period类和Duration类 :</strong><br>Period : 计算日期差（差了几年几月几日）；<br>Duration : 计算时间差（差了几时几分几秒）；<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeriodAndDurationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkingPeriod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前日期</span></span><br><span class="line">        LocalDate date1 = LocalDate.now();</span><br><span class="line">        <span class="comment">// 指定日期</span></span><br><span class="line">        LocalDate date2 = LocalDate.of(<span class="number">2018</span>, Month.JULY, <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算两个日期之间的差（用第2个参数减第1个参数），结果表示为P(num)Y(num)M(num)D</span></span><br><span class="line">        <span class="comment">// 上面num表示数字，Y表示年，M表示月，D表示天</span></span><br><span class="line">        Period gap = Period.between(date2, date1);</span><br><span class="line">        System.out.println(<span class="string">"date1和date2中间差了： "</span> + gap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkingDuration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        LocalTime time1 = LocalTime.now();</span><br><span class="line">        System.out.println(<span class="string">"当前时间： "</span> + time1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设定5小时间隔</span></span><br><span class="line">        Duration fiveHours = Duration.ofHours(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将5小时加到当前时间</span></span><br><span class="line">        LocalTime time2 = time1.plus(fiveHours);</span><br><span class="line">        System.out.println(<span class="string">"当前时间加上5小时后： "</span> + time2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算两个时间差（用第2个参数减第1个参数），结果表示为PT(num)H(num)M(num)s</span></span><br><span class="line">        <span class="comment">// 上面num表示数字，H表示时，M表示分，S表示秒</span></span><br><span class="line">        Duration gap1 = Duration.between(time1, time2);</span><br><span class="line">        System.out.println(<span class="string">"time1和time2的时间差： "</span> + gap1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更详细的时间差</span></span><br><span class="line">        LocalTime time3 = LocalTime.of(<span class="number">16</span>, <span class="number">20</span>, <span class="number">18</span>);</span><br><span class="line">        Duration gap2 = Duration.between(time1, time3);</span><br><span class="line">        System.out.println(<span class="string">"time1和time3的时间差： "</span> + gap2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        checkingPeriod();</span><br><span class="line">        checkingDuration();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>输出：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date1和date2中间差了： P1Y1M1D</span><br><span class="line">当前时间： 09:51:04.019</span><br><span class="line">当前时间加上5小时后： 14:51:04.019</span><br><span class="line">time1和time2的时间差： PT5H</span><br><span class="line">time1和time3的时间差： PT6H29M13.981S</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>ChronoUnits枚举类 :</strong> Java8使用ChronoUnit枚举类替代旧API中表示天、月等类。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChronoUnitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkingChronoEnum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDate date = LocalDate.now();</span><br><span class="line">        System.out.println(<span class="string">"当前日期是 :"</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在当前日期上加2年</span></span><br><span class="line">        LocalDate year = date.plus(<span class="number">2</span>, ChronoUnit.YEARS);</span><br><span class="line">        System.out.println(<span class="string">"加上2年后： "</span> + year);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在当前日期上加1个月</span></span><br><span class="line">        LocalDate nextMonth = date.plus(<span class="number">1</span>, ChronoUnit.MONTHS);</span><br><span class="line">        System.out.println(<span class="string">"加上1个月后： "</span> + nextMonth);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// adding 1 week to the current date</span></span><br><span class="line">        <span class="comment">// 在当前日期上加1周</span></span><br><span class="line">        LocalDate nextWeek = date.plus(<span class="number">1</span>, ChronoUnit.WEEKS);</span><br><span class="line">        System.out.println(<span class="string">"加上1周后："</span> + nextWeek);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在当前日期上加20年</span></span><br><span class="line">        LocalDate Decade = date.plus(<span class="number">2</span>, ChronoUnit.DECADES);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"加上20年后： "</span> + Decade);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        checkingChronoEnum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>输出：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前日期是 :2019-08-25</span><br><span class="line">加上2年后： 2021-08-25</span><br><span class="line">加上1个月后： 2019-09-25</span><br><span class="line">加上1周后：2019-09-01</span><br><span class="line">加上20年后： 2039-08-25</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>TemporalAdjusters类：</strong> 可以执行多个与日期相关的操作<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.DayOfWeek;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalAdjusters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemporalAdjustersTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkingAdjusters</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LocalDate date = LocalDate.now();</span><br><span class="line">        System.out.println(<span class="string">"当前日期： "</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取下个月的第一天</span></span><br><span class="line">        LocalDate dayOfNextMonth = date.with(TemporalAdjusters.firstDayOfNextMonth());</span><br><span class="line">        System.out.println(<span class="string">"下一个月的第一天： "</span> + dayOfNextMonth);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取下个周六</span></span><br><span class="line">        LocalDate nextSaturday = date.with(TemporalAdjusters.next(DayOfWeek.SATURDAY));</span><br><span class="line">        System.out.println(<span class="string">"下个周六： "</span> + nextSaturday);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前月的第一天</span></span><br><span class="line">        LocalDate firstDay = date.with(TemporalAdjusters.firstDayOfMonth());</span><br><span class="line">        System.out.println(<span class="string">"当前月的第一天： "</span> + firstDay);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前月的最后一天</span></span><br><span class="line">        LocalDate lastDay = date.with(TemporalAdjusters.lastDayOfMonth());</span><br><span class="line">        System.out.println(<span class="string">"当前月的最后一天： "</span> + lastDay);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        checkingAdjusters();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>输出：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前日期： 2019-08-25</span><br><span class="line">下一个月的第一天： 2019-09-01</span><br><span class="line">下个周六： 2019-08-31</span><br><span class="line">当前月的第一天： 2019-08-01</span><br><span class="line">当前月的最后一天： 2019-08-31</span><br></pre></td></tr></table></figure>

<hr>
<p>更多详细内容参见<a href="https://www.oracle.com/technetwork/articles/java/jf14-date-time-2125367.html" target="_blank" rel="noopener"><em>官方文档</em></a></p>
]]></content>
      <categories>
        <category>Java8 新特性</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Date-Time</tag>
      </tags>
  </entry>
  <entry>
    <title>新特性07| Nashorn JavaScript</title>
    <url>/2019/03/24/Java8%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A707-Nashorn-JavaScript/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>With Java 8, Nashorn, a much improved javascript engine is introduced, to replace the existing Rhino. Nashorn provides 2 to 10 times better performance, as it directly compiles the code in memory and passes the bytecode to JVM. Nashorn uses invoke dynamics feature, introduced in Java 7 to improve performance.<br></p>
</blockquote>
<blockquote>
<p>（译文）Java8中引入了一个改进的javascript引擎，Nashorn，它替换掉了之前的Rhino引擎。因为Nashorn引擎直接在内存中编译代码并将字节码传递给JVM，所以其性能比之前的提高了2~10倍。Nashorn使用Java7中引入的<a href="https://www.infoq.cn/article/Invokedynamic-Javas-secret-weapon/?itm_source=infoq_en&itm_medium=link_on_en_item&itm_campaign=item_in_other_langs" target="_blank" rel="noopener">动态调用特性</a>来提高性能。</p>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>Rihino和Nashorn都是在JVM上基于JavaScript语言实现的。</li>
<li>Nashron引擎既可以用在Java代码中，也可以借助位于<code>$JAVA_HOME/bin</code>下的<code>jjs</code>工具在命令行中使用。</li>
</ol>
<h3 id="jjs"><a href="#jjs" class="headerlink" title="jjs"></a>jjs</h3><ol>
<li>jjs简介：基于Nashorn引擎的命令行工具。它接受一些JavaScript源代码为参数，并且执行这些源代码。</li>
<li>使用方法</li>
</ol>
<ul>
<li>jjs demo.js（得保证demo.js里由对象的javascript代码）</li>
<li>交互式编程，直接输入<code>jjs</code>命令即可进入，举例如下<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> jjs</span></span><br><span class="line"><span class="meta">jjs&gt;</span><span class="bash"> <span class="built_in">print</span>(<span class="string">'Hello jjs!'</span>);</span></span><br><span class="line">Hello jjs!</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><p><strong>代码示例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> jjs -- a b c</span></span><br><span class="line"><span class="meta">jjs&gt;</span><span class="bash"> <span class="built_in">print</span>(<span class="string">'letter: '</span> + arguments.join(<span class="string">" + "</span>));</span></span><br><span class="line">letter: a + b + c</span><br><span class="line"><span class="meta">jjs&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Java中调用JavaScript"><a href="#Java中调用JavaScript" class="headerlink" title="Java中调用JavaScript"></a>Java中调用JavaScript</h3><p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptException;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化脚本引擎管理器</span></span><br><span class="line">        ScriptEngineManager scriptEngineManager = <span class="keyword">new</span> ScriptEngineManager();</span><br><span class="line">        <span class="comment">// 获取nashron引擎</span></span><br><span class="line">        ScriptEngine nashorn = scriptEngineManager.getEngineByName(<span class="string">"nashorn"</span>);</span><br><span class="line"></span><br><span class="line">        String name = <span class="string">"Runoob"</span>;</span><br><span class="line">        Integer result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行指定的脚本</span></span><br><span class="line">            nashorn.eval(<span class="string">"print('"</span> + name + <span class="string">"')"</span>);</span><br><span class="line">            result = (Integer) nashorn.eval(<span class="string">"10 + 2"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ScriptException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"执行脚本错误: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Optional&lt;Integer&gt; str = Optional.ofNullable(result);</span><br><span class="line">        str.ifPresent(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Runoob</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<h3 id="JavaScript中调用Java"><a href="#JavaScript中调用Java" class="headerlink" title="JavaScript中调用Java"></a>JavaScript中调用Java</h3><p><strong>代码示例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用Java类型定义大数类型小数</span></span><br><span class="line"><span class="keyword">var</span> BigDecimal = Java.type(<span class="string">'java.math.BigDecimal'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// calculate方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">amount, percentage</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 先将大数型整数转为大数型小数，乘以percentage，再除以100</span></span><br><span class="line">    <span class="comment">// 结果取两位小数，并且按照银行家取舍法进行取舍</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> BigDecimal(amount).multiply(</span><br><span class="line">        <span class="keyword">new</span> BigDecimal(percentage)).divide(<span class="keyword">new</span> BigDecimal(<span class="string">"100"</span>), <span class="number">2</span>, BigDecimal.ROUND_HALF_EVEN);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.toPlainString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = calculate(<span class="number">568000000000000000023</span>, <span class="number">13.9</span>);</span><br><span class="line">print(result);</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">78952000000000002017.94</span><br></pre></td></tr></table></figure>

<hr>
<p>更多详细内容参见<a href="https://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html" target="_blank" rel="noopener"><em>官方文档</em></a></p>
]]></content>
      <categories>
        <category>Java8 新特性</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Nashorn</tag>
      </tags>
  </entry>
  <entry>
    <title>新特性06| Optional类</title>
    <url>/2019/03/24/Java8%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A706-Optional%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Java Optional Class : Every Java Programmer is familiar with NullPointerException. It can crash your code. And it is very hard to avoid it without using too many null checks.<br>Java 8 has introduced a new class Optional in java.util package. It can help in writing a neat code without using too many null checks. By using Optional, we can specify alternate values to return or alternate code to run. This makes the code more readable because the facts which were hidden are now visible to the developer. <br></p>
</blockquote>
<blockquote>
<p>（译文）Java Optional类：Java程序员对空指针异常都再熟悉不过了，该异常会导致代码崩溃。在不进行大量的空指针检查下，要避免空指针异常是相当难的。<br>Java8在java.util.package包下引入了一个新类Optional，该类有助于撰写没有太多空指针检查的整洁代码。使用Optional类可以指定备用值来返回或替代要运行的代码。这样使得代码的可读性更强，因为过去隐藏的东西现在对开发人员可见了。</p>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>Optional类是一个可以为null的容器对象，如果值存在isPresent()返回true，get()方法返回该对象；</li>
<li>Optional类是个保存T类型的容器，也可以保存null；</li>
<li>Optional提供了很多方法进行空值检测，这样省去了人为空值检测过程，能很好地解决空指针异常问题。</li>
</ol>
<h3 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h3><p><code>public final class Optional&lt;T&gt; extends Object</code></p>
<h4 id="Optional实例"><a href="#Optional实例" class="headerlink" title="Optional实例"></a>Optional实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Integer <span class="title">sum</span><span class="params">(Optional&lt;Integer&gt; a, Optional&lt;Integer&gt; b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Optional.orElse - 如果值存在，返回它，否则返回设定值</span></span><br><span class="line">        Integer value1 = a.orElse(-<span class="number">6</span>);</span><br><span class="line">        Integer value2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (b.isPresent()) &#123;</span><br><span class="line">            <span class="comment">//Optional.get - 获取值，值需要存；值不存在返回NoSuchElementException异常</span></span><br><span class="line">            value2 = b.get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Optional.isPresent - 判断值是否存在</span></span><br><span class="line">        System.out.println(<span class="string">"第一个参数值存在: "</span> + a.isPresent() + <span class="string">"此时值为： "</span> + value1);</span><br><span class="line">        System.out.println(<span class="string">"第二个参数值存在: "</span> + b.isPresent() + <span class="string">"此时值为： "</span> + value2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value1 + value2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Java8Tester java8Tester = <span class="keyword">new</span> Java8Tester();</span><br><span class="line">        Integer value1 = <span class="keyword">null</span>;</span><br><span class="line">        Integer value2 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Optional.ofNullable - 允许传递为 null 参数</span></span><br><span class="line">        Optional&lt;Integer&gt; a = Optional.ofNullable(value1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Optional.of - 如果传递的参数是 null，抛出异常 NullPointerException，否则返回传入值</span></span><br><span class="line">        Optional&lt;Integer&gt; b = Optional.of(value2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"二值相加等于： "</span> + java8Tester.sum(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一个参数值存在: false此时值为： -6</span><br><span class="line">第二个参数值存在: true此时值为： 10</span><br><span class="line">二值相加等于： 4</span><br></pre></td></tr></table></figure>

<hr>
<p>更多详细内容参见<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html" target="_blank" rel="noopener"><em>官方文档</em></a></p>
]]></content>
      <categories>
        <category>Java8 新特性</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Optional</tag>
      </tags>
  </entry>
  <entry>
    <title>新特性05| Stream</title>
    <url>/2019/03/24/Java8%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A705-Stream/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Stream represents a sequence of objects from a source, which supports aggregate operations. Following are the characteristics of a Stream −</p>
<ul>
<li><strong>Sequence of elements</strong> − A stream provides a set of elements of specific type in a sequential manner. A stream gets/computes elements on demand. It never stores the elements.</li>
<li><strong>Source</strong> − Stream takes Collections, Arrays, or I/O resources as input source.</li>
<li><strong>Aggregate operations</strong> − Stream supports aggregate operations like filter, map, limit, reduce, find, match, and so on.</li>
<li><strong>Pipelining</strong> − Most of the stream operations return stream itself so that their result can be pipelined. These operations are called intermediate operations and their function is to take input, process them, and return output to the target. collect() method is a terminal operation which is normally present at the end of the pipelining operation to mark the end of the stream.</li>
<li><strong>Automatic iterations</strong> − Stream operations do the iterations internally over the source elements provided, in contrast to Collections where explicit iteration is required. <br></li>
</ul>
</blockquote>
<blockquote>
<p>(译文)Stream为输入源提供了对象序列，它支持聚合操作。以下是Stream的特性：</p>
<ul>
<li><strong>元素序列</strong>——元素是特定类型的对象，Stream按需获取/计算元素，它不存储元素；</li>
<li><strong>数据源</strong>——Stream将集合、数组或输入输出资源作为输入源；</li>
<li><strong>聚合操作</strong>——Stream支持filter、map、limit、reduce、find、match等聚合操作；</li>
<li><strong>Pipelining</strong>——大多Stream操作返回Stream本身，这样多个操作可以串联成一个管道，如同流式风格。这些操作被称为中间操作，这些方法获取输入、进行处理、然后将输出返回给目标。collect()方法是最终操作，一般在流水线的末尾出现标志着Stream的结束；(类似的最终操作还有：forEach、reduce)</li>
<li><strong>内部迭代</strong>——与需要显式迭代的集合相比，流操作在内部对提供的源元素执行迭代（通过访问者模式完成）。</li>
</ul>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Stream是Java8引入的一个抽象层，使用它可以用类似于SQL语句声明式地处理数据。比如可以看下方sql语句。</p>
<p><code>SELECT max(salary), employee_id, employee_name FROM Employee</code></p>
<p>上面的sql语句在用户端并没有执行任何计算操作的情况下，自动返回了Employee表中salary的最大值max(salay)。但如果使用Java的集合类，开发者须使用循环并且要多次比对才能给出最大值。另一个需要考虑的就是效率问题，由于现在大多都是多核处理器，Java开发人员用并行代码来处理时容易出错。</p>
<p>为了解决上述问题，Java8引入了Stream概念，它让开发人员可以声明式地处理数据并且可以在不写任何特定代码的情况下利用多核处理器。</p>
<h3 id="形象化展示"><a href="#形象化展示" class="headerlink" title="形象化展示"></a>形象化展示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">+--------------------+       +------+   +------+   +---+   +-------+</span><br><span class="line">| stream of elements +-----&gt; |filter+-&gt; |sorted+-&gt; |map+-&gt; |collect|</span><br><span class="line">+--------------------+       +------+   +------+   +---+   +-------+</span><br></pre></td></tr></table></figure>

<p>用Java表示上述流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里widgets为输入源</span></span><br><span class="line">List&lt;Integer&gt; transactionsIds =</span><br><span class="line">widgets.stream()</span><br><span class="line">             .filter(b -&gt; b.getColor() == RED)</span><br><span class="line">             .sorted((x,y) -&gt; x.getWeight() - y.getWeight())</span><br><span class="line">             .mapToInt(Widget::getWeight)</span><br><span class="line">             .sum();</span><br></pre></td></tr></table></figure>

<h3 id="生成流"><a href="#生成流" class="headerlink" title="生成流"></a>生成流</h3><p>在Java8中, 集合接口有两个方法来生成流：</p>
<ol>
<li>stream() − 为集合创建串行流。</li>
<li>parallelStream() − 为集合创建并行流。</li>
</ol>
<p>举例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(<span class="string">"abc"</span>, <span class="string">""</span>, <span class="string">"bc"</span>, <span class="string">"efg"</span>, <span class="string">"abcd"</span>, <span class="string">""</span>, <span class="string">"jkl"</span>);</span><br><span class="line">        List&lt;String&gt; filtered1 = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br><span class="line">        filtered1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"________________\n"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; filtered2 = strings.parallelStream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br><span class="line">        filtered2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc</span><br><span class="line">bc</span><br><span class="line">efg</span><br><span class="line">abcd</span><br><span class="line">jkl</span><br><span class="line">________________</span><br><span class="line"></span><br><span class="line">abc</span><br><span class="line">bc</span><br><span class="line">efg</span><br><span class="line">abcd</span><br><span class="line">jkl</span><br></pre></td></tr></table></figure>

<h3 id="Steam常用方法"><a href="#Steam常用方法" class="headerlink" title="Steam常用方法"></a>Steam常用方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>collect</td>
<td>利用Collectors接口实现归约操作</td>
</tr>
<tr>
<td>filter</td>
<td>通过设置条件过滤出元素</td>
</tr>
<tr>
<td>forEach</td>
<td>迭代流中的每个数据</td>
</tr>
<tr>
<td>limit</td>
<td>获取指定数量的流</td>
</tr>
<tr>
<td>map</td>
<td>映射每个元素到对应的结果</td>
</tr>
<tr>
<td>sorted</td>
<td>对流进行排序</td>
</tr>
</tbody></table>
<h3 id="Stream完整示例"><a href="#Stream完整示例" class="headerlink" title="Stream完整示例"></a>Stream完整示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用 Java 7: "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算空字符串</span></span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(<span class="string">"abc"</span>, <span class="string">""</span>, <span class="string">"bc"</span>, <span class="string">"efg"</span>, <span class="string">"abcd"</span>, <span class="string">""</span>, <span class="string">"jkl"</span>);</span><br><span class="line">        System.out.println(<span class="string">"列表: "</span> + strings);</span><br><span class="line">        <span class="keyword">long</span> count = getCountEmptyStringUsingJava7(strings);</span><br><span class="line">        System.out.println(<span class="string">"空字符数量为: "</span> + count);</span><br><span class="line"></span><br><span class="line">        count = getCountLength3UsingJava7(strings);</span><br><span class="line">        System.out.println(<span class="string">"字符串长度为 3 的数量为: "</span> + count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除空字符串</span></span><br><span class="line">        List&lt;String&gt; filtered = deleteEmptyStringsUsingJava7(strings);</span><br><span class="line">        System.out.println(<span class="string">"筛选后的列表: "</span> + filtered);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除空字符串，并使用逗号把它们合并起来</span></span><br><span class="line">        String mergedString = getMergedStringUsingJava7(strings);</span><br><span class="line">        System.out.println(<span class="string">"合并字符串: "</span> + mergedString);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 获取列表元素平方数</span></span><br><span class="line">        List&lt;Integer&gt; squaresList = getSquares(numbers);</span><br><span class="line">        System.out.println(<span class="string">"平方数列表: "</span> + squaresList);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">17</span>, <span class="number">8</span>, <span class="number">19</span>);</span><br><span class="line">        System.out.println(<span class="string">"列表: "</span> + integers);</span><br><span class="line">        System.out.println(<span class="string">"列表中最大的数 : "</span> + getMax(integers));</span><br><span class="line">        System.out.println(<span class="string">"列表中最小的数 : "</span> + getMin(integers));</span><br><span class="line">        System.out.println(<span class="string">"所有数之和 : "</span> + getSum(integers));</span><br><span class="line">        System.out.println(<span class="string">"平均数 : "</span> + getAverage(integers));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"随机数: "</span>);</span><br><span class="line">        <span class="comment">// 输出10个随机数</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(random.nextInt());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"使用 Java 8: "</span>);</span><br><span class="line">        System.out.println(<span class="string">"列表: "</span> + strings);</span><br><span class="line"></span><br><span class="line">        count = strings.stream().filter(String::isEmpty).count();</span><br><span class="line">        System.out.println(<span class="string">"空字符串数量为: "</span> + count);</span><br><span class="line"></span><br><span class="line">        count = strings.stream().filter(string -&gt; string.length() == <span class="number">3</span>).count();</span><br><span class="line">        System.out.println(<span class="string">"字符串长度为 3 的数量为: "</span> + count);</span><br><span class="line"></span><br><span class="line">        filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">"筛选后的列表: "</span> + filtered);</span><br><span class="line"></span><br><span class="line">        mergedString = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.joining(<span class="string">", "</span>));</span><br><span class="line">        System.out.println(<span class="string">"合并字符串: "</span> + mergedString);</span><br><span class="line"></span><br><span class="line">        squaresList = numbers.stream().map(i -&gt; i * i).distinct().collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">"平方数列表: "</span> + squaresList);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"列表: "</span> + integers);</span><br><span class="line">        IntSummaryStatistics stats = integers.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line">        System.out.println(<span class="string">"列表中最大的数 : "</span> + stats.getMax());</span><br><span class="line">        System.out.println(<span class="string">"列表中最小的数 : "</span> + stats.getMin());</span><br><span class="line">        System.out.println(<span class="string">"所有数之和 : "</span> + stats.getSum());</span><br><span class="line">        System.out.println(<span class="string">"平均数 : "</span> + stats.getAverage());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"随机数: "</span>);</span><br><span class="line">        random.ints().limit(<span class="number">10</span>).sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 并行处理</span></span><br><span class="line">        count = strings.parallelStream().filter(String::isEmpty).count();</span><br><span class="line">        <span class="comment">// 输出结果：空字符串的数量为: 2</span></span><br><span class="line">        System.out.println(<span class="string">"\n空字符串的数量为: "</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCountEmptyStringUsingJava7</span><span class="params">(List&lt;String&gt; strings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (string.isEmpty()) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCountLength3UsingJava7</span><span class="params">(List&lt;String&gt; strings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (string.length() == <span class="number">3</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">deleteEmptyStringsUsingJava7</span><span class="params">(List&lt;String&gt; strings)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; filteredList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!string.isEmpty()) &#123;</span><br><span class="line">                filteredList.add(string);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filteredList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getMergedStringUsingJava7</span><span class="params">(List&lt;String&gt; strings)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!string.isEmpty()) &#123;</span><br><span class="line">                stringBuilder.append(string);</span><br><span class="line">                stringBuilder.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String mergedString = stringBuilder.toString();</span><br><span class="line">        <span class="keyword">return</span> mergedString.substring(<span class="number">0</span>, mergedString.length() - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">getSquares</span><span class="params">(List&lt;Integer&gt; numbers)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; squaresList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer number : numbers) &#123;</span><br><span class="line">            Integer square = number * number;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 去重</span></span><br><span class="line">            <span class="keyword">if</span> (!squaresList.contains(square)) &#123;</span><br><span class="line">                squaresList.add(square);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> squaresList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(List&lt;Integer&gt; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = numbers.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numbers.size(); i++) &#123;</span><br><span class="line"></span><br><span class="line">            Integer number = numbers.get(i);</span><br><span class="line"></span><br><span class="line">            max = number &gt; max ? number : max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">(List&lt;Integer&gt; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = numbers.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numbers.size(); i++) &#123;</span><br><span class="line">            Integer number = numbers.get(i);</span><br><span class="line"></span><br><span class="line">            min = number &lt; min ? number : min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(List numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = (<span class="keyword">int</span>) (numbers.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numbers.size(); i++) &#123;</span><br><span class="line">            sum += (<span class="keyword">int</span>) numbers.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getAverage</span><span class="params">(List&lt;Integer&gt; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span>*getSum(numbers) / numbers.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Java7和Java8输出对比</strong></p>
<table>
<thead>
<tr>
<th>Java7</th>
<th>Java8</th>
</tr>
</thead>
<tbody><tr>
<td>列表: [abc, , bc, efg, abcd, , jkl]</td>
<td>列表: [abc, , bc, efg, abcd, , jkl]</td>
</tr>
<tr>
<td>空字符数量为: 2</td>
<td>空字符串数量为: 2</td>
</tr>
<tr>
<td>字符串长度为 3 的数量为: 3</td>
<td>字符串长度为 3 的数量为: 3</td>
</tr>
<tr>
<td>筛选后的列表: [abc, bc, efg, abcd, jkl]</td>
<td>筛选后的列表: [abc, bc, efg, abcd, jkl]</td>
</tr>
<tr>
<td>合并字符串: abc, bc, efg, abcd, jkl</td>
<td>合并字符串: abc, bc, efg, abcd, jkl</td>
</tr>
<tr>
<td>平方数列表: [9, 4, 49, 25]</td>
<td>平方数列表: [9, 4, 49, 25]</td>
</tr>
<tr>
<td>列表: [1, 2, 13, 4, 15, 6, 17, 8, 19]</td>
<td>列表: [1, 2, 13, 4, 15, 6, 17, 8, 19]</td>
</tr>
<tr>
<td>列表中最大的数 : 19</td>
<td>列表中最大的数 : 19</td>
</tr>
<tr>
<td>列表中最小的数 : 1</td>
<td>列表中最小的数 : 1</td>
</tr>
<tr>
<td>所有数之和 : 85</td>
<td>所有数之和 : 85</td>
</tr>
<tr>
<td>平均数 : 9.444444444444445</td>
<td>平均数 : 9.444444444444445</td>
</tr>
<tr>
<td>随机数:</td>
<td>随机数：</td>
</tr>
<tr>
<td>1284026997</td>
<td>-1374685114</td>
</tr>
<tr>
<td>-1178762425</td>
<td>-1033099952</td>
</tr>
<tr>
<td>-1879259729</td>
<td>-885959722</td>
</tr>
<tr>
<td>-29731464</td>
<td>-401309484</td>
</tr>
<tr>
<td>1555365798</td>
<td>111924303</td>
</tr>
<tr>
<td>-1011945483</td>
<td>124136966</td>
</tr>
<tr>
<td>235379193</td>
<td>1033295745</td>
</tr>
<tr>
<td>-1233162879</td>
<td>1297745871</td>
</tr>
<tr>
<td>-704470337</td>
<td>1322164906</td>
</tr>
<tr>
<td>1219156879</td>
<td>2111470129</td>
</tr>
</tbody></table>
<p><em>从上表可以看出Java8输出结果与Java7结果相同，但使用新特性的Java8的代码更加简洁明了！</em></p>
<hr>
<p>更多详细内容参见<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html" target="_blank" rel="noopener"><em>官方文档</em></a></p>
]]></content>
      <categories>
        <category>Java8 新特性</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>新特性04| 默认方法</title>
    <url>/2019/03/24/Java8%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A704-%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Before Java 8, interfaces could have only abstract methods. The implementation of these methods has to be provided in a separate class. So, if a new method is to be added in an interface, then its implementation code has to be provided in the class implementing the same interface. To overcome this issue, Java 8 has introduced the concept of default methods which allow the interfaces to have methods with implementation without affecting the classes that implement the interface.<br></p>
</blockquote>
<blockquote>
<p>（译文）Java8之前接口里的方法只能是抽象的，必须要在另一个类中实现这些方法。所以如果接口中添加了一个方法，那么在实现了该接口的类中也必须实现新添加的方法。为了克服这一问题，Java8引入了默认方法的概念，其允许接口中可以存在由方法体的方法，这样就不会影响到之前已实现该接口的类。</p>
</blockquote>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterfaceName</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> return_type <span class="title">method_name</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// default method body;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>Java8的另一个特性是接口可以声明（并且可以提供实现）静态方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterfaceName</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> return_type <span class="title">method_name</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// static method body;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="默认方法和静态方法示例"><a href="#默认方法和静态方法示例" class="headerlink" title="默认方法和静态方法示例"></a>默认方法和静态方法示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestInterface1</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">printDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Default TestInterface1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Static TestInterface1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestInterface2</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">printDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Default TestInterface2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Static TestInterface2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printAbstract</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Test</span> <span class="keyword">implements</span> <span class="title">TestInterface1</span>, <span class="title">TestInterface2</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 复写默认方法 printDefault()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用关键字super调用指定接口的默认方法</span></span><br><span class="line">        TestInterface1.<span class="keyword">super</span>.printDefault();</span><br><span class="line">        TestInterface2.<span class="keyword">super</span>.printDefault();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAbstract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Abstract Java8Test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Java8Test java8 = <span class="keyword">new</span> Java8Test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印默认方法</span></span><br><span class="line">        java8.printDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印静态方法</span></span><br><span class="line">        TestInterface1.printStatic();</span><br><span class="line">        TestInterface2.printStatic();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 打印已实现的抽象方法</span></span><br><span class="line">        java8.printAbstract();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Default TestInterface1</span><br><span class="line">Default TestInterface2</span><br><span class="line">Static TestInterface1</span><br><span class="line">Static TestInterface2</span><br><span class="line">Abstract Java8Test</span><br></pre></td></tr></table></figure>

<p><strong>tips：</strong><br>Q: 如何在静态方法中调用非静态方法？<br>A: 在静态方法中调用非静态方法的唯一解决办法为<strong>实例化含有非静态方法的类，然后用该类的实例化对象去调用非静态方法</strong>。<font color="red">因为根据定义可知，非静态方法由类的实例化对象调用，而静态方法本身就属于类！</font></p>
<hr>
<p>更多详细内容参见<a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html" target="_blank" rel="noopener"><em>官方文档</em></a></p>
]]></content>
      <categories>
        <category>Java8 新特性</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>DefaultMethods</tag>
      </tags>
  </entry>
  <entry>
    <title>新特性03| 函数式接口</title>
    <url>/2019/03/23/Java8%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A703-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>A functional interface is an interface that contains only one abstract method. They can have only one functionality to exhibit. From Java 8 onwards, lambda expressions can be used to represent the instance of a functional interface. A functional interface can have any number of default methods. Runnable, ActionListener, Comparable are some of the examples of functional interfaces.<br>Before Java 8, we had to create anonymous inner class objects or implement these interfaces.<br></p>
</blockquote>
<blockquote>
<p>（译文）函数式接口是一种<font color="red">仅包含一个抽象方法</font>的接口。从Java8起，lambda表达式可以被用来实现函数式接口。一个函数式接口可以有多个default类型方法。函数式接口的例子有Runnable、ActionListener、Comparable等。</p>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>函数式接口也被称为<strong>单抽象方法接口</strong>（SAM Interface），Java8之前通常以匿名内部类方式执行，现可以被隐式地转换为lambda表达式，即可用lambda表达式实行函数式接口，详情见下方用法举例。</p>
<p><strong>Java8之前已有的函数式接口:</strong></p>
<ul>
<li>java.lang.Runnable</li>
<li>java.util.concurrent.Callable</li>
<li>java.security.PrivilegedAction</li>
<li>java.util.Comparator</li>
<li>java.io.FileFilter</li>
<li>java.nio.file.PathMatcher</li>
<li>java.lang.reflect.InvocationHandler</li>
<li>java.beans.PropertyChangeListener</li>
<li>java.awt.event.ActionListener</li>
<li>javax.swing.event.ChangeListener</li>
</ul>
<p><strong>Java8之前新增的函数式接口:</strong></p>
<ul>
<li>java.util.function包下所有类都是Java8新增的<ul>
<li>java.util.function.Predicate举例<ul>
<li>简介<ol>
<li>Predicate <t> 接口是一个函数式接口，它接受一个输入参数 T，返回一个布尔值结果；</t></li>
<li>该接口包含多种default方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）；</li>
<li>该接口用于测试对象是 true 或 false。</li>
</ol>
</li>
<li>代码示例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterfaceName</span></span>&#123;</span><br><span class="line">    [<span class="keyword">abstract</span>] <span class="function">return_type <span class="title">method_name</span><span class="params">(...)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="简单用法举例"><a href="#简单用法举例" class="headerlink" title="简单用法举例"></a>简单用法举例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">GreetingService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a default method!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GreetingService greetingService1 = <span class="keyword">new</span> GreetingService() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"Hi "</span> + message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        greetingService1.sayMessage(<span class="string">"Test!"</span>);</span><br><span class="line">        greetingService1.defaultMethod();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        GreetingService greetingService2 = message -&gt; System.out.println(<span class="string">"Hello "</span> + message);</span><br><span class="line">        greetingService2.sayMessage(<span class="string">"World!"</span>);</span><br><span class="line">        greetingService2.defaultMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi Test!</span><br><span class="line">This is a default method!</span><br><span class="line"></span><br><span class="line">Hello World!</span><br><span class="line">This is a default method!</span><br></pre></td></tr></table></figure>

<h3 id="函数接口示例"><a href="#函数接口示例" class="headerlink" title="函数接口示例"></a>函数接口示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eval</span><span class="params">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 同下方lambda表达式写法</span></span><br><span class="line">        <span class="comment">/*for (Integer n : list) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            if (predicate.test(n)) &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(n);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        list.forEach(n -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (predicate.test(n))</span><br><span class="line">                System.out.println(n);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        <span class="comment">// 同下方lambda表达式写法</span></span><br><span class="line">        <span class="comment">/*Predicate&lt;Integer&gt; predicate = new Predicate&lt;Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean test(Integer n) &#123;</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// lambda表达式写法</span></span><br><span class="line">        <span class="comment">// Predicate&lt;Integer&gt; predicate = n -&gt; true;</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"输出所有数据:"</span>);</span><br><span class="line">        eval(list, n -&gt; <span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="string">"________________________________________"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 同下方lambda表达式写法</span></span><br><span class="line">        <span class="comment">/*Predicate&lt;Integer&gt; predicate1 = new Predicate&lt;Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean test(Integer n) &#123;</span></span><br><span class="line"><span class="comment">                return n % 2 == 0;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// lambda表达式写法</span></span><br><span class="line">        <span class="comment">// Predicate&lt;Integer&gt; predicate1 = n -&gt; n%2 == 0;</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"输出所有偶数:"</span>);</span><br><span class="line">        eval(list, n -&gt; n % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"________________________________________"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 同下方lambda表达式写法</span></span><br><span class="line">        <span class="comment">/*Predicate&lt;Integer&gt; predicate2 = new Predicate&lt;Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean test(Integer n) &#123;</span></span><br><span class="line"><span class="comment">                return n &gt; 3;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// lambda表达式写法</span></span><br><span class="line">        <span class="comment">// Predicate&lt;Integer&gt; predicate2 = n -&gt; n &gt; 3;</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"输出大于 3 的所有数字:"</span>);</span><br><span class="line">        eval(list, n -&gt; n &gt; <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出所有数据:</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">________________________________________</span><br><span class="line">输出所有偶数:</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">________________________________________</span><br><span class="line">输出大于 3 的所有数字:</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<hr>
<p>更多详细内容参见<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html" target="_blank" rel="noopener"><em>官方文档</em></a></p>
]]></content>
      <categories>
        <category>Java8 新特性</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>FunctionalInterfaces</tag>
      </tags>
  </entry>
  <entry>
    <title>新特性02| 方法引用</title>
    <url>/2019/03/23/Java8%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A702-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Method references provide easy-to-read lambda expressions for methods that already have a name.<br></p>
</blockquote>
<blockquote>
<p>（译文）方法引用为已有名字的方法提供了简单易读的lambda表达式写法。</p>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>方法引用通过方法的名字指向一个方法，可使得减少冗余代码，使其更加紧凑简洁。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>使用一对冒号<code>::</code></p>
<h4 id="简单用法举例"><a href="#简单用法举例" class="headerlink" title="简单用法举例"></a>简单用法举例</h4><p>利用下方代码解释Java8支持的4中方法引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java8中已包含</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Supplier是jdk1.8的接口，这里和lamda一起使用了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">create</span><span class="params">(<span class="keyword">final</span> Supplier&lt;Car&gt; supplier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> supplier.get();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">collide</span><span class="params">(<span class="keyword">final</span> Car car)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Collided "</span> + car.toString());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Repaired "</span> + <span class="keyword">this</span>.toString());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">follow</span><span class="params">(<span class="keyword">final</span> Car another)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Following the "</span> + another.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>构造器引用</strong>，语法：<code>Class::new</code>，或<code>Class&lt;T&gt;::new</code></p>
<ul>
<li>举例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Car car = Car.create(Car::<span class="keyword">new</span>); <span class="comment">//构造出一个car对象</span></span><br><span class="line"><span class="keyword">final</span> List&lt;Car&gt; cars = Arrays.asList(car); <span class="comment">//利用car构建了一个List</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>静态方法引用</strong>，语法：<code>Class::static_method</code></p>
<ul>
<li>举例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cars.forEach(Car::collide); <span class="comment">//打印出了Collided package.Car@HexStringofHashcode</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>特定类的任意对象方法引用</strong>，语法：<code>Class::method</code></p>
<ul>
<li>举例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cars.forEach(Car::repair); <span class="comment">//打印出了Repaired package.Car@HexStringofHashcode</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>特定对象方法引用</strong>，语法：<code>instance::method</code></p>
<ul>
<li>举例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Car police = Car.create(Car::<span class="keyword">new</span>); <span class="comment">//同1的构造器引用</span></span><br><span class="line">cars.forEach(police::follow); <span class="comment">//打印出了Following the package.Car@HexStringofHashcode</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="方法引用实例"><a href="#方法引用实例" class="headerlink" title="方法引用实例"></a>方法引用实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List names = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        names.add(<span class="string">"Google"</span>);</span><br><span class="line">        names.add(<span class="string">"Runoob"</span>);</span><br><span class="line">        names.add(<span class="string">"Taobao"</span>);</span><br><span class="line">        names.add(<span class="string">"Baidu"</span>);</span><br><span class="line">        names.add(<span class="string">"Sina"</span>);</span><br><span class="line"></span><br><span class="line">        names.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```    </span><br><span class="line">**输出：**</span><br><span class="line">```Text</span><br><span class="line">Google</span><br><span class="line">Runoob</span><br><span class="line">Taobao</span><br><span class="line">Baidu</span><br><span class="line">Sina</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><br>由于<code>System.out</code>的定义为<code>public final static PrintStream out = null;</code>，而<code>println</code>的源码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        String s = String.valueOf(x);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            print(s);</span><br><span class="line">            newLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以可确定上面代码中使用的是<em>特定类的任意对象方法引用</em>。</p>
<hr>
<p>更多详细内容参见<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html" target="_blank" rel="noopener"><em>官方文档</em></a></p>
]]></content>
      <categories>
        <category>Java8 新特性</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MethodReferences</tag>
      </tags>
  </entry>
  <entry>
    <title>新特性01| Lambda 表达式</title>
    <url>/2019/03/23/Java8%E6%96%B0%E7%89%B9%E6%80%A7/%E6%96%B0%E7%89%B9%E6%80%A701-Lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Lambda expressions basically express instances of functional interfaces (An interface with single abstract method is called functional interface. An example is java.lang.Runnable). lambda expressions implement the only abstract function and therefore implement functional interfaces.<br>lambda expressions are added in Java 8 and provide below functionalities.</p>
<ul>
<li>Enable to treat functionality as a method argument, or code as data.</li>
<li>A function that can be created without belonging to any class.</li>
<li>A lambda expression can be passed around as if it was an object and executed on demand. <br></li>
</ul>
</blockquote>
<blockquote>
<p>（译文）Lambda表达式一般用来表示<strong>函数式接口</strong>（有且仅有一个抽象方法的接口被称为函数式接口，比如java.lang.Runnable）。lambda表达式实现了唯一的抽象方法，即实现了函数式接口。<br>Java8中添加的lambda表达式提供了以下功能：</p>
<ul>
<li>将方法看作是传入方法的参数，或是将代码看作数据；</li>
<li>可以创建一个不属于任何类的方法；</li>
<li>lambda表达式可以像传递对象一样传递，并按需执行。</li>
</ul>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>基于JVM的很多语言一开始就支持<code>Lambda</code>表达式，而在Java8之前Java采用的是匿名内部类。使用时需要明白以下2点：</p>
<ol>
<li><p>Lambda表达式主要用来定义行内执行的方法类型接口，比如下面<strong>简单用法举例</strong>中<code>addition</code>、<code>subtraction</code>、<code>multiplication</code>、<code>division</code>、<code>greetService1</code>和<code>greetService2</code>的使用。</p>
</li>
<li><p>Lamdba表达式省略了匿名内部类的麻烦，提供给Java一种函数式编程方法。</p>
</li>
</ol>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(parameters) -&gt; expression <span class="comment">//expression只有一行</span></span><br><span class="line">or </span><br><span class="line">(parameters) -&gt;&#123;expression; ...; expression;&#125; <span class="comment">//expression有多行</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>可不指定参数类型</strong>：编译器可自动识别；</li>
<li><strong>传入的参数可不用( )包围</strong>：如果只有一个参数不需( )，多个需要( )；</li>
<li><strong>表达式部分可不用{ }包围</strong>：一行可不写{}，多行需要{ }；</li>
<li><strong>可不写<code>return</code>关键词</strong>：没写{ }的表达式会自动返回值，有{ }的表达式需要明确用<code>return</code>表明要返回的值；</li>
</ul>
<h4 id="简单用法举例"><a href="#简单用法举例" class="headerlink" title="简单用法举例"></a>简单用法举例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Java8Tester tester = <span class="keyword">new</span> Java8Tester();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明参数类型</span></span><br><span class="line">        MathOperation addition = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不声明参数</span></span><br><span class="line">        MathOperation subtraction = (a, b) -&gt; a - b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用大括号包裹返回语句</span></span><br><span class="line">        MathOperation multiplication = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> a * b;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不用大括号包裹返回语句</span></span><br><span class="line">        MathOperation division = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; a / b;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"10 + 5 = "</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, addition));</span><br><span class="line">        System.out.println(<span class="string">"10 - 5 = "</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, subtraction));</span><br><span class="line">        System.out.println(<span class="string">"10 x 5 = "</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, multiplication));</span><br><span class="line">        System.out.println(<span class="string">"10 / 5 = "</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, division));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不用括号</span></span><br><span class="line">        GreetingService greetService1 = message -&gt;</span><br><span class="line">                System.out.println(<span class="string">"Hello "</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用括号</span></span><br><span class="line">        GreetingService greetService2 = (message) -&gt;</span><br><span class="line">                System.out.println(<span class="string">"Hello "</span> + message);</span><br><span class="line"></span><br><span class="line">        greetService1.sayMessage(<span class="string">"Runoob"</span>);</span><br><span class="line">        greetService2.sayMessage(<span class="string">"Google"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">MathOperation</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">GreetingService</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">sayMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">operate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, MathOperation mathOperation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mathOperation.operation(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 + 5 = 15</span><br><span class="line">10 - 5 = 5</span><br><span class="line">10 x 5 = 50</span><br><span class="line">10 / 5 = 2</span><br><span class="line">Hello Runoob</span><br><span class="line">Hello Google</span><br></pre></td></tr></table></figure>

<h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><ol>
<li>需要注意的是Lambda表达式只能引用外部final类型的变量，即<strong>不能在lambda内部修改定义在外部的final变量，否则导致编译错误</strong>；</li>
<li>另一方面也说明在lambda表达式中使用的变量即使未显示声明为<code>final</code>，也是默认<code>final</code>的，否则是用不了的；</li>
<li>在Lambda表达式当中不允许声明一个与局部变量同名的参数或者局部变量，重复定义会导致编译错误。比如：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String first = <span class="string">""</span>;</span><br><span class="line">Comparator&lt;String&gt; comparator = (first, second) -&gt; Integer.compare(first.length(), second.length());  <span class="comment">//编译会出错</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>代码验证</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String salutation = <span class="string">"Hello! "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GreetingService greetService = message -&gt; &#123;</span><br><span class="line"><span class="comment">//            salutation = "Hi!";</span></span><br><span class="line">            System.out.println(salutation + message);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        greetService.sayMessage(<span class="string">"Runoob"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">GreetingService</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">sayMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello! Runoob</span><br></pre></td></tr></table></figure>

<p>但如果将上面代码中的注释符去掉，就会出现下面报错的情况：<br><img src="https://cdn.jsdelivr.net/gh/fcbhank/MyResource@master/images/%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%EF%BC%9A%E4%B8%8D%E8%83%BD%E5%9C%A8%20lambda%20%E5%86%85%E9%83%A8%E4%BF%AE%E6%94%B9%E5%AE%9A%E4%B9%89%E5%9C%A8%E5%9F%9F%E5%A4%96%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F.jpg.jpg" alt="编译错误：不能在 lambda 内部修改定义在域外的局部变量"></p>
<hr>
<p>更多详细内容参见<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="noopener"><em>官方文档</em></a></p>
]]></content>
      <categories>
        <category>Java8 新特性</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LambdaExpressions</tag>
      </tags>
  </entry>
</search>
